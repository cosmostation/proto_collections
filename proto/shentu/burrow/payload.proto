syntax = 'proto3';

option go_package = "github.com/hyperledger/burrow/txs/payload";
option java_package = "shentu.burrow.v1alpha1";

import "gogoproto/gogo.proto";

import "shentu/burrow/permission.proto";
import "shentu/burrow/registry.proto";
import "shentu/burrow/spec.proto";

package payload;

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

// Any encodes a sum type for which only one should be set
message Any {
    option (gogoproto.onlyone) = true;

    CallTx CallTx = 1;
    SendTx SendTx = 2;
    NameTx NameTx = 3;
    PermsTx PermsTx = 4;
    GovTx GovTx = 5;
    BondTx BondTx = 6;
    UnbondTx UnbondTx = 7;
    BatchTx BatchTx = 8;
    ProposalTx ProposalTx = 9;
    IdentifyTx IdentifyTx = 10;
}

// An input to a transaction that may carry an Amount as a charge and whose sequence number must be one greater than
// that associated with the account at Address at the time of being received
message TxInput {
    option (gogoproto.goproto_stringer) = false;
    // The address from which this input flows
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
    // The amount of native token to transfer from the input address
    uint64 Amount = 2;
    // The sequence number that this transaction will induce (i.e. one greater than the input account's current sequence)
    uint64 Sequence = 3;
}

// An output from a transaction that may carry an amount as a charge
message TxOutput {
    option (gogoproto.goproto_stringer) = false;
    // The address to which this output flows
    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
    // The amount of native token to transfer to the output address
    uint64 Amount = 2;
}

// A instruction to run smart contract code in the EVM
message CallTx {
    option (gogoproto.goproto_stringer) = false;
    // The caller's input
    TxInput Input = 1;
    // The contract address to call or nil if we are creating a contract
    bytes Address = 2 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address"];
    // The upper bound on the amount of gas (and therefore EVM execution steps) this CallTx may generate
    uint64 GasLimit = 3;
    // Fee to offer validators for processing transaction
    uint64 Fee = 4;
    // EVM bytecode
    bytes Data = 5 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes", (gogoproto.nullable) = false];
    // WASM bytecode
    bytes WASM = 6 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes", (gogoproto.nullable) = false, (gogoproto.jsontag)="tags,omitempty"];
    // Set of contracts this code will deploy
    repeated ContractMeta ContractMeta = 7;
    // The upper bound on the price per unit of gas
    uint64 GasPrice = 8;
}

message ContractMeta {
    bytes CodeHash = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes", (gogoproto.nullable) = false];
    string Meta = 2;
}

// A payment between two sets of parties
message SendTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;
    // The payers
    repeated TxInput Inputs = 1;
    // The payees
    repeated TxOutput Outputs = 2;
}

// An update to the on-chain permissions
message PermsTx {
    option (gogoproto.goproto_stringer) = false;
    // The permission moderator
    TxInput Input = 1;
    // The modified permissions
    permission.PermArgs PermArgs = 2 [(gogoproto.nullable) = false];
}

// A request to claim a globally unique name across the entire chain with some optional data storage leased for a fee
message NameTx {
    option (gogoproto.goproto_stringer) = false;
    // The name updater
    TxInput Input = 1;
    // The name to update or create
    string Name = 2;
    // The data to store against the name
    string Data = 3;
    // The fee to provide that will determine the length of the name lease
    uint64 Fee = 4;
}

message BondTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    // Input must be the validator that desires to bond
    TxInput Input = 1;
}

message UnbondTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    TxInput Input = 1;
    // Account to unbond
    TxOutput Output = 2;
}

message GovTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    repeated TxInput Inputs = 1;
    repeated spec.TemplateAccount AccountUpdates = 2 [(gogoproto.nullable) = true];
}

message ProposalTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    TxInput Input = 1;
    int64 VotingWeight = 2;
    bytes ProposalHash = 3 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes"];
    Proposal Proposal = 4;
}

message IdentifyTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;
    
    // Senders
    repeated TxInput Inputs = 1;
	// Node to register
    registry.NodeIdentity Node = 2;
}

message BatchTx {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    repeated TxInput Inputs = 1;
    repeated Any Txs = 2;
}

message Vote {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    bytes Address = 1 [(gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address", (gogoproto.nullable) = false];
    int64 VotingWeight = 2;
}

message Proposal {
    option (gogoproto.goproto_stringer) = false;
    option (gogoproto.goproto_getters) = false;

    string Name = 1;
    string Description = 2;
    BatchTx BatchTx = 3;
}

message Ballot {
    Proposal Proposal = 1;
    bytes FinalizingTx = 2 [(gogoproto.customtype) = "github.com/hyperledger/burrow/binary.HexBytes"];
    enum ProposalState {
        // PROPOSED might be expired, if sequence number of any of the input accounts are out of date
        PROPOSED = 0;
        EXECUTED = 1;
        FAILED = 2;
    }
    ProposalState proposalState = 4;
    repeated Vote Votes = 5;
}
