//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ethermint/evm/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Ethermint_Evm_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ethermint_Evm_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? { get }

  func account(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>

  func cosmosAccount(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>

  func validatorAccount(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>

  func balance(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>

  func storage(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>

  func code(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>

  func txLogs(
    _ request: Ethermint_Evm_V1_QueryTxLogsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTxLogsRequest, Ethermint_Evm_V1_QueryTxLogsResponse>

  func blockLogs(
    _ request: Ethermint_Evm_V1_QueryBlockLogsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBlockLogsRequest, Ethermint_Evm_V1_QueryBlockLogsResponse>

  func blockBloom(
    _ request: Ethermint_Evm_V1_QueryBlockBloomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBlockBloomRequest, Ethermint_Evm_V1_QueryBlockBloomResponse>

  func params(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>

  func ethCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>

  func estimateGas(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>
}

extension Ethermint_Evm_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ethermint.evm.v1.Query"
  }

  /// Account queries an Ethereum account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Account.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func account(
    _ request: Ethermint_Evm_V1_QueryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/Account",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountInterceptors() ?? []
    )
  }

  /// CosmosAccount queries an Ethereum account's Cosmos Address.
  ///
  /// - Parameters:
  ///   - request: Request to send to CosmosAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cosmosAccount(
    _ request: Ethermint_Evm_V1_QueryCosmosAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/CosmosAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? []
    )
  }

  /// ValidatorAccount queries an Ethereum account's from a validator consensus
  /// Address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorAccount(
    _ request: Ethermint_Evm_V1_QueryValidatorAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/ValidatorAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? []
    )
  }

  /// Balance queries the balance of a the EVM denomination for a single
  /// EthAccount.
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Ethermint_Evm_V1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/Balance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Storage queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Storage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func storage(
    _ request: Ethermint_Evm_V1_QueryStorageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/Storage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStorageInterceptors() ?? []
    )
  }

  /// Code queries the balance of all coins for a single account.
  ///
  /// - Parameters:
  ///   - request: Request to send to Code.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func code(
    _ request: Ethermint_Evm_V1_QueryCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/Code",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  /// TxLogs queries ethereum logs from a transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to TxLogs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txLogs(
    _ request: Ethermint_Evm_V1_QueryTxLogsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryTxLogsRequest, Ethermint_Evm_V1_QueryTxLogsResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/TxLogs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxLogsInterceptors() ?? []
    )
  }

  /// BlockLogs queries all the ethereum logs for a given block hash.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockLogs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockLogs(
    _ request: Ethermint_Evm_V1_QueryBlockLogsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBlockLogsRequest, Ethermint_Evm_V1_QueryBlockLogsResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/BlockLogs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockLogsInterceptors() ?? []
    )
  }

  /// BlockBloom queries the block bloom filter bytes at a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to BlockBloom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func blockBloom(
    _ request: Ethermint_Evm_V1_QueryBlockBloomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryBlockBloomRequest, Ethermint_Evm_V1_QueryBlockBloomResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/BlockBloom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBlockBloomInterceptors() ?? []
    )
  }

  /// Params queries the parameters of x/evm module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Ethermint_Evm_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// EthCall implements the `eth_call` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to EthCall.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ethCall(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/EthCall",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthCallInterceptors() ?? []
    )
  }

  /// EstimateGas implements the `eth_estimateGas` rpc api
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateGas.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateGas(
    _ request: Ethermint_Evm_V1_EthCallRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse> {
    return self.makeUnaryCall(
      path: "/ethermint.evm.v1.Query/EstimateGas",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? []
    )
  }
}

internal protocol Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'account'.
  func makeAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'cosmosAccount'.
  func makeCosmosAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'validatorAccount'.
  func makeValidatorAccountInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'storage'.
  func makeStorageInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>]

  /// - Returns: Interceptors to use when invoking 'code'.
  func makeCodeInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'txLogs'.
  func makeTxLogsInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryTxLogsRequest, Ethermint_Evm_V1_QueryTxLogsResponse>]

  /// - Returns: Interceptors to use when invoking 'blockLogs'.
  func makeBlockLogsInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryBlockLogsRequest, Ethermint_Evm_V1_QueryBlockLogsResponse>]

  /// - Returns: Interceptors to use when invoking 'blockBloom'.
  func makeBlockBloomInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryBlockBloomRequest, Ethermint_Evm_V1_QueryBlockBloomResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'ethCall'.
  func makeEthCallInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateGas'.
  func makeEstimateGasInterceptors() -> [ClientInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>]
}

internal final class Ethermint_Evm_V1_QueryClient: Ethermint_Evm_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ethermint.evm.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ethermint_Evm_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ethermint_Evm_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Account queries an Ethereum account.
  func account(request: Ethermint_Evm_V1_QueryAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryAccountResponse>

  /// CosmosAccount queries an Ethereum account's Cosmos Address.
  func cosmosAccount(request: Ethermint_Evm_V1_QueryCosmosAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryCosmosAccountResponse>

  /// ValidatorAccount queries an Ethereum account's from a validator consensus
  /// Address.
  func validatorAccount(request: Ethermint_Evm_V1_QueryValidatorAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryValidatorAccountResponse>

  /// Balance queries the balance of a the EVM denomination for a single
  /// EthAccount.
  func balance(request: Ethermint_Evm_V1_QueryBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryBalanceResponse>

  /// Storage queries the balance of all coins for a single account.
  func storage(request: Ethermint_Evm_V1_QueryStorageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryStorageResponse>

  /// Code queries the balance of all coins for a single account.
  func code(request: Ethermint_Evm_V1_QueryCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryCodeResponse>

  /// TxLogs queries ethereum logs from a transaction.
  func txLogs(request: Ethermint_Evm_V1_QueryTxLogsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryTxLogsResponse>

  /// BlockLogs queries all the ethereum logs for a given block hash.
  func blockLogs(request: Ethermint_Evm_V1_QueryBlockLogsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryBlockLogsResponse>

  /// BlockBloom queries the block bloom filter bytes at a given height.
  func blockBloom(request: Ethermint_Evm_V1_QueryBlockBloomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryBlockBloomResponse>

  /// Params queries the parameters of x/evm module.
  func params(request: Ethermint_Evm_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_QueryParamsResponse>

  /// EthCall implements the `eth_call` rpc api
  func ethCall(request: Ethermint_Evm_V1_EthCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_MsgEthereumTxResponse>

  /// EstimateGas implements the `eth_estimateGas` rpc api
  func estimateGas(request: Ethermint_Evm_V1_EthCallRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ethermint_Evm_V1_EstimateGasResponse>
}

extension Ethermint_Evm_V1_QueryProvider {
  internal var serviceName: Substring { return "ethermint.evm.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Account":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryAccountResponse>(),
        interceptors: self.interceptors?.makeAccountInterceptors() ?? [],
        userFunction: self.account(request:context:)
      )

    case "CosmosAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCosmosAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCosmosAccountResponse>(),
        interceptors: self.interceptors?.makeCosmosAccountInterceptors() ?? [],
        userFunction: self.cosmosAccount(request:context:)
      )

    case "ValidatorAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryValidatorAccountRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryValidatorAccountResponse>(),
        interceptors: self.interceptors?.makeValidatorAccountInterceptors() ?? [],
        userFunction: self.validatorAccount(request:context:)
      )

    case "Balance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBalanceRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBalanceResponse>(),
        interceptors: self.interceptors?.makeBalanceInterceptors() ?? [],
        userFunction: self.balance(request:context:)
      )

    case "Storage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryStorageRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryStorageResponse>(),
        interceptors: self.interceptors?.makeStorageInterceptors() ?? [],
        userFunction: self.storage(request:context:)
      )

    case "Code":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryCodeRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        userFunction: self.code(request:context:)
      )

    case "TxLogs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryTxLogsRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryTxLogsResponse>(),
        interceptors: self.interceptors?.makeTxLogsInterceptors() ?? [],
        userFunction: self.txLogs(request:context:)
      )

    case "BlockLogs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBlockLogsRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBlockLogsResponse>(),
        interceptors: self.interceptors?.makeBlockLogsInterceptors() ?? [],
        userFunction: self.blockLogs(request:context:)
      )

    case "BlockBloom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryBlockBloomRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryBlockBloomResponse>(),
        interceptors: self.interceptors?.makeBlockBloomInterceptors() ?? [],
        userFunction: self.blockBloom(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "EthCall":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_MsgEthereumTxResponse>(),
        interceptors: self.interceptors?.makeEthCallInterceptors() ?? [],
        userFunction: self.ethCall(request:context:)
      )

    case "EstimateGas":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ethermint_Evm_V1_EthCallRequest>(),
        responseSerializer: ProtobufSerializer<Ethermint_Evm_V1_EstimateGasResponse>(),
        interceptors: self.interceptors?.makeEstimateGasInterceptors() ?? [],
        userFunction: self.estimateGas(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ethermint_Evm_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'account'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryAccountRequest, Ethermint_Evm_V1_QueryAccountResponse>]

  /// - Returns: Interceptors to use when handling 'cosmosAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCosmosAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryCosmosAccountRequest, Ethermint_Evm_V1_QueryCosmosAccountResponse>]

  /// - Returns: Interceptors to use when handling 'validatorAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValidatorAccountInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryValidatorAccountRequest, Ethermint_Evm_V1_QueryValidatorAccountResponse>]

  /// - Returns: Interceptors to use when handling 'balance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBalanceInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryBalanceRequest, Ethermint_Evm_V1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when handling 'storage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStorageInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryStorageRequest, Ethermint_Evm_V1_QueryStorageResponse>]

  /// - Returns: Interceptors to use when handling 'code'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryCodeRequest, Ethermint_Evm_V1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when handling 'txLogs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxLogsInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryTxLogsRequest, Ethermint_Evm_V1_QueryTxLogsResponse>]

  /// - Returns: Interceptors to use when handling 'blockLogs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockLogsInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryBlockLogsRequest, Ethermint_Evm_V1_QueryBlockLogsResponse>]

  /// - Returns: Interceptors to use when handling 'blockBloom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBlockBloomInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryBlockBloomRequest, Ethermint_Evm_V1_QueryBlockBloomResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_QueryParamsRequest, Ethermint_Evm_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'ethCall'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEthCallInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when handling 'estimateGas'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateGasInterceptors() -> [ServerInterceptor<Ethermint_Evm_V1_EthCallRequest, Ethermint_Evm_V1_EstimateGasResponse>]
}
