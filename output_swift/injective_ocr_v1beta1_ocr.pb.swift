// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/ocr/v1beta1/ocr.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Injective_Ocr_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Native denom for LINK coin in the bank keeper
  var linkDenom: String = String()

  /// The block number interval at which payouts are made
  var payoutBlockInterval: UInt64 = 0

  /// The admin for the OCR module
  var moduleAdmin: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_FeedConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// signers ith element is address ith oracle uses to sign a report
  var signers: [String] = []

  /// transmitters ith element is address ith oracle uses to transmit a report via the transmit method
  var transmitters: [String] = []

  /// f maximum number of faulty/dishonest oracles the protocol can tolerate while still working correctly
  var f: UInt32 = 0

  /// onchain_config serialized data with reporting plugin params on chain.
  var onchainConfig: Data = Data()

  /// offchain_config_version version of the serialization format used for "offchain_config" parameter
  var offchainConfigVersion: UInt64 = 0

  /// offchain_config serialized data used by oracles to configure their offchain operation
  var offchainConfig: Data = Data()

  /// feed-specific params for the Cosmos module.
  var moduleParams: Injective_Ocr_V1beta1_ModuleParams {
    get {return _moduleParams ?? Injective_Ocr_V1beta1_ModuleParams()}
    set {_moduleParams = newValue}
  }
  /// Returns true if `moduleParams` has been explicitly set.
  var hasModuleParams: Bool {return self._moduleParams != nil}
  /// Clears the value of `moduleParams`. Subsequent reads from it will return its default value.
  mutating func clearModuleParams() {self._moduleParams = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _moduleParams: Injective_Ocr_V1beta1_ModuleParams? = nil
}

struct Injective_Ocr_V1beta1_FeedConfigInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latestConfigDigest: Data = Data()

  var f: UInt32 = 0

  var n: UInt32 = 0

  /// config_count ordinal number of this config setting among all config settings
  var configCount: UInt64 = 0

  var latestConfigBlockNumber: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_ModuleParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// feed_id is an unique ID for the target of this config
  var feedID: String = String()

  /// lowest answer the median of a report is allowed to be
  var minAnswer: String = String()

  /// highest answer the median of a report is allowed to be
  var maxAnswer: String = String()

  /// Fixed LINK reward for each observer
  var linkPerObservation: String = String()

  /// Fixed LINK reward for transmitter
  var linkPerTransmission: String = String()

  /// Native denom for LINK coin in the bank keeper
  var linkDenom: String = String()

  /// Enables unique reports
  var uniqueReports: Bool = false

  /// short human-readable description of observable this feed's answers pertain to
  var description_p: String = String()

  /// feed administrator
  var feedAdmin: String = String()

  /// feed billing administrator
  var billingAdmin: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_ContractConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// config_count ordinal number of this config setting among all config settings
  var configCount: UInt64 = 0

  /// signers ith element is address ith oracle uses to sign a report
  var signers: [String] = []

  /// transmitters ith element is address ith oracle uses to transmit a report via the transmit method
  var transmitters: [String] = []

  /// f maximum number of faulty/dishonest oracles the protocol can tolerate while still working correctly
  var f: UInt32 = 0

  /// onchain_config serialized data with reporting plugin params on chain.
  var onchainConfig: Data = Data()

  /// offchain_config_version version of the serialization format used for "offchain_config" parameter
  var offchainConfigVersion: UInt64 = 0

  /// offchain_config serialized data used by oracles to configure their offchain operation
  var offchainConfig: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_SetConfigProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var config: Injective_Ocr_V1beta1_FeedConfig {
    get {return _storage._config ?? Injective_Ocr_V1beta1_FeedConfig()}
    set {_uniqueStorage()._config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return _storage._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {_uniqueStorage()._config = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Injective_Ocr_V1beta1_FeedProperties {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// feed_id is an unique ID for the target of this config
  var feedID: String = String()

  /// f maximum number of faulty/dishonest oracles the protocol can tolerate while still working correctly
  var f: UInt32 = 0

  /// onchain_config serialized data with reporting plugin params on chain.
  var onchainConfig: Data = Data()

  /// offchain_config_version version of the serialization format used for "offchain_config" parameter
  var offchainConfigVersion: UInt64 = 0

  /// offchain_config serialized data used by oracles to configure their offchain operation
  var offchainConfig: Data = Data()

  /// lowest answer the median of a report is allowed to be
  var minAnswer: String = String()

  /// highest answer the median of a report is allowed to be
  var maxAnswer: String = String()

  /// Fixed LINK reward for each observer
  var linkPerObservation: String = String()

  /// Fixed LINK reward for transmitter
  var linkPerTransmission: String = String()

  /// Enables unique reports
  var uniqueReports: Bool = false

  /// short human-readable description of observable this feed's answers pertain to
  var description_p: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_SetBatchConfigProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var description_p: String = String()

  /// signers ith element is address ith oracle uses to sign a report
  var signers: [String] = []

  /// transmitters ith element is address ith oracle uses to transmit a report via the transmit method
  var transmitters: [String] = []

  /// Native denom for LINK coin in the bank keeper
  var linkDenom: String = String()

  /// feed properties
  var feedProperties: [Injective_Ocr_V1beta1_FeedProperties] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_OracleObservationsCounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var counts: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// LINK-INJ-denominated reimbursements for gas used by transmitters.
struct Injective_Ocr_V1beta1_GasReimbursements {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reimbursements: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_Payee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transmitterAddr: String = String()

  var paymentAddr: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Transmission records the median answer from the transmit transaction at
/// time timestamp
struct Injective_Ocr_V1beta1_Transmission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var answer: String = String()

  /// when were observations made offchain
  var observationsTimestamp: Int64 = 0

  /// when was report received onchain
  var transmissionTimestamp: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_EpochAndRound {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var epoch: UInt64 = 0

  var round: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_Report {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var observationsTimestamp: Int64 = 0

  /// ith element is the index of the ith observer
  var observers: Data = Data()

  /// ith element is the ith observation
  var observations: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_ReportToSign {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var configDigest: Data = Data()

  var epoch: UInt64 = 0

  var round: UInt64 = 0

  var extraHash: Data = Data()

  /// Opaque report
  var report: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_EventOraclePaid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var transmitterAddr: String = String()

  var payeeAddr: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Injective_Ocr_V1beta1_EventAnswerUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var current: String = String()

  var roundID: String = String()

  var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  var hasUpdatedAt: Bool {return self._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  mutating func clearUpdatedAt() {self._updatedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Injective_Ocr_V1beta1_EventNewRound {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var roundID: String = String()

  /// address of starter
  var startedBy: String = String()

  var startedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startedAt = newValue}
  }
  /// Returns true if `startedAt` has been explicitly set.
  var hasStartedAt: Bool {return self._startedAt != nil}
  /// Clears the value of `startedAt`. Subsequent reads from it will return its default value.
  mutating func clearStartedAt() {self._startedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Injective_Ocr_V1beta1_EventTransmitted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var configDigest: Data = Data()

  var epoch: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_EventNewTransmission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var aggregatorRoundID: UInt32 = 0

  var answer: String = String()

  var transmitter: String = String()

  var observationsTimestamp: Int64 = 0

  var observations: [String] = []

  var observers: Data = Data()

  var configDigest: Data = Data()

  var epochAndRound: Injective_Ocr_V1beta1_EpochAndRound {
    get {return _epochAndRound ?? Injective_Ocr_V1beta1_EpochAndRound()}
    set {_epochAndRound = newValue}
  }
  /// Returns true if `epochAndRound` has been explicitly set.
  var hasEpochAndRound: Bool {return self._epochAndRound != nil}
  /// Clears the value of `epochAndRound`. Subsequent reads from it will return its default value.
  mutating func clearEpochAndRound() {self._epochAndRound = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _epochAndRound: Injective_Ocr_V1beta1_EpochAndRound? = nil
}

struct Injective_Ocr_V1beta1_EventConfigSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// hash of the config
  var configDigest: Data {
    get {return _storage._configDigest}
    set {_uniqueStorage()._configDigest = newValue}
  }

  /// previous_config_block_number block in which the previous config was set, to simplify historic analysis
  var previousConfigBlockNumber: Int64 {
    get {return _storage._previousConfigBlockNumber}
    set {_uniqueStorage()._previousConfigBlockNumber = newValue}
  }

  var config: Injective_Ocr_V1beta1_FeedConfig {
    get {return _storage._config ?? Injective_Ocr_V1beta1_FeedConfig()}
    set {_uniqueStorage()._config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return _storage._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {_uniqueStorage()._config = nil}

  var configInfo: Injective_Ocr_V1beta1_FeedConfigInfo {
    get {return _storage._configInfo ?? Injective_Ocr_V1beta1_FeedConfigInfo()}
    set {_uniqueStorage()._configInfo = newValue}
  }
  /// Returns true if `configInfo` has been explicitly set.
  var hasConfigInfo: Bool {return _storage._configInfo != nil}
  /// Clears the value of `configInfo`. Subsequent reads from it will return its default value.
  mutating func clearConfigInfo() {_uniqueStorage()._configInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.ocr.v1beta1"

extension Injective_Ocr_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "link_denom"),
    2: .standard(proto: "payout_block_interval"),
    3: .standard(proto: "module_admin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.linkDenom) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.payoutBlockInterval) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moduleAdmin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.linkDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.linkDenom, fieldNumber: 1)
    }
    if self.payoutBlockInterval != 0 {
      try visitor.visitSingularUInt64Field(value: self.payoutBlockInterval, fieldNumber: 2)
    }
    if !self.moduleAdmin.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleAdmin, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_Params, rhs: Injective_Ocr_V1beta1_Params) -> Bool {
    if lhs.linkDenom != rhs.linkDenom {return false}
    if lhs.payoutBlockInterval != rhs.payoutBlockInterval {return false}
    if lhs.moduleAdmin != rhs.moduleAdmin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signers"),
    2: .same(proto: "transmitters"),
    3: .same(proto: "f"),
    4: .standard(proto: "onchain_config"),
    5: .standard(proto: "offchain_config_version"),
    6: .standard(proto: "offchain_config"),
    7: .standard(proto: "module_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.signers) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.transmitters) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.f) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.onchainConfig) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.offchainConfigVersion) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.offchainConfig) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._moduleParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.signers, fieldNumber: 1)
    }
    if !self.transmitters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.transmitters, fieldNumber: 2)
    }
    if self.f != 0 {
      try visitor.visitSingularUInt32Field(value: self.f, fieldNumber: 3)
    }
    if !self.onchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.onchainConfig, fieldNumber: 4)
    }
    if self.offchainConfigVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.offchainConfigVersion, fieldNumber: 5)
    }
    if !self.offchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.offchainConfig, fieldNumber: 6)
    }
    if let v = self._moduleParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedConfig, rhs: Injective_Ocr_V1beta1_FeedConfig) -> Bool {
    if lhs.signers != rhs.signers {return false}
    if lhs.transmitters != rhs.transmitters {return false}
    if lhs.f != rhs.f {return false}
    if lhs.onchainConfig != rhs.onchainConfig {return false}
    if lhs.offchainConfigVersion != rhs.offchainConfigVersion {return false}
    if lhs.offchainConfig != rhs.offchainConfig {return false}
    if lhs._moduleParams != rhs._moduleParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedConfigInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedConfigInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "latest_config_digest"),
    2: .same(proto: "f"),
    3: .same(proto: "n"),
    4: .standard(proto: "config_count"),
    5: .standard(proto: "latest_config_block_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.latestConfigDigest) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.f) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.n) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.configCount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.latestConfigBlockNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.latestConfigDigest.isEmpty {
      try visitor.visitSingularBytesField(value: self.latestConfigDigest, fieldNumber: 1)
    }
    if self.f != 0 {
      try visitor.visitSingularUInt32Field(value: self.f, fieldNumber: 2)
    }
    if self.n != 0 {
      try visitor.visitSingularUInt32Field(value: self.n, fieldNumber: 3)
    }
    if self.configCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.configCount, fieldNumber: 4)
    }
    if self.latestConfigBlockNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.latestConfigBlockNumber, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedConfigInfo, rhs: Injective_Ocr_V1beta1_FeedConfigInfo) -> Bool {
    if lhs.latestConfigDigest != rhs.latestConfigDigest {return false}
    if lhs.f != rhs.f {return false}
    if lhs.n != rhs.n {return false}
    if lhs.configCount != rhs.configCount {return false}
    if lhs.latestConfigBlockNumber != rhs.latestConfigBlockNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_ModuleParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .standard(proto: "min_answer"),
    3: .standard(proto: "max_answer"),
    4: .standard(proto: "link_per_observation"),
    5: .standard(proto: "link_per_transmission"),
    6: .standard(proto: "link_denom"),
    7: .standard(proto: "unique_reports"),
    8: .same(proto: "description"),
    9: .standard(proto: "feed_admin"),
    10: .standard(proto: "billing_admin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.minAnswer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.maxAnswer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.linkPerObservation) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.linkPerTransmission) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.linkDenom) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.uniqueReports) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.feedAdmin) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.billingAdmin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if !self.minAnswer.isEmpty {
      try visitor.visitSingularStringField(value: self.minAnswer, fieldNumber: 2)
    }
    if !self.maxAnswer.isEmpty {
      try visitor.visitSingularStringField(value: self.maxAnswer, fieldNumber: 3)
    }
    if !self.linkPerObservation.isEmpty {
      try visitor.visitSingularStringField(value: self.linkPerObservation, fieldNumber: 4)
    }
    if !self.linkPerTransmission.isEmpty {
      try visitor.visitSingularStringField(value: self.linkPerTransmission, fieldNumber: 5)
    }
    if !self.linkDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.linkDenom, fieldNumber: 6)
    }
    if self.uniqueReports != false {
      try visitor.visitSingularBoolField(value: self.uniqueReports, fieldNumber: 7)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 8)
    }
    if !self.feedAdmin.isEmpty {
      try visitor.visitSingularStringField(value: self.feedAdmin, fieldNumber: 9)
    }
    if !self.billingAdmin.isEmpty {
      try visitor.visitSingularStringField(value: self.billingAdmin, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_ModuleParams, rhs: Injective_Ocr_V1beta1_ModuleParams) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.minAnswer != rhs.minAnswer {return false}
    if lhs.maxAnswer != rhs.maxAnswer {return false}
    if lhs.linkPerObservation != rhs.linkPerObservation {return false}
    if lhs.linkPerTransmission != rhs.linkPerTransmission {return false}
    if lhs.linkDenom != rhs.linkDenom {return false}
    if lhs.uniqueReports != rhs.uniqueReports {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.feedAdmin != rhs.feedAdmin {return false}
    if lhs.billingAdmin != rhs.billingAdmin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_ContractConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_count"),
    2: .same(proto: "signers"),
    3: .same(proto: "transmitters"),
    4: .same(proto: "f"),
    5: .standard(proto: "onchain_config"),
    6: .standard(proto: "offchain_config_version"),
    7: .standard(proto: "offchain_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.configCount) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.signers) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.transmitters) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.f) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.onchainConfig) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.offchainConfigVersion) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.offchainConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.configCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.configCount, fieldNumber: 1)
    }
    if !self.signers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.signers, fieldNumber: 2)
    }
    if !self.transmitters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.transmitters, fieldNumber: 3)
    }
    if self.f != 0 {
      try visitor.visitSingularUInt32Field(value: self.f, fieldNumber: 4)
    }
    if !self.onchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.onchainConfig, fieldNumber: 5)
    }
    if self.offchainConfigVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.offchainConfigVersion, fieldNumber: 6)
    }
    if !self.offchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.offchainConfig, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_ContractConfig, rhs: Injective_Ocr_V1beta1_ContractConfig) -> Bool {
    if lhs.configCount != rhs.configCount {return false}
    if lhs.signers != rhs.signers {return false}
    if lhs.transmitters != rhs.transmitters {return false}
    if lhs.f != rhs.f {return false}
    if lhs.onchainConfig != rhs.onchainConfig {return false}
    if lhs.offchainConfigVersion != rhs.offchainConfigVersion {return false}
    if lhs.offchainConfig != rhs.offchainConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_SetConfigProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetConfigProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "config"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _description_p: String = String()
    var _config: Injective_Ocr_V1beta1_FeedConfig? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _description_p = source._description_p
      _config = source._config
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._config) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 2)
      }
      if let v = _storage._config {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_SetConfigProposal, rhs: Injective_Ocr_V1beta1_SetConfigProposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._config != rhs_storage._config {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedProperties: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedProperties"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .same(proto: "f"),
    3: .standard(proto: "onchain_config"),
    4: .standard(proto: "offchain_config_version"),
    5: .standard(proto: "offchain_config"),
    6: .standard(proto: "min_answer"),
    7: .standard(proto: "max_answer"),
    8: .standard(proto: "link_per_observation"),
    9: .standard(proto: "link_per_transmission"),
    10: .standard(proto: "unique_reports"),
    11: .same(proto: "description"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.f) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.onchainConfig) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.offchainConfigVersion) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.offchainConfig) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.minAnswer) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.maxAnswer) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.linkPerObservation) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.linkPerTransmission) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.uniqueReports) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if self.f != 0 {
      try visitor.visitSingularUInt32Field(value: self.f, fieldNumber: 2)
    }
    if !self.onchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.onchainConfig, fieldNumber: 3)
    }
    if self.offchainConfigVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.offchainConfigVersion, fieldNumber: 4)
    }
    if !self.offchainConfig.isEmpty {
      try visitor.visitSingularBytesField(value: self.offchainConfig, fieldNumber: 5)
    }
    if !self.minAnswer.isEmpty {
      try visitor.visitSingularStringField(value: self.minAnswer, fieldNumber: 6)
    }
    if !self.maxAnswer.isEmpty {
      try visitor.visitSingularStringField(value: self.maxAnswer, fieldNumber: 7)
    }
    if !self.linkPerObservation.isEmpty {
      try visitor.visitSingularStringField(value: self.linkPerObservation, fieldNumber: 8)
    }
    if !self.linkPerTransmission.isEmpty {
      try visitor.visitSingularStringField(value: self.linkPerTransmission, fieldNumber: 9)
    }
    if self.uniqueReports != false {
      try visitor.visitSingularBoolField(value: self.uniqueReports, fieldNumber: 10)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedProperties, rhs: Injective_Ocr_V1beta1_FeedProperties) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.f != rhs.f {return false}
    if lhs.onchainConfig != rhs.onchainConfig {return false}
    if lhs.offchainConfigVersion != rhs.offchainConfigVersion {return false}
    if lhs.offchainConfig != rhs.offchainConfig {return false}
    if lhs.minAnswer != rhs.minAnswer {return false}
    if lhs.maxAnswer != rhs.maxAnswer {return false}
    if lhs.linkPerObservation != rhs.linkPerObservation {return false}
    if lhs.linkPerTransmission != rhs.linkPerTransmission {return false}
    if lhs.uniqueReports != rhs.uniqueReports {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_SetBatchConfigProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetBatchConfigProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .same(proto: "signers"),
    4: .same(proto: "transmitters"),
    5: .standard(proto: "link_denom"),
    6: .standard(proto: "feed_properties"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.signers) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.transmitters) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.linkDenom) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.feedProperties) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.signers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.signers, fieldNumber: 3)
    }
    if !self.transmitters.isEmpty {
      try visitor.visitRepeatedStringField(value: self.transmitters, fieldNumber: 4)
    }
    if !self.linkDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.linkDenom, fieldNumber: 5)
    }
    if !self.feedProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedProperties, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_SetBatchConfigProposal, rhs: Injective_Ocr_V1beta1_SetBatchConfigProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.signers != rhs.signers {return false}
    if lhs.transmitters != rhs.transmitters {return false}
    if lhs.linkDenom != rhs.linkDenom {return false}
    if lhs.feedProperties != rhs.feedProperties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_OracleObservationsCounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OracleObservationsCounts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt32Field(value: &self.counts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.counts.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.counts, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_OracleObservationsCounts, rhs: Injective_Ocr_V1beta1_OracleObservationsCounts) -> Bool {
    if lhs.counts != rhs.counts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_GasReimbursements: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GasReimbursements"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reimbursements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.reimbursements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reimbursements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reimbursements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_GasReimbursements, rhs: Injective_Ocr_V1beta1_GasReimbursements) -> Bool {
    if lhs.reimbursements != rhs.reimbursements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_Payee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Payee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transmitter_addr"),
    2: .standard(proto: "payment_addr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.transmitterAddr) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.paymentAddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transmitterAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.transmitterAddr, fieldNumber: 1)
    }
    if !self.paymentAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.paymentAddr, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_Payee, rhs: Injective_Ocr_V1beta1_Payee) -> Bool {
    if lhs.transmitterAddr != rhs.transmitterAddr {return false}
    if lhs.paymentAddr != rhs.paymentAddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_Transmission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Transmission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "answer"),
    2: .standard(proto: "observations_timestamp"),
    3: .standard(proto: "transmission_timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.answer) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.observationsTimestamp) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.transmissionTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 1)
    }
    if self.observationsTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.observationsTimestamp, fieldNumber: 2)
    }
    if self.transmissionTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.transmissionTimestamp, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_Transmission, rhs: Injective_Ocr_V1beta1_Transmission) -> Bool {
    if lhs.answer != rhs.answer {return false}
    if lhs.observationsTimestamp != rhs.observationsTimestamp {return false}
    if lhs.transmissionTimestamp != rhs.transmissionTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EpochAndRound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EpochAndRound"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "epoch"),
    2: .same(proto: "round"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 1)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EpochAndRound, rhs: Injective_Ocr_V1beta1_EpochAndRound) -> Bool {
    if lhs.epoch != rhs.epoch {return false}
    if lhs.round != rhs.round {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_Report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Report"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "observations_timestamp"),
    2: .same(proto: "observers"),
    3: .same(proto: "observations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.observationsTimestamp) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.observers) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.observations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.observationsTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.observationsTimestamp, fieldNumber: 1)
    }
    if !self.observers.isEmpty {
      try visitor.visitSingularBytesField(value: self.observers, fieldNumber: 2)
    }
    if !self.observations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.observations, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_Report, rhs: Injective_Ocr_V1beta1_Report) -> Bool {
    if lhs.observationsTimestamp != rhs.observationsTimestamp {return false}
    if lhs.observers != rhs.observers {return false}
    if lhs.observations != rhs.observations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_ReportToSign: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReportToSign"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_digest"),
    2: .same(proto: "epoch"),
    3: .same(proto: "round"),
    4: .standard(proto: "extra_hash"),
    5: .same(proto: "report"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.configDigest) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.round) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.extraHash) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.report) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configDigest.isEmpty {
      try visitor.visitSingularBytesField(value: self.configDigest, fieldNumber: 1)
    }
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 2)
    }
    if self.round != 0 {
      try visitor.visitSingularUInt64Field(value: self.round, fieldNumber: 3)
    }
    if !self.extraHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.extraHash, fieldNumber: 4)
    }
    if !self.report.isEmpty {
      try visitor.visitSingularBytesField(value: self.report, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_ReportToSign, rhs: Injective_Ocr_V1beta1_ReportToSign) -> Bool {
    if lhs.configDigest != rhs.configDigest {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.round != rhs.round {return false}
    if lhs.extraHash != rhs.extraHash {return false}
    if lhs.report != rhs.report {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventOraclePaid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventOraclePaid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transmitter_addr"),
    2: .standard(proto: "payee_addr"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.transmitterAddr) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.payeeAddr) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transmitterAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.transmitterAddr, fieldNumber: 1)
    }
    if !self.payeeAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.payeeAddr, fieldNumber: 2)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventOraclePaid, rhs: Injective_Ocr_V1beta1_EventOraclePaid) -> Bool {
    if lhs.transmitterAddr != rhs.transmitterAddr {return false}
    if lhs.payeeAddr != rhs.payeeAddr {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventAnswerUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventAnswerUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "current"),
    2: .standard(proto: "round_id"),
    3: .standard(proto: "updated_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.current) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.roundID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.current.isEmpty {
      try visitor.visitSingularStringField(value: self.current, fieldNumber: 1)
    }
    if !self.roundID.isEmpty {
      try visitor.visitSingularStringField(value: self.roundID, fieldNumber: 2)
    }
    if let v = self._updatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventAnswerUpdated, rhs: Injective_Ocr_V1beta1_EventAnswerUpdated) -> Bool {
    if lhs.current != rhs.current {return false}
    if lhs.roundID != rhs.roundID {return false}
    if lhs._updatedAt != rhs._updatedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventNewRound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventNewRound"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "round_id"),
    2: .standard(proto: "started_by"),
    3: .standard(proto: "started_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.roundID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.startedBy) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.roundID.isEmpty {
      try visitor.visitSingularStringField(value: self.roundID, fieldNumber: 1)
    }
    if !self.startedBy.isEmpty {
      try visitor.visitSingularStringField(value: self.startedBy, fieldNumber: 2)
    }
    if let v = self._startedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventNewRound, rhs: Injective_Ocr_V1beta1_EventNewRound) -> Bool {
    if lhs.roundID != rhs.roundID {return false}
    if lhs.startedBy != rhs.startedBy {return false}
    if lhs._startedAt != rhs._startedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventTransmitted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventTransmitted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_digest"),
    2: .same(proto: "epoch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.configDigest) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.epoch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.configDigest.isEmpty {
      try visitor.visitSingularBytesField(value: self.configDigest, fieldNumber: 1)
    }
    if self.epoch != 0 {
      try visitor.visitSingularUInt64Field(value: self.epoch, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventTransmitted, rhs: Injective_Ocr_V1beta1_EventTransmitted) -> Bool {
    if lhs.configDigest != rhs.configDigest {return false}
    if lhs.epoch != rhs.epoch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventNewTransmission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventNewTransmission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .standard(proto: "aggregator_round_id"),
    3: .same(proto: "answer"),
    4: .same(proto: "transmitter"),
    5: .standard(proto: "observations_timestamp"),
    6: .same(proto: "observations"),
    7: .same(proto: "observers"),
    8: .standard(proto: "config_digest"),
    9: .standard(proto: "epoch_and_round"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.aggregatorRoundID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.answer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.transmitter) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.observationsTimestamp) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.observations) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.observers) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.configDigest) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._epochAndRound) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if self.aggregatorRoundID != 0 {
      try visitor.visitSingularUInt32Field(value: self.aggregatorRoundID, fieldNumber: 2)
    }
    if !self.answer.isEmpty {
      try visitor.visitSingularStringField(value: self.answer, fieldNumber: 3)
    }
    if !self.transmitter.isEmpty {
      try visitor.visitSingularStringField(value: self.transmitter, fieldNumber: 4)
    }
    if self.observationsTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.observationsTimestamp, fieldNumber: 5)
    }
    if !self.observations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.observations, fieldNumber: 6)
    }
    if !self.observers.isEmpty {
      try visitor.visitSingularBytesField(value: self.observers, fieldNumber: 7)
    }
    if !self.configDigest.isEmpty {
      try visitor.visitSingularBytesField(value: self.configDigest, fieldNumber: 8)
    }
    if let v = self._epochAndRound {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventNewTransmission, rhs: Injective_Ocr_V1beta1_EventNewTransmission) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.aggregatorRoundID != rhs.aggregatorRoundID {return false}
    if lhs.answer != rhs.answer {return false}
    if lhs.transmitter != rhs.transmitter {return false}
    if lhs.observationsTimestamp != rhs.observationsTimestamp {return false}
    if lhs.observations != rhs.observations {return false}
    if lhs.observers != rhs.observers {return false}
    if lhs.configDigest != rhs.configDigest {return false}
    if lhs._epochAndRound != rhs._epochAndRound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_EventConfigSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventConfigSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "config_digest"),
    2: .standard(proto: "previous_config_block_number"),
    3: .same(proto: "config"),
    4: .standard(proto: "config_info"),
  ]

  fileprivate class _StorageClass {
    var _configDigest: Data = Data()
    var _previousConfigBlockNumber: Int64 = 0
    var _config: Injective_Ocr_V1beta1_FeedConfig? = nil
    var _configInfo: Injective_Ocr_V1beta1_FeedConfigInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _configDigest = source._configDigest
      _previousConfigBlockNumber = source._previousConfigBlockNumber
      _config = source._config
      _configInfo = source._configInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBytesField(value: &_storage._configDigest) }()
        case 2: try { try decoder.decodeSingularInt64Field(value: &_storage._previousConfigBlockNumber) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._config) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._configInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._configDigest.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._configDigest, fieldNumber: 1)
      }
      if _storage._previousConfigBlockNumber != 0 {
        try visitor.visitSingularInt64Field(value: _storage._previousConfigBlockNumber, fieldNumber: 2)
      }
      if let v = _storage._config {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._configInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_EventConfigSet, rhs: Injective_Ocr_V1beta1_EventConfigSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._configDigest != rhs_storage._configDigest {return false}
        if _storage._previousConfigBlockNumber != rhs_storage._previousConfigBlockNumber {return false}
        if _storage._config != rhs_storage._config {return false}
        if _storage._configInfo != rhs_storage._configInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
