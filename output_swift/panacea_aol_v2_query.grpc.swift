//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/aol/v2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Panacea_Aol_V2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Aol_V2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Aol_V2_QueryClientInterceptorFactoryProtocol? { get }

  func topic(
    _ request: Panacea_Aol_V2_QueryTopicRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Aol_V2_QueryTopicRequest, Panacea_Aol_V2_QueryTopicResponse>

  func topics(
    _ request: Panacea_Aol_V2_QueryTopicsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Aol_V2_QueryTopicsRequest, Panacea_Aol_V2_QueryTopicsResponse>

  func writer(
    _ request: Panacea_Aol_V2_QueryWriterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Aol_V2_QueryWriterRequest, Panacea_Aol_V2_QueryWriterResponse>

  func writers(
    _ request: Panacea_Aol_V2_QueryWritersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Aol_V2_QueryWritersRequest, Panacea_Aol_V2_QueryWritersResponse>

  func record(
    _ request: Panacea_Aol_V2_QueryRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Aol_V2_QueryRecordRequest, Panacea_Aol_V2_QueryRecordResponse>
}

extension Panacea_Aol_V2_QueryClientProtocol {
  internal var serviceName: String {
    return "panacea.aol.v2.Query"
  }

  /// Topic returns topic details.
  ///
  /// - Parameters:
  ///   - request: Request to send to Topic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func topic(
    _ request: Panacea_Aol_V2_QueryTopicRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Aol_V2_QueryTopicRequest, Panacea_Aol_V2_QueryTopicResponse> {
    return self.makeUnaryCall(
      path: "/panacea.aol.v2.Query/Topic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTopicInterceptors() ?? []
    )
  }

  /// Topics returns topic names.
  ///
  /// - Parameters:
  ///   - request: Request to send to Topics.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func topics(
    _ request: Panacea_Aol_V2_QueryTopicsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Aol_V2_QueryTopicsRequest, Panacea_Aol_V2_QueryTopicsResponse> {
    return self.makeUnaryCall(
      path: "/panacea.aol.v2.Query/Topics",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTopicsInterceptors() ?? []
    )
  }

  /// Writer returns writer details.
  ///
  /// - Parameters:
  ///   - request: Request to send to Writer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writer(
    _ request: Panacea_Aol_V2_QueryWriterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Aol_V2_QueryWriterRequest, Panacea_Aol_V2_QueryWriterResponse> {
    return self.makeUnaryCall(
      path: "/panacea.aol.v2.Query/Writer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWriterInterceptors() ?? []
    )
  }

  /// Writers returns writer addresses.
  ///
  /// - Parameters:
  ///   - request: Request to send to Writers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func writers(
    _ request: Panacea_Aol_V2_QueryWritersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Aol_V2_QueryWritersRequest, Panacea_Aol_V2_QueryWritersResponse> {
    return self.makeUnaryCall(
      path: "/panacea.aol.v2.Query/Writers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWritersInterceptors() ?? []
    )
  }

  /// Record returns record details.
  ///
  /// - Parameters:
  ///   - request: Request to send to Record.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func record(
    _ request: Panacea_Aol_V2_QueryRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Aol_V2_QueryRecordRequest, Panacea_Aol_V2_QueryRecordResponse> {
    return self.makeUnaryCall(
      path: "/panacea.aol.v2.Query/Record",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordInterceptors() ?? []
    )
  }
}

internal protocol Panacea_Aol_V2_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'topic'.
  func makeTopicInterceptors() -> [ClientInterceptor<Panacea_Aol_V2_QueryTopicRequest, Panacea_Aol_V2_QueryTopicResponse>]

  /// - Returns: Interceptors to use when invoking 'topics'.
  func makeTopicsInterceptors() -> [ClientInterceptor<Panacea_Aol_V2_QueryTopicsRequest, Panacea_Aol_V2_QueryTopicsResponse>]

  /// - Returns: Interceptors to use when invoking 'writer'.
  func makeWriterInterceptors() -> [ClientInterceptor<Panacea_Aol_V2_QueryWriterRequest, Panacea_Aol_V2_QueryWriterResponse>]

  /// - Returns: Interceptors to use when invoking 'writers'.
  func makeWritersInterceptors() -> [ClientInterceptor<Panacea_Aol_V2_QueryWritersRequest, Panacea_Aol_V2_QueryWritersResponse>]

  /// - Returns: Interceptors to use when invoking 'record'.
  func makeRecordInterceptors() -> [ClientInterceptor<Panacea_Aol_V2_QueryRecordRequest, Panacea_Aol_V2_QueryRecordResponse>]
}

internal final class Panacea_Aol_V2_QueryClient: Panacea_Aol_V2_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Aol_V2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.aol.v2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Aol_V2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Aol_V2_QueryProvider: CallHandlerProvider {
  var interceptors: Panacea_Aol_V2_QueryServerInterceptorFactoryProtocol? { get }

  /// Topic returns topic details.
  func topic(request: Panacea_Aol_V2_QueryTopicRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Aol_V2_QueryTopicResponse>

  /// Topics returns topic names.
  func topics(request: Panacea_Aol_V2_QueryTopicsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Aol_V2_QueryTopicsResponse>

  /// Writer returns writer details.
  func writer(request: Panacea_Aol_V2_QueryWriterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Aol_V2_QueryWriterResponse>

  /// Writers returns writer addresses.
  func writers(request: Panacea_Aol_V2_QueryWritersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Aol_V2_QueryWritersResponse>

  /// Record returns record details.
  func record(request: Panacea_Aol_V2_QueryRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Aol_V2_QueryRecordResponse>
}

extension Panacea_Aol_V2_QueryProvider {
  internal var serviceName: Substring { return "panacea.aol.v2.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Topic":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Aol_V2_QueryTopicRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Aol_V2_QueryTopicResponse>(),
        interceptors: self.interceptors?.makeTopicInterceptors() ?? [],
        userFunction: self.topic(request:context:)
      )

    case "Topics":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Aol_V2_QueryTopicsRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Aol_V2_QueryTopicsResponse>(),
        interceptors: self.interceptors?.makeTopicsInterceptors() ?? [],
        userFunction: self.topics(request:context:)
      )

    case "Writer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Aol_V2_QueryWriterRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Aol_V2_QueryWriterResponse>(),
        interceptors: self.interceptors?.makeWriterInterceptors() ?? [],
        userFunction: self.writer(request:context:)
      )

    case "Writers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Aol_V2_QueryWritersRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Aol_V2_QueryWritersResponse>(),
        interceptors: self.interceptors?.makeWritersInterceptors() ?? [],
        userFunction: self.writers(request:context:)
      )

    case "Record":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Aol_V2_QueryRecordRequest>(),
        responseSerializer: ProtobufSerializer<Panacea_Aol_V2_QueryRecordResponse>(),
        interceptors: self.interceptors?.makeRecordInterceptors() ?? [],
        userFunction: self.record(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Aol_V2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'topic'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTopicInterceptors() -> [ServerInterceptor<Panacea_Aol_V2_QueryTopicRequest, Panacea_Aol_V2_QueryTopicResponse>]

  /// - Returns: Interceptors to use when handling 'topics'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTopicsInterceptors() -> [ServerInterceptor<Panacea_Aol_V2_QueryTopicsRequest, Panacea_Aol_V2_QueryTopicsResponse>]

  /// - Returns: Interceptors to use when handling 'writer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWriterInterceptors() -> [ServerInterceptor<Panacea_Aol_V2_QueryWriterRequest, Panacea_Aol_V2_QueryWriterResponse>]

  /// - Returns: Interceptors to use when handling 'writers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWritersInterceptors() -> [ServerInterceptor<Panacea_Aol_V2_QueryWritersRequest, Panacea_Aol_V2_QueryWritersResponse>]

  /// - Returns: Interceptors to use when handling 'record'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordInterceptors() -> [ServerInterceptor<Panacea_Aol_V2_QueryRecordRequest, Panacea_Aol_V2_QueryRecordResponse>]
}
