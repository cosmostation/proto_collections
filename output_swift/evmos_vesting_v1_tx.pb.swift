// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: evmos/vesting/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateClawbackVestingAccount defines a message that enables creating a ClawbackVestingAccount.
struct Evmos_Vesting_V1_MsgCreateClawbackVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of the account providing the funds, which must also sign the request.
  var fromAddress: String = String()

  /// Address of the account to receive the funds.
  var toAddress: String = String()

  /// Start time of the vesting. Periods start relative to this time.
  var startTime: Int64 = 0

  /// Unlocking events as a sequence of durations and amounts, starting relative to start_time.
  var lockupPeriods: [Cosmos_Vesting_V1beta1_Period] = []

  /// Vesting events as a sequence of durations and amounts, starting relative to start_time.
  var vestingPeriods: [Cosmos_Vesting_V1beta1_Period] = []

  /// If true, merge this new grant into an existing ClawbackVestingAccount,
  /// or create it if it does not exist. If false, creates a new account.
  /// New grants to an existing account must be from the same from_address.
  var merge: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateClawbackVestingAccountResponse defines the MsgCreateClawbackVestingAccount response type.
struct Evmos_Vesting_V1_MsgCreateClawbackVestingAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClawback defines a message that removes unvested tokens from a ClawbackVestingAccount.
struct Evmos_Vesting_V1_MsgClawback {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// funder_address is the address which funded the account
  var funderAddress: String = String()

  /// address is the address of the ClawbackVestingAccount to claw back from.
  var address: String = String()

  /// dest_address specifies where the clawed-back tokens should be transferred.
  /// If empty, the tokens will be transferred back to the original funder of the account.
  var destAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClawbackResponse defines the MsgClawback response type.
struct Evmos_Vesting_V1_MsgClawbackResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "evmos.vesting.v1"

extension Evmos_Vesting_V1_MsgCreateClawbackVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateClawbackVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .standard(proto: "start_time"),
    4: .standard(proto: "lockup_periods"),
    5: .standard(proto: "vesting_periods"),
    6: .same(proto: "merge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.startTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.lockupPeriods) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.vestingPeriods) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.merge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if self.startTime != 0 {
      try visitor.visitSingularInt64Field(value: self.startTime, fieldNumber: 3)
    }
    if !self.lockupPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lockupPeriods, fieldNumber: 4)
    }
    if !self.vestingPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vestingPeriods, fieldNumber: 5)
    }
    if self.merge != false {
      try visitor.visitSingularBoolField(value: self.merge, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Evmos_Vesting_V1_MsgCreateClawbackVestingAccount, rhs: Evmos_Vesting_V1_MsgCreateClawbackVestingAccount) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.lockupPeriods != rhs.lockupPeriods {return false}
    if lhs.vestingPeriods != rhs.vestingPeriods {return false}
    if lhs.merge != rhs.merge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Vesting_V1_MsgCreateClawbackVestingAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateClawbackVestingAccountResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Evmos_Vesting_V1_MsgCreateClawbackVestingAccountResponse, rhs: Evmos_Vesting_V1_MsgCreateClawbackVestingAccountResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Vesting_V1_MsgClawback: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClawback"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "funder_address"),
    2: .same(proto: "address"),
    3: .standard(proto: "dest_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.funderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.funderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.funderAddress, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    if !self.destAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.destAddress, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Evmos_Vesting_V1_MsgClawback, rhs: Evmos_Vesting_V1_MsgClawback) -> Bool {
    if lhs.funderAddress != rhs.funderAddress {return false}
    if lhs.address != rhs.address {return false}
    if lhs.destAddress != rhs.destAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Evmos_Vesting_V1_MsgClawbackResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClawbackResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Evmos_Vesting_V1_MsgClawbackResponse, rhs: Evmos_Vesting_V1_MsgClawbackResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
