// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stargaze/claim/v1beta1/claim_record.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Publicawesome_Stargaze_Claim_V1beta1_Action: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case initialClaim // = 0
  case buySocialToken // = 1
  case mintNft // = 2
  case vote // = 3
  case delegateStake // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .initialClaim
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .initialClaim
    case 1: self = .buySocialToken
    case 2: self = .mintNft
    case 3: self = .vote
    case 4: self = .delegateStake
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .initialClaim: return 0
    case .buySocialToken: return 1
    case .mintNft: return 2
    case .vote: return 3
    case .delegateStake: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Publicawesome_Stargaze_Claim_V1beta1_Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Publicawesome_Stargaze_Claim_V1beta1_Action] = [
    .initialClaim,
    .buySocialToken,
    .mintNft,
    .vote,
    .delegateStake,
  ]
}

#endif  // swift(>=4.2)

struct Publicawesome_Stargaze_Claim_V1beta1_ClaimRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of claim user
  var address: String = String()

  /// total initial claimable amount for the user
  var initialClaimableAmount: [Cosmos_Base_V1beta1_Coin] = []

  /// true if action is completed
  /// index of bool in array refers to action enum #
  var actionCompleted: [Bool] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "publicawesome.stargaze.claim.v1beta1"

extension Publicawesome_Stargaze_Claim_V1beta1_Action: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ActionInitialClaim"),
    1: .same(proto: "ActionBuySocialToken"),
    2: .same(proto: "ActionMintNFT"),
    3: .same(proto: "ActionVote"),
    4: .same(proto: "ActionDelegateStake"),
  ]
}

extension Publicawesome_Stargaze_Claim_V1beta1_ClaimRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "initial_claimable_amount"),
    4: .standard(proto: "action_completed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.initialClaimableAmount) }()
      case 4: try { try decoder.decodeRepeatedBoolField(value: &self.actionCompleted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.initialClaimableAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.initialClaimableAmount, fieldNumber: 2)
    }
    if !self.actionCompleted.isEmpty {
      try visitor.visitPackedBoolField(value: self.actionCompleted, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Publicawesome_Stargaze_Claim_V1beta1_ClaimRecord, rhs: Publicawesome_Stargaze_Claim_V1beta1_ClaimRecord) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.initialClaimableAmount != rhs.initialClaimableAmount {return false}
    if lhs.actionCompleted != rhs.actionCompleted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
