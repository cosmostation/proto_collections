// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/vote/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Vote_Exported_V1beta1_PollState: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// these enum values are used for bitwise operations, therefore they need to
  /// be powers of 2
  case unspecified // = 0
  case pending // = 1
  case completed // = 2
  case failed // = 4
  case expired // = 8
  case allowOverride // = 16
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .completed
    case 4: self = .failed
    case 8: self = .expired
    case 16: self = .allowOverride
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .completed: return 2
    case .failed: return 4
    case .expired: return 8
    case .allowOverride: return 16
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Vote_Exported_V1beta1_PollState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Vote_Exported_V1beta1_PollState] = [
    .unspecified,
    .pending,
    .completed,
    .failed,
    .expired,
    .allowOverride,
  ]
}

#endif  // swift(>=4.2)

/// PollKey represents the key data for a poll
struct Axelar_Vote_Exported_V1beta1_PollKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var module: String = String()

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Vote_Exported_V1beta1_Voter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validator: Data = Data()

  var votingPower: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PollMetadata represents a poll with write-in voting, i.e. the result of the
/// vote can have any data type
struct Axelar_Vote_Exported_V1beta1_PollMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Axelar_Vote_Exported_V1beta1_PollKey {
    get {return _key ?? Axelar_Vote_Exported_V1beta1_PollKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var expiresAt: Int64 = 0

  var result: Google_Protobuf2_Any {
    get {return _result ?? Google_Protobuf2_Any()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var votingThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _votingThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_votingThreshold = newValue}
  }
  /// Returns true if `votingThreshold` has been explicitly set.
  var hasVotingThreshold: Bool {return self._votingThreshold != nil}
  /// Clears the value of `votingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearVotingThreshold() {self._votingThreshold = nil}

  var state: Axelar_Vote_Exported_V1beta1_PollState = .unspecified

  var minVoterCount: Int64 = 0

  var voters: [Axelar_Vote_Exported_V1beta1_Voter] = []

  var totalVotingPower: Data = Data()

  var rewardPoolName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: Axelar_Vote_Exported_V1beta1_PollKey? = nil
  fileprivate var _result: Google_Protobuf2_Any? = nil
  fileprivate var _votingThreshold: Axelar_Utils_V1beta1_Threshold? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.vote.exported.v1beta1"

extension Axelar_Vote_Exported_V1beta1_PollState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POLL_STATE_UNSPECIFIED"),
    1: .same(proto: "POLL_STATE_PENDING"),
    2: .same(proto: "POLL_STATE_COMPLETED"),
    4: .same(proto: "POLL_STATE_FAILED"),
    8: .same(proto: "POLL_STATE_EXPIRED"),
    16: .same(proto: "POLL_STATE_ALLOW_OVERRIDE"),
  ]
}

extension Axelar_Vote_Exported_V1beta1_PollKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PollKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.module) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.module.isEmpty {
      try visitor.visitSingularStringField(value: self.module, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_PollKey, rhs: Axelar_Vote_Exported_V1beta1_PollKey) -> Bool {
    if lhs.module != rhs.module {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Vote_Exported_V1beta1_Voter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Voter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validator"),
    2: .standard(proto: "voting_power"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.validator) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.votingPower) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validator.isEmpty {
      try visitor.visitSingularBytesField(value: self.validator, fieldNumber: 1)
    }
    if self.votingPower != 0 {
      try visitor.visitSingularInt64Field(value: self.votingPower, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_Voter, rhs: Axelar_Vote_Exported_V1beta1_Voter) -> Bool {
    if lhs.validator != rhs.validator {return false}
    if lhs.votingPower != rhs.votingPower {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Vote_Exported_V1beta1_PollMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PollMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    3: .standard(proto: "expires_at"),
    4: .same(proto: "result"),
    5: .standard(proto: "voting_threshold"),
    6: .same(proto: "state"),
    7: .standard(proto: "min_voter_count"),
    8: .same(proto: "voters"),
    9: .standard(proto: "total_voting_power"),
    10: .standard(proto: "reward_pool_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.expiresAt) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._votingThreshold) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.minVoterCount) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.voters) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.totalVotingPower) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.rewardPoolName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.expiresAt != 0 {
      try visitor.visitSingularInt64Field(value: self.expiresAt, fieldNumber: 3)
    }
    if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._votingThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 6)
    }
    if self.minVoterCount != 0 {
      try visitor.visitSingularInt64Field(value: self.minVoterCount, fieldNumber: 7)
    }
    if !self.voters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.voters, fieldNumber: 8)
    }
    if !self.totalVotingPower.isEmpty {
      try visitor.visitSingularBytesField(value: self.totalVotingPower, fieldNumber: 9)
    }
    if !self.rewardPoolName.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardPoolName, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Vote_Exported_V1beta1_PollMetadata, rhs: Axelar_Vote_Exported_V1beta1_PollMetadata) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs.expiresAt != rhs.expiresAt {return false}
    if lhs._result != rhs._result {return false}
    if lhs._votingThreshold != rhs._votingThreshold {return false}
    if lhs.state != rhs.state {return false}
    if lhs.minVoterCount != rhs.minVoterCount {return false}
    if lhs.voters != rhs.voters {return false}
    if lhs.totalVotingPower != rhs.totalVotingPower {return false}
    if lhs.rewardPoolName != rhs.rewardPoolName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
