//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/snapshot/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the snapshot Msg service.
///
/// Usage: instantiate `Axelar_Snapshot_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Snapshot_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Snapshot_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func registerProxy(
    _ request: Axelar_Snapshot_V1beta1_RegisterProxyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Snapshot_V1beta1_RegisterProxyRequest, Axelar_Snapshot_V1beta1_RegisterProxyResponse>

  func deactivateProxy(
    _ request: Axelar_Snapshot_V1beta1_DeactivateProxyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Snapshot_V1beta1_DeactivateProxyRequest, Axelar_Snapshot_V1beta1_DeactivateProxyResponse>
}

extension Axelar_Snapshot_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.snapshot.v1beta1.MsgService"
  }

  /// RegisterProxy defines a method for registering a proxy account that can act
  /// in a validator account's stead.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterProxy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerProxy(
    _ request: Axelar_Snapshot_V1beta1_RegisterProxyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Snapshot_V1beta1_RegisterProxyRequest, Axelar_Snapshot_V1beta1_RegisterProxyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.snapshot.v1beta1.MsgService/RegisterProxy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterProxyInterceptors() ?? []
    )
  }

  /// DeactivateProxy defines a method for deregistering a proxy account.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateProxy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateProxy(
    _ request: Axelar_Snapshot_V1beta1_DeactivateProxyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Snapshot_V1beta1_DeactivateProxyRequest, Axelar_Snapshot_V1beta1_DeactivateProxyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.snapshot.v1beta1.MsgService/DeactivateProxy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateProxyInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Snapshot_V1beta1_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerProxy'.
  func makeRegisterProxyInterceptors() -> [ClientInterceptor<Axelar_Snapshot_V1beta1_RegisterProxyRequest, Axelar_Snapshot_V1beta1_RegisterProxyResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateProxy'.
  func makeDeactivateProxyInterceptors() -> [ClientInterceptor<Axelar_Snapshot_V1beta1_DeactivateProxyRequest, Axelar_Snapshot_V1beta1_DeactivateProxyResponse>]
}

internal final class Axelar_Snapshot_V1beta1_MsgServiceClient: Axelar_Snapshot_V1beta1_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Snapshot_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.snapshot.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Snapshot_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the snapshot Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Snapshot_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Snapshot_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  /// RegisterProxy defines a method for registering a proxy account that can act
  /// in a validator account's stead.
  func registerProxy(request: Axelar_Snapshot_V1beta1_RegisterProxyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Snapshot_V1beta1_RegisterProxyResponse>

  /// DeactivateProxy defines a method for deregistering a proxy account.
  func deactivateProxy(request: Axelar_Snapshot_V1beta1_DeactivateProxyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Snapshot_V1beta1_DeactivateProxyResponse>
}

extension Axelar_Snapshot_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring { return "axelar.snapshot.v1beta1.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterProxy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Snapshot_V1beta1_RegisterProxyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Snapshot_V1beta1_RegisterProxyResponse>(),
        interceptors: self.interceptors?.makeRegisterProxyInterceptors() ?? [],
        userFunction: self.registerProxy(request:context:)
      )

    case "DeactivateProxy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Snapshot_V1beta1_DeactivateProxyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Snapshot_V1beta1_DeactivateProxyResponse>(),
        interceptors: self.interceptors?.makeDeactivateProxyInterceptors() ?? [],
        userFunction: self.deactivateProxy(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Snapshot_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerProxy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterProxyInterceptors() -> [ServerInterceptor<Axelar_Snapshot_V1beta1_RegisterProxyRequest, Axelar_Snapshot_V1beta1_RegisterProxyResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateProxy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateProxyInterceptors() -> [ServerInterceptor<Axelar_Snapshot_V1beta1_DeactivateProxyRequest, Axelar_Snapshot_V1beta1_DeactivateProxyResponse>]
}
