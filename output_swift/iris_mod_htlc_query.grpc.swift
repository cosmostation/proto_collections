//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: iris_mod/htlc/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Irismod_Htlc_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Irismod_Htlc_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Irismod_Htlc_QueryClientInterceptorFactoryProtocol? { get }

  func hTLC(
    _ request: Irismod_Htlc_QueryHTLCRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Htlc_QueryHTLCRequest, Irismod_Htlc_QueryHTLCResponse>

  func assetSupply(
    _ request: Irismod_Htlc_QueryAssetSupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Htlc_QueryAssetSupplyRequest, Irismod_Htlc_QueryAssetSupplyResponse>

  func assetSupplies(
    _ request: Irismod_Htlc_QueryAssetSuppliesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Htlc_QueryAssetSuppliesRequest, Irismod_Htlc_QueryAssetSuppliesResponse>

  func params(
    _ request: Irismod_Htlc_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Htlc_QueryParamsRequest, Irismod_Htlc_QueryParamsResponse>
}

extension Irismod_Htlc_QueryClientProtocol {
  internal var serviceName: String {
    return "irismod.htlc.Query"
  }

  /// HTLC queries the HTLC by the specified hash lock
  ///
  /// - Parameters:
  ///   - request: Request to send to HTLC.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func hTLC(
    _ request: Irismod_Htlc_QueryHTLCRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Htlc_QueryHTLCRequest, Irismod_Htlc_QueryHTLCResponse> {
    return self.makeUnaryCall(
      path: "/irismod.htlc.Query/HTLC",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHTLCInterceptors() ?? []
    )
  }

  /// AssetSupply queries the supply of an asset
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetSupply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetSupply(
    _ request: Irismod_Htlc_QueryAssetSupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Htlc_QueryAssetSupplyRequest, Irismod_Htlc_QueryAssetSupplyResponse> {
    return self.makeUnaryCall(
      path: "/irismod.htlc.Query/AssetSupply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetSupplyInterceptors() ?? []
    )
  }

  /// AssetSupplies queries the supplies of all assets
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetSupplies.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetSupplies(
    _ request: Irismod_Htlc_QueryAssetSuppliesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Htlc_QueryAssetSuppliesRequest, Irismod_Htlc_QueryAssetSuppliesResponse> {
    return self.makeUnaryCall(
      path: "/irismod.htlc.Query/AssetSupplies",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetSuppliesInterceptors() ?? []
    )
  }

  /// Params queries the htlc parameters
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Irismod_Htlc_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Htlc_QueryParamsRequest, Irismod_Htlc_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.htlc.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Irismod_Htlc_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'hTLC'.
  func makeHTLCInterceptors() -> [ClientInterceptor<Irismod_Htlc_QueryHTLCRequest, Irismod_Htlc_QueryHTLCResponse>]

  /// - Returns: Interceptors to use when invoking 'assetSupply'.
  func makeAssetSupplyInterceptors() -> [ClientInterceptor<Irismod_Htlc_QueryAssetSupplyRequest, Irismod_Htlc_QueryAssetSupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'assetSupplies'.
  func makeAssetSuppliesInterceptors() -> [ClientInterceptor<Irismod_Htlc_QueryAssetSuppliesRequest, Irismod_Htlc_QueryAssetSuppliesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Irismod_Htlc_QueryParamsRequest, Irismod_Htlc_QueryParamsResponse>]
}

internal final class Irismod_Htlc_QueryClient: Irismod_Htlc_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Htlc_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the irismod.htlc.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Htlc_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Htlc_QueryProvider: CallHandlerProvider {
  var interceptors: Irismod_Htlc_QueryServerInterceptorFactoryProtocol? { get }

  /// HTLC queries the HTLC by the specified hash lock
  func hTLC(request: Irismod_Htlc_QueryHTLCRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Htlc_QueryHTLCResponse>

  /// AssetSupply queries the supply of an asset
  func assetSupply(request: Irismod_Htlc_QueryAssetSupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Htlc_QueryAssetSupplyResponse>

  /// AssetSupplies queries the supplies of all assets
  func assetSupplies(request: Irismod_Htlc_QueryAssetSuppliesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Htlc_QueryAssetSuppliesResponse>

  /// Params queries the htlc parameters
  func params(request: Irismod_Htlc_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Htlc_QueryParamsResponse>
}

extension Irismod_Htlc_QueryProvider {
  internal var serviceName: Substring { return "irismod.htlc.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "HTLC":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Htlc_QueryHTLCRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Htlc_QueryHTLCResponse>(),
        interceptors: self.interceptors?.makeHTLCInterceptors() ?? [],
        userFunction: self.hTLC(request:context:)
      )

    case "AssetSupply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Htlc_QueryAssetSupplyRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Htlc_QueryAssetSupplyResponse>(),
        interceptors: self.interceptors?.makeAssetSupplyInterceptors() ?? [],
        userFunction: self.assetSupply(request:context:)
      )

    case "AssetSupplies":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Htlc_QueryAssetSuppliesRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Htlc_QueryAssetSuppliesResponse>(),
        interceptors: self.interceptors?.makeAssetSuppliesInterceptors() ?? [],
        userFunction: self.assetSupplies(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Htlc_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Htlc_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Irismod_Htlc_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'hTLC'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHTLCInterceptors() -> [ServerInterceptor<Irismod_Htlc_QueryHTLCRequest, Irismod_Htlc_QueryHTLCResponse>]

  /// - Returns: Interceptors to use when handling 'assetSupply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetSupplyInterceptors() -> [ServerInterceptor<Irismod_Htlc_QueryAssetSupplyRequest, Irismod_Htlc_QueryAssetSupplyResponse>]

  /// - Returns: Interceptors to use when handling 'assetSupplies'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetSuppliesInterceptors() -> [ServerInterceptor<Irismod_Htlc_QueryAssetSuppliesRequest, Irismod_Htlc_QueryAssetSuppliesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Irismod_Htlc_QueryParamsRequest, Irismod_Htlc_QueryParamsResponse>]
}
