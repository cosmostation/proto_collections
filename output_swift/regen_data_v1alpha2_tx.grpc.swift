//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: regen/data/v1alpha2/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg is the regen.data.v1alpha1 Msg service
///
/// Usage: instantiate `Regen_Data_V1alpha2_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Regen_Data_V1alpha2_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Regen_Data_V1alpha2_MsgClientInterceptorFactoryProtocol? { get }

  func anchorData(
    _ request: Regen_Data_V1alpha2_MsgAnchorData,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Data_V1alpha2_MsgAnchorData, Regen_Data_V1alpha2_MsgAnchorDataResponse>

  func signData(
    _ request: Regen_Data_V1alpha2_MsgSignData,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Data_V1alpha2_MsgSignData, Regen_Data_V1alpha2_MsgSignDataResponse>
}

extension Regen_Data_V1alpha2_MsgClientProtocol {
  internal var serviceName: String {
    return "regen.data.v1alpha2.Msg"
  }

  /// AnchorData "anchors" a piece of data to the blockchain based on its secure
  /// hash, effectively providing a tamper resistant timestamp.
  ///
  /// The sender in AnchorData is not attesting to the veracity of the underlying
  /// data. They can simply be a intermediary providing timestamp services.
  /// SignData should be used to create a digital signature attesting to the
  /// veracity of some piece of data.
  ///
  /// - Parameters:
  ///   - request: Request to send to AnchorData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func anchorData(
    _ request: Regen_Data_V1alpha2_MsgAnchorData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Data_V1alpha2_MsgAnchorData, Regen_Data_V1alpha2_MsgAnchorDataResponse> {
    return self.makeUnaryCall(
      path: "/regen.data.v1alpha2.Msg/AnchorData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAnchorDataInterceptors() ?? []
    )
  }

  /// SignData allows for signing of an arbitrary piece of data on the
  /// blockchain. By "signing" data the signers are making a statement about the
  /// veracity of the data itself. It is like signing a legal document, meaning
  /// that I agree to all conditions and to the best of my knowledge everything
  /// is true. When anchoring data, the sender is not attesting to the veracity
  /// of the data, they are simply communicating that it exists.
  ///
  /// On-chain signatures have the following benefits:
  /// - on-chain identities can be managed using different cryptographic keys
  ///   that change over time through key rotation practices
  /// - an on-chain identity may represent an organization and through delegation
  ///   individual members may sign on behalf of the group
  /// - the blockchain transaction envelope provides built-in replay protection
  ///   and timestamping
  ///
  /// SignData implicitly calls AnchorData if the data was not already anchored.
  ///
  /// SignData can be called multiple times for the same content hash with different
  /// signers and those signers will be appended to the list of signers.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signData(
    _ request: Regen_Data_V1alpha2_MsgSignData,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Data_V1alpha2_MsgSignData, Regen_Data_V1alpha2_MsgSignDataResponse> {
    return self.makeUnaryCall(
      path: "/regen.data.v1alpha2.Msg/SignData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignDataInterceptors() ?? []
    )
  }
}

internal protocol Regen_Data_V1alpha2_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'anchorData'.
  func makeAnchorDataInterceptors() -> [ClientInterceptor<Regen_Data_V1alpha2_MsgAnchorData, Regen_Data_V1alpha2_MsgAnchorDataResponse>]

  /// - Returns: Interceptors to use when invoking 'signData'.
  func makeSignDataInterceptors() -> [ClientInterceptor<Regen_Data_V1alpha2_MsgSignData, Regen_Data_V1alpha2_MsgSignDataResponse>]
}

internal final class Regen_Data_V1alpha2_MsgClient: Regen_Data_V1alpha2_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Data_V1alpha2_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the regen.data.v1alpha2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Data_V1alpha2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the regen.data.v1alpha1 Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Regen_Data_V1alpha2_MsgProvider: CallHandlerProvider {
  var interceptors: Regen_Data_V1alpha2_MsgServerInterceptorFactoryProtocol? { get }

  /// AnchorData "anchors" a piece of data to the blockchain based on its secure
  /// hash, effectively providing a tamper resistant timestamp.
  ///
  /// The sender in AnchorData is not attesting to the veracity of the underlying
  /// data. They can simply be a intermediary providing timestamp services.
  /// SignData should be used to create a digital signature attesting to the
  /// veracity of some piece of data.
  func anchorData(request: Regen_Data_V1alpha2_MsgAnchorData, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Data_V1alpha2_MsgAnchorDataResponse>

  /// SignData allows for signing of an arbitrary piece of data on the
  /// blockchain. By "signing" data the signers are making a statement about the
  /// veracity of the data itself. It is like signing a legal document, meaning
  /// that I agree to all conditions and to the best of my knowledge everything
  /// is true. When anchoring data, the sender is not attesting to the veracity
  /// of the data, they are simply communicating that it exists.
  ///
  /// On-chain signatures have the following benefits:
  /// - on-chain identities can be managed using different cryptographic keys
  ///   that change over time through key rotation practices
  /// - an on-chain identity may represent an organization and through delegation
  ///   individual members may sign on behalf of the group
  /// - the blockchain transaction envelope provides built-in replay protection
  ///   and timestamping
  ///
  /// SignData implicitly calls AnchorData if the data was not already anchored.
  ///
  /// SignData can be called multiple times for the same content hash with different
  /// signers and those signers will be appended to the list of signers.
  func signData(request: Regen_Data_V1alpha2_MsgSignData, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Data_V1alpha2_MsgSignDataResponse>
}

extension Regen_Data_V1alpha2_MsgProvider {
  internal var serviceName: Substring { return "regen.data.v1alpha2.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AnchorData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Data_V1alpha2_MsgAnchorData>(),
        responseSerializer: ProtobufSerializer<Regen_Data_V1alpha2_MsgAnchorDataResponse>(),
        interceptors: self.interceptors?.makeAnchorDataInterceptors() ?? [],
        userFunction: self.anchorData(request:context:)
      )

    case "SignData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Data_V1alpha2_MsgSignData>(),
        responseSerializer: ProtobufSerializer<Regen_Data_V1alpha2_MsgSignDataResponse>(),
        interceptors: self.interceptors?.makeSignDataInterceptors() ?? [],
        userFunction: self.signData(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Regen_Data_V1alpha2_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'anchorData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAnchorDataInterceptors() -> [ServerInterceptor<Regen_Data_V1alpha2_MsgAnchorData, Regen_Data_V1alpha2_MsgAnchorDataResponse>]

  /// - Returns: Interceptors to use when handling 'signData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignDataInterceptors() -> [ServerInterceptor<Regen_Data_V1alpha2_MsgSignData, Regen_Data_V1alpha2_MsgSignDataResponse>]
}
