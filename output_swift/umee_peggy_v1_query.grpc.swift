//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/peggy/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Umeenetwork_Umee_Peggy_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Umeenetwork_Umee_Peggy_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umeenetwork_Umee_Peggy_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryParamsRequest, Umeenetwork_Umee_Peggy_V1_QueryParamsResponse>

  func currentValset(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest, Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse>

  func valsetRequest(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse>

  func valsetConfirm(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse>

  func valsetConfirmsByNonce(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse>

  func lastValsetRequests(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest, Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse>

  func lastPendingValsetRequestByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse>

  func eRC20ToDenom(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest, Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse>

  func denomToERC20(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request, Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response>

  func lastEventByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse>

  func getPendingSendToEth(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth, Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse>

  func batchFees(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse>

  func outgoingTxBatches(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest, Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse>

  func lastPendingBatchRequestByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse>

  func batchRequestByNonce(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse>

  func batchConfirms(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse>

  func getDelegateKeyByValidator(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse>

  func getDelegateKeyByEth(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse>

  func getDelegateKeyByOrchestrator(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse>

  func peggyModuleState(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest, Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse>
}

extension Umeenetwork_Umee_Peggy_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "umeenetwork.umee.peggy.v1.Query"
  }

  /// Unary call to Params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryParamsRequest, Umeenetwork_Umee_Peggy_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to CurrentValset
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentValset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentValset(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest, Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/CurrentValset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? []
    )
  }

  /// Unary call to ValsetRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetRequest(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/ValsetRequest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? []
    )
  }

  /// Unary call to ValsetConfirm
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirm(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/ValsetConfirm",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  /// Unary call to ValsetConfirmsByNonce
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirmsByNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirmsByNonce(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/ValsetConfirmsByNonce",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? []
    )
  }

  /// Unary call to LastValsetRequests
  ///
  /// - Parameters:
  ///   - request: Request to send to LastValsetRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastValsetRequests(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest, Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/LastValsetRequests",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? []
    )
  }

  /// Unary call to LastPendingValsetRequestByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastPendingValsetRequestByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastPendingValsetRequestByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/LastPendingValsetRequestByAddr",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? []
    )
  }

  /// Unary call to ERC20ToDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20ToDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20ToDenom(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest, Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/ERC20ToDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? []
    )
  }

  /// Unary call to DenomToERC20
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomToERC20.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomToERC20(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request, Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/DenomToERC20",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? []
    )
  }

  /// Unary call to LastEventByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastEventByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastEventByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/LastEventByAddr",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastEventByAddrInterceptors() ?? []
    )
  }

  /// Unary call to GetPendingSendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPendingSendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPendingSendToEth(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth, Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/GetPendingSendToEth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to BatchFees
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchFees(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/BatchFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? []
    )
  }

  /// Unary call to OutgoingTxBatches
  ///
  /// - Parameters:
  ///   - request: Request to send to OutgoingTxBatches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func outgoingTxBatches(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest, Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/OutgoingTxBatches",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? []
    )
  }

  /// Unary call to LastPendingBatchRequestByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastPendingBatchRequestByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastPendingBatchRequestByAddr(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/LastPendingBatchRequestByAddr",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? []
    )
  }

  /// Unary call to BatchRequestByNonce
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchRequestByNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchRequestByNonce(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/BatchRequestByNonce",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? []
    )
  }

  /// Unary call to BatchConfirms
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchConfirms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchConfirms(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/BatchConfirms",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByValidator
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByValidator(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/GetDelegateKeyByValidator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByEth
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByEth(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/GetDelegateKeyByEth",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByOrchestrator
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByOrchestrator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByOrchestrator(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/GetDelegateKeyByOrchestrator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? []
    )
  }

  /// Retrieves the entire peggy module's state
  ///
  /// - Parameters:
  ///   - request: Request to send to PeggyModuleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func peggyModuleState(
    _ request: Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest, Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.peggy.v1.Query/PeggyModuleState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePeggyModuleStateInterceptors() ?? []
    )
  }
}

internal protocol Umeenetwork_Umee_Peggy_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryParamsRequest, Umeenetwork_Umee_Peggy_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'currentValset'.
  func makeCurrentValsetInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest, Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetRequest'.
  func makeValsetRequestInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetConfirm'.
  func makeValsetConfirmInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetConfirmsByNonce'.
  func makeValsetConfirmsByNonceInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'lastValsetRequests'.
  func makeLastValsetRequestsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest, Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'lastPendingValsetRequestByAddr'.
  func makeLastPendingValsetRequestByAddrInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20ToDenom'.
  func makeERC20ToDenomInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest, Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'denomToERC20'.
  func makeDenomToERC20Interceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request, Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response>]

  /// - Returns: Interceptors to use when invoking 'lastEventByAddr'.
  func makeLastEventByAddrInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'getPendingSendToEth'.
  func makeGetPendingSendToEthInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth, Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'batchFees'.
  func makeBatchFeesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'outgoingTxBatches'.
  func makeOutgoingTxBatchesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest, Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse>]

  /// - Returns: Interceptors to use when invoking 'lastPendingBatchRequestByAddr'.
  func makeLastPendingBatchRequestByAddrInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'batchRequestByNonce'.
  func makeBatchRequestByNonceInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'batchConfirms'.
  func makeBatchConfirmsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByValidator'.
  func makeGetDelegateKeyByValidatorInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByEth'.
  func makeGetDelegateKeyByEthInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByOrchestrator'.
  func makeGetDelegateKeyByOrchestratorInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'peggyModuleState'.
  func makePeggyModuleStateInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest, Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse>]
}

internal final class Umeenetwork_Umee_Peggy_V1_QueryClient: Umeenetwork_Umee_Peggy_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umeenetwork_Umee_Peggy_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the umeenetwork.umee.peggy.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umeenetwork_Umee_Peggy_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umeenetwork_Umee_Peggy_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Umeenetwork_Umee_Peggy_V1_QueryServerInterceptorFactoryProtocol? { get }

  func params(request: Umeenetwork_Umee_Peggy_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryParamsResponse>

  func currentValset(request: Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse>

  func valsetRequest(request: Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse>

  func valsetConfirm(request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse>

  func valsetConfirmsByNonce(request: Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse>

  func lastValsetRequests(request: Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse>

  func lastPendingValsetRequestByAddr(request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse>

  func eRC20ToDenom(request: Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse>

  func denomToERC20(request: Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response>

  func lastEventByAddr(request: Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse>

  func getPendingSendToEth(request: Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse>

  func batchFees(request: Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse>

  func outgoingTxBatches(request: Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse>

  func lastPendingBatchRequestByAddr(request: Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse>

  func batchRequestByNonce(request: Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse>

  func batchConfirms(request: Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse>

  func getDelegateKeyByValidator(request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse>

  func getDelegateKeyByEth(request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse>

  func getDelegateKeyByOrchestrator(request: Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse>

  /// Retrieves the entire peggy module's state
  func peggyModuleState(request: Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse>
}

extension Umeenetwork_Umee_Peggy_V1_QueryProvider {
  internal var serviceName: Substring { return "umeenetwork.umee.peggy.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "CurrentValset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse>(),
        interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? [],
        userFunction: self.currentValset(request:context:)
      )

    case "ValsetRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse>(),
        interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? [],
        userFunction: self.valsetRequest(request:context:)
      )

    case "ValsetConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        userFunction: self.valsetConfirm(request:context:)
      )

    case "ValsetConfirmsByNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? [],
        userFunction: self.valsetConfirmsByNonce(request:context:)
      )

    case "LastValsetRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse>(),
        interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? [],
        userFunction: self.lastValsetRequests(request:context:)
      )

    case "LastPendingValsetRequestByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? [],
        userFunction: self.lastPendingValsetRequestByAddr(request:context:)
      )

    case "ERC20ToDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse>(),
        interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? [],
        userFunction: self.eRC20ToDenom(request:context:)
      )

    case "DenomToERC20":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response>(),
        interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? [],
        userFunction: self.denomToERC20(request:context:)
      )

    case "LastEventByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse>(),
        interceptors: self.interceptors?.makeLastEventByAddrInterceptors() ?? [],
        userFunction: self.lastEventByAddr(request:context:)
      )

    case "GetPendingSendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse>(),
        interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? [],
        userFunction: self.getPendingSendToEth(request:context:)
      )

    case "BatchFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse>(),
        interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? [],
        userFunction: self.batchFees(request:context:)
      )

    case "OutgoingTxBatches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse>(),
        interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? [],
        userFunction: self.outgoingTxBatches(request:context:)
      )

    case "LastPendingBatchRequestByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? [],
        userFunction: self.lastPendingBatchRequestByAddr(request:context:)
      )

    case "BatchRequestByNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse>(),
        interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? [],
        userFunction: self.batchRequestByNonce(request:context:)
      )

    case "BatchConfirms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse>(),
        interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? [],
        userFunction: self.batchConfirms(request:context:)
      )

    case "GetDelegateKeyByValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? [],
        userFunction: self.getDelegateKeyByValidator(request:context:)
      )

    case "GetDelegateKeyByEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? [],
        userFunction: self.getDelegateKeyByEth(request:context:)
      )

    case "GetDelegateKeyByOrchestrator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? [],
        userFunction: self.getDelegateKeyByOrchestrator(request:context:)
      )

    case "PeggyModuleState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makePeggyModuleStateInterceptors() ?? [],
        userFunction: self.peggyModuleState(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umeenetwork_Umee_Peggy_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryParamsRequest, Umeenetwork_Umee_Peggy_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'currentValset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentValsetInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetRequest, Umeenetwork_Umee_Peggy_V1_QueryCurrentValsetResponse>]

  /// - Returns: Interceptors to use when handling 'valsetRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetRequestInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetRequestRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetRequestResponse>]

  /// - Returns: Interceptors to use when handling 'valsetConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'valsetConfirmsByNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmsByNonceInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryValsetConfirmsByNonceResponse>]

  /// - Returns: Interceptors to use when handling 'lastValsetRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastValsetRequestsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsRequest, Umeenetwork_Umee_Peggy_V1_QueryLastValsetRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'lastPendingValsetRequestByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastPendingValsetRequestByAddrInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingValsetRequestByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20ToDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20ToDenomInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomRequest, Umeenetwork_Umee_Peggy_V1_QueryERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when handling 'denomToERC20'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomToERC20Interceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Request, Umeenetwork_Umee_Peggy_V1_QueryDenomToERC20Response>]

  /// - Returns: Interceptors to use when handling 'lastEventByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastEventByAddrInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastEventByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'getPendingSendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPendingSendToEthInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEth, Umeenetwork_Umee_Peggy_V1_QueryPendingSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'batchFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchFeesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchFeeRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchFeeResponse>]

  /// - Returns: Interceptors to use when handling 'outgoingTxBatches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOutgoingTxBatchesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesRequest, Umeenetwork_Umee_Peggy_V1_QueryOutgoingTxBatchesResponse>]

  /// - Returns: Interceptors to use when handling 'lastPendingBatchRequestByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastPendingBatchRequestByAddrInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrRequest, Umeenetwork_Umee_Peggy_V1_QueryLastPendingBatchRequestByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'batchRequestByNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchRequestByNonceInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchRequestByNonceResponse>]

  /// - Returns: Interceptors to use when handling 'batchConfirms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchConfirmsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsRequest, Umeenetwork_Umee_Peggy_V1_QueryBatchConfirmsResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByValidatorInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByValidatorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByEthInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByEthAddressResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByOrchestrator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByOrchestratorInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddress, Umeenetwork_Umee_Peggy_V1_QueryDelegateKeysByOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'peggyModuleState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePeggyModuleStateInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Peggy_V1_QueryModuleStateRequest, Umeenetwork_Umee_Peggy_V1_QueryModuleStateResponse>]
}
