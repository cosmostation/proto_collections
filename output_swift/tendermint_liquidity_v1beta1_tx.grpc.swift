//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tendermint/liquidity/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the liquidity Msg service.
///
/// Usage: instantiate `Tendermint_Liquidity_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Tendermint_Liquidity_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tendermint_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createPool(
    _ request: Tendermint_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgCreatePool, Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse>

  func depositWithinBatch(
    _ request: Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch, Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse>

  func withdrawWithinBatch(
    _ request: Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch, Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse>

  func swap(
    _ request: Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch, Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse>
}

extension Tendermint_Liquidity_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "tendermint.liquidity.v1beta1.Msg"
  }

  /// Submit a create liquidity pool message.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Tendermint_Liquidity_V1beta1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgCreatePool, Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Msg/CreatePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// Submit a deposit to the liquidity pool batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositWithinBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositWithinBatch(
    _ request: Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch, Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Msg/DepositWithinBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositWithinBatchInterceptors() ?? []
    )
  }

  /// Submit a withdraw from the liquidity pool batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawWithinBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawWithinBatch(
    _ request: Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch, Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Msg/WithdrawWithinBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawWithinBatchInterceptors() ?? []
    )
  }

  /// Submit a swap to the liquidity pool batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to Swap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func swap(
    _ request: Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch, Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Msg/Swap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapInterceptors() ?? []
    )
  }
}

internal protocol Tendermint_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_MsgCreatePool, Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'depositWithinBatch'.
  func makeDepositWithinBatchInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch, Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawWithinBatch'.
  func makeWithdrawWithinBatchInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch, Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'swap'.
  func makeSwapInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch, Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse>]
}

internal final class Tendermint_Liquidity_V1beta1_MsgClient: Tendermint_Liquidity_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Tendermint_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the tendermint.liquidity.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Liquidity_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the liquidity Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Tendermint_Liquidity_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Tendermint_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// Submit a create liquidity pool message.
  func createPool(request: Tendermint_Liquidity_V1beta1_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse>

  /// Submit a deposit to the liquidity pool batch.
  func depositWithinBatch(request: Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse>

  /// Submit a withdraw from the liquidity pool batch.
  func withdrawWithinBatch(request: Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse>

  /// Submit a swap to the liquidity pool batch.
  func swap(request: Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse>
}

extension Tendermint_Liquidity_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "tendermint.liquidity.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "DepositWithinBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse>(),
        interceptors: self.interceptors?.makeDepositWithinBatchInterceptors() ?? [],
        userFunction: self.depositWithinBatch(request:context:)
      )

    case "WithdrawWithinBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse>(),
        interceptors: self.interceptors?.makeWithdrawWithinBatchInterceptors() ?? [],
        userFunction: self.withdrawWithinBatch(request:context:)
      )

    case "Swap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse>(),
        interceptors: self.interceptors?.makeSwapInterceptors() ?? [],
        userFunction: self.swap(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Tendermint_Liquidity_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_MsgCreatePool, Tendermint_Liquidity_V1beta1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'depositWithinBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositWithinBatchInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_MsgDepositWithinBatch, Tendermint_Liquidity_V1beta1_MsgDepositWithinBatchResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawWithinBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawWithinBatchInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatch, Tendermint_Liquidity_V1beta1_MsgWithdrawWithinBatchResponse>]

  /// - Returns: Interceptors to use when handling 'swap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_MsgSwapWithinBatch, Tendermint_Liquidity_V1beta1_MsgSwapWithinBatchResponse>]
}
