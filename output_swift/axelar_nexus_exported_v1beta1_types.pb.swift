// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/nexus/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Nexus_Exported_V1beta1_TransferState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case archived // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .archived
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .archived: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Nexus_Exported_V1beta1_TransferState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Nexus_Exported_V1beta1_TransferState] = [
    .unspecified,
    .pending,
    .archived,
  ]
}

#endif  // swift(>=4.2)

/// Chain represents the properties of a registered blockchain
struct Axelar_Nexus_Exported_V1beta1_Chain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var nativeAsset: String = String()

  var supportsForeignAssets: Bool = false

  var keyType: Axelar_Tss_Exported_V1beta1_KeyType = .unspecified

  var module: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CrossChainAddress represents a generalized address on any registered chain
struct Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: Axelar_Nexus_Exported_V1beta1_Chain {
    get {return _chain ?? Axelar_Nexus_Exported_V1beta1_Chain()}
    set {_chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  var hasChain: Bool {return self._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  mutating func clearChain() {self._chain = nil}

  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chain: Axelar_Nexus_Exported_V1beta1_Chain? = nil
}

/// CrossChainTransfer represents a generalized transfer of some asset to a
/// registered blockchain
struct Axelar_Nexus_Exported_V1beta1_CrossChainTransfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recipient: Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
    get {return _recipient ?? Axelar_Nexus_Exported_V1beta1_CrossChainAddress()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  var asset: Cosmos_Base_V1beta1_Coin {
    get {return _asset ?? Cosmos_Base_V1beta1_Coin()}
    set {_asset = newValue}
  }
  /// Returns true if `asset` has been explicitly set.
  var hasAsset: Bool {return self._asset != nil}
  /// Clears the value of `asset`. Subsequent reads from it will return its default value.
  mutating func clearAsset() {self._asset = nil}

  var id: UInt64 = 0

  var state: Axelar_Nexus_Exported_V1beta1_TransferState = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: Axelar_Nexus_Exported_V1beta1_CrossChainAddress? = nil
  fileprivate var _asset: Cosmos_Base_V1beta1_Coin? = nil
}

/// TransferFee represents accumulated fees generated by the network
struct Axelar_Nexus_Exported_V1beta1_TransferFee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.nexus.exported.v1beta1"

extension Axelar_Nexus_Exported_V1beta1_TransferState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRANSFER_STATE_UNSPECIFIED"),
    1: .same(proto: "TRANSFER_STATE_PENDING"),
    2: .same(proto: "TRANSFER_STATE_ARCHIVED"),
  ]
}

extension Axelar_Nexus_Exported_V1beta1_Chain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Chain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "native_asset"),
    3: .standard(proto: "supports_foreign_assets"),
    4: .standard(proto: "key_type"),
    5: .same(proto: "module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nativeAsset) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.supportsForeignAssets) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.keyType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.module) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.nativeAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.nativeAsset, fieldNumber: 2)
    }
    if self.supportsForeignAssets != false {
      try visitor.visitSingularBoolField(value: self.supportsForeignAssets, fieldNumber: 3)
    }
    if self.keyType != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 4)
    }
    if !self.module.isEmpty {
      try visitor.visitSingularStringField(value: self.module, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_Exported_V1beta1_Chain, rhs: Axelar_Nexus_Exported_V1beta1_Chain) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.nativeAsset != rhs.nativeAsset {return false}
    if lhs.supportsForeignAssets != rhs.supportsForeignAssets {return false}
    if lhs.keyType != rhs.keyType {return false}
    if lhs.module != rhs.module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_Exported_V1beta1_CrossChainAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CrossChainAddress"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_Exported_V1beta1_CrossChainAddress, rhs: Axelar_Nexus_Exported_V1beta1_CrossChainAddress) -> Bool {
    if lhs._chain != rhs._chain {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_Exported_V1beta1_CrossChainTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CrossChainTransfer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recipient"),
    2: .same(proto: "asset"),
    3: .same(proto: "id"),
    4: .same(proto: "state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._recipient) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._asset) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.state) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._asset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 3)
    }
    if self.state != .unspecified {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_Exported_V1beta1_CrossChainTransfer, rhs: Axelar_Nexus_Exported_V1beta1_CrossChainTransfer) -> Bool {
    if lhs._recipient != rhs._recipient {return false}
    if lhs._asset != rhs._asset {return false}
    if lhs.id != rhs.id {return false}
    if lhs.state != rhs.state {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_Exported_V1beta1_TransferFee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferFee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_Exported_V1beta1_TransferFee, rhs: Axelar_Nexus_Exported_V1beta1_TransferFee) -> Bool {
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
