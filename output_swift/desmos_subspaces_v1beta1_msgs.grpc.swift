//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/subspaces/v1beta1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines subspaces Msg service.
///
/// Usage: instantiate `Desmos_Subspaces_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Subspaces_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Subspaces_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createSubspace(
    _ request: Desmos_Subspaces_V1beta1_MsgCreateSubspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgCreateSubspace, Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse>

  func editSubspace(
    _ request: Desmos_Subspaces_V1beta1_MsgEditSubspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgEditSubspace, Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse>

  func addAdmin(
    _ request: Desmos_Subspaces_V1beta1_MsgAddAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgAddAdmin, Desmos_Subspaces_V1beta1_MsgAddAdminResponse>

  func removeAdmin(
    _ request: Desmos_Subspaces_V1beta1_MsgRemoveAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgRemoveAdmin, Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse>

  func registerUser(
    _ request: Desmos_Subspaces_V1beta1_MsgRegisterUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgRegisterUser, Desmos_Subspaces_V1beta1_MsgRegisterUserResponse>

  func unregisterUser(
    _ request: Desmos_Subspaces_V1beta1_MsgUnregisterUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgUnregisterUser, Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse>

  func banUser(
    _ request: Desmos_Subspaces_V1beta1_MsgBanUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgBanUser, Desmos_Subspaces_V1beta1_MsgBanUserResponse>

  func unbanUser(
    _ request: Desmos_Subspaces_V1beta1_MsgUnbanUser,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgUnbanUser, Desmos_Subspaces_V1beta1_MsgUnbanUserResponse>
}

extension Desmos_Subspaces_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.subspaces.v1beta1.Msg"
  }

  /// CreateSubspace defines the method to create a subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSubspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSubspace(
    _ request: Desmos_Subspaces_V1beta1_MsgCreateSubspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgCreateSubspace, Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/CreateSubspace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? []
    )
  }

  /// EditSubspace defines the method to edit a subspace fields
  ///
  /// - Parameters:
  ///   - request: Request to send to EditSubspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editSubspace(
    _ request: Desmos_Subspaces_V1beta1_MsgEditSubspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgEditSubspace, Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/EditSubspace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? []
    )
  }

  /// AddAdmin defines the method to add a new admin to the subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to AddAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addAdmin(
    _ request: Desmos_Subspaces_V1beta1_MsgAddAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgAddAdmin, Desmos_Subspaces_V1beta1_MsgAddAdminResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/AddAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddAdminInterceptors() ?? []
    )
  }

  /// RemoveAdmin defines the method to remove an admin from a specific subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeAdmin(
    _ request: Desmos_Subspaces_V1beta1_MsgRemoveAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgRemoveAdmin, Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/RemoveAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveAdminInterceptors() ?? []
    )
  }

  /// RegisterUser defines the method to let user posts inside a specific
  /// subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerUser(
    _ request: Desmos_Subspaces_V1beta1_MsgRegisterUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgRegisterUser, Desmos_Subspaces_V1beta1_MsgRegisterUserResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/RegisterUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterUserInterceptors() ?? []
    )
  }

  /// UnregisterUser defines the method to unregister a user from a subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to UnregisterUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unregisterUser(
    _ request: Desmos_Subspaces_V1beta1_MsgUnregisterUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgUnregisterUser, Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/UnregisterUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnregisterUserInterceptors() ?? []
    )
  }

  /// BanUser defines the method to ban a user inside a specific subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to BanUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func banUser(
    _ request: Desmos_Subspaces_V1beta1_MsgBanUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgBanUser, Desmos_Subspaces_V1beta1_MsgBanUserResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/BanUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBanUserInterceptors() ?? []
    )
  }

  /// UnbanUser defines the method to unban a user inside a specific subspace
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbanUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbanUser(
    _ request: Desmos_Subspaces_V1beta1_MsgUnbanUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_MsgUnbanUser, Desmos_Subspaces_V1beta1_MsgUnbanUserResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Msg/UnbanUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbanUserInterceptors() ?? []
    )
  }
}

internal protocol Desmos_Subspaces_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createSubspace'.
  func makeCreateSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgCreateSubspace, Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'editSubspace'.
  func makeEditSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgEditSubspace, Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'addAdmin'.
  func makeAddAdminInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgAddAdmin, Desmos_Subspaces_V1beta1_MsgAddAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'removeAdmin'.
  func makeRemoveAdminInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgRemoveAdmin, Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'registerUser'.
  func makeRegisterUserInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgRegisterUser, Desmos_Subspaces_V1beta1_MsgRegisterUserResponse>]

  /// - Returns: Interceptors to use when invoking 'unregisterUser'.
  func makeUnregisterUserInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgUnregisterUser, Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse>]

  /// - Returns: Interceptors to use when invoking 'banUser'.
  func makeBanUserInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgBanUser, Desmos_Subspaces_V1beta1_MsgBanUserResponse>]

  /// - Returns: Interceptors to use when invoking 'unbanUser'.
  func makeUnbanUserInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_MsgUnbanUser, Desmos_Subspaces_V1beta1_MsgUnbanUserResponse>]
}

internal final class Desmos_Subspaces_V1beta1_MsgClient: Desmos_Subspaces_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.subspaces.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines subspaces Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Subspaces_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Subspaces_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateSubspace defines the method to create a subspace
  func createSubspace(request: Desmos_Subspaces_V1beta1_MsgCreateSubspace, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse>

  /// EditSubspace defines the method to edit a subspace fields
  func editSubspace(request: Desmos_Subspaces_V1beta1_MsgEditSubspace, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse>

  /// AddAdmin defines the method to add a new admin to the subspace
  func addAdmin(request: Desmos_Subspaces_V1beta1_MsgAddAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgAddAdminResponse>

  /// RemoveAdmin defines the method to remove an admin from a specific subspace
  func removeAdmin(request: Desmos_Subspaces_V1beta1_MsgRemoveAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse>

  /// RegisterUser defines the method to let user posts inside a specific
  /// subspace
  func registerUser(request: Desmos_Subspaces_V1beta1_MsgRegisterUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgRegisterUserResponse>

  /// UnregisterUser defines the method to unregister a user from a subspace
  func unregisterUser(request: Desmos_Subspaces_V1beta1_MsgUnregisterUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse>

  /// BanUser defines the method to ban a user inside a specific subspace
  func banUser(request: Desmos_Subspaces_V1beta1_MsgBanUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgBanUserResponse>

  /// UnbanUser defines the method to unban a user inside a specific subspace
  func unbanUser(request: Desmos_Subspaces_V1beta1_MsgUnbanUser, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_MsgUnbanUserResponse>
}

extension Desmos_Subspaces_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "desmos.subspaces.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateSubspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgCreateSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse>(),
        interceptors: self.interceptors?.makeCreateSubspaceInterceptors() ?? [],
        userFunction: self.createSubspace(request:context:)
      )

    case "EditSubspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgEditSubspace>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse>(),
        interceptors: self.interceptors?.makeEditSubspaceInterceptors() ?? [],
        userFunction: self.editSubspace(request:context:)
      )

    case "AddAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgAddAdmin>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgAddAdminResponse>(),
        interceptors: self.interceptors?.makeAddAdminInterceptors() ?? [],
        userFunction: self.addAdmin(request:context:)
      )

    case "RemoveAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgRemoveAdmin>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse>(),
        interceptors: self.interceptors?.makeRemoveAdminInterceptors() ?? [],
        userFunction: self.removeAdmin(request:context:)
      )

    case "RegisterUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgRegisterUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgRegisterUserResponse>(),
        interceptors: self.interceptors?.makeRegisterUserInterceptors() ?? [],
        userFunction: self.registerUser(request:context:)
      )

    case "UnregisterUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgUnregisterUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse>(),
        interceptors: self.interceptors?.makeUnregisterUserInterceptors() ?? [],
        userFunction: self.unregisterUser(request:context:)
      )

    case "BanUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgBanUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgBanUserResponse>(),
        interceptors: self.interceptors?.makeBanUserInterceptors() ?? [],
        userFunction: self.banUser(request:context:)
      )

    case "UnbanUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_MsgUnbanUser>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_MsgUnbanUserResponse>(),
        interceptors: self.interceptors?.makeUnbanUserInterceptors() ?? [],
        userFunction: self.unbanUser(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Subspaces_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createSubspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgCreateSubspace, Desmos_Subspaces_V1beta1_MsgCreateSubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'editSubspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgEditSubspace, Desmos_Subspaces_V1beta1_MsgEditSubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'addAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddAdminInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgAddAdmin, Desmos_Subspaces_V1beta1_MsgAddAdminResponse>]

  /// - Returns: Interceptors to use when handling 'removeAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveAdminInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgRemoveAdmin, Desmos_Subspaces_V1beta1_MsgRemoveAdminResponse>]

  /// - Returns: Interceptors to use when handling 'registerUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterUserInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgRegisterUser, Desmos_Subspaces_V1beta1_MsgRegisterUserResponse>]

  /// - Returns: Interceptors to use when handling 'unregisterUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnregisterUserInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgUnregisterUser, Desmos_Subspaces_V1beta1_MsgUnregisterUserResponse>]

  /// - Returns: Interceptors to use when handling 'banUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBanUserInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgBanUser, Desmos_Subspaces_V1beta1_MsgBanUserResponse>]

  /// - Returns: Interceptors to use when handling 'unbanUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnbanUserInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_MsgUnbanUser, Desmos_Subspaces_V1beta1_MsgUnbanUserResponse>]
}
