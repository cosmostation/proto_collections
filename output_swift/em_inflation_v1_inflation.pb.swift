// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: em/inflation/v1/inflation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Em_Inflation_V1_InflationAsset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var inflation: String = String()

  var accum: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Inflation_V1_InflationState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastApplied: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastApplied ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastApplied = newValue}
  }
  /// Returns true if `lastApplied` has been explicitly set.
  var hasLastApplied: Bool {return self._lastApplied != nil}
  /// Clears the value of `lastApplied`. Subsequent reads from it will return its default value.
  mutating func clearLastApplied() {self._lastApplied = nil}

  var lastAppliedHeight: String = String()

  var assets: [Em_Inflation_V1_InflationAsset] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastApplied: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "em.inflation.v1"

extension Em_Inflation_V1_InflationAsset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InflationAsset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "inflation"),
    3: .same(proto: "accum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.inflation) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.accum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.inflation.isEmpty {
      try visitor.visitSingularStringField(value: self.inflation, fieldNumber: 2)
    }
    if !self.accum.isEmpty {
      try visitor.visitSingularStringField(value: self.accum, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Inflation_V1_InflationAsset, rhs: Em_Inflation_V1_InflationAsset) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.inflation != rhs.inflation {return false}
    if lhs.accum != rhs.accum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Inflation_V1_InflationState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InflationState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_applied"),
    2: .standard(proto: "last_applied_height"),
    3: .same(proto: "assets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._lastApplied) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.lastAppliedHeight) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.assets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastApplied {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.lastAppliedHeight.isEmpty {
      try visitor.visitSingularStringField(value: self.lastAppliedHeight, fieldNumber: 2)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assets, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Inflation_V1_InflationState, rhs: Em_Inflation_V1_InflationState) -> Bool {
    if lhs._lastApplied != rhs._lastApplied {return false}
    if lhs.lastAppliedHeight != rhs.lastAppliedHeight {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
