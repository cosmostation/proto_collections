// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/subspaces/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState contains the data of the genesis state for the subspaces module
struct Desmos_Subspaces_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subspaces: [Desmos_Subspaces_V1beta1_Subspace] = []

  var admins: [Desmos_Subspaces_V1beta1_UsersEntry] = []

  var registeredUsers: [Desmos_Subspaces_V1beta1_UsersEntry] = []

  var bannedUsers: [Desmos_Subspaces_V1beta1_UsersEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UsersEntry contains the data of a slice of users associated to a subspace
/// with a specific id
struct Desmos_Subspaces_V1beta1_UsersEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subspaceID: String = String()

  var users: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.subspaces.v1beta1"

extension Desmos_Subspaces_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subspaces"),
    2: .same(proto: "admins"),
    3: .standard(proto: "registered_users"),
    4: .standard(proto: "banned_users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.subspaces) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.admins) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.registeredUsers) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.bannedUsers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subspaces.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.subspaces, fieldNumber: 1)
    }
    if !self.admins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.admins, fieldNumber: 2)
    }
    if !self.registeredUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registeredUsers, fieldNumber: 3)
    }
    if !self.bannedUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bannedUsers, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V1beta1_GenesisState, rhs: Desmos_Subspaces_V1beta1_GenesisState) -> Bool {
    if lhs.subspaces != rhs.subspaces {return false}
    if lhs.admins != rhs.admins {return false}
    if lhs.registeredUsers != rhs.registeredUsers {return false}
    if lhs.bannedUsers != rhs.bannedUsers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Subspaces_V1beta1_UsersEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UsersEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subspace_id"),
    2: .same(proto: "users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subspaceID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.users) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subspaceID.isEmpty {
      try visitor.visitSingularStringField(value: self.subspaceID, fieldNumber: 1)
    }
    if !self.users.isEmpty {
      try visitor.visitRepeatedStringField(value: self.users, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Subspaces_V1beta1_UsersEntry, rhs: Desmos_Subspaces_V1beta1_UsersEntry) -> Bool {
    if lhs.subspaceID != rhs.subspaceID {return false}
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
