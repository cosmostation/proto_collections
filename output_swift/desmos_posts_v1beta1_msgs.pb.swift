// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: desmos/posts/v1beta1/msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreatePost represents the message to be used to create a post.
struct Desmos_Posts_V1beta1_MsgCreatePost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var parentID: String = String()

  var message: String = String()

  var commentsState: Desmos_Posts_V1beta1_CommentsState = .unspecified

  var subspace: String = String()

  var additionalAttributes: [Desmos_Posts_V1beta1_Attribute] = []

  var creator: String = String()

  var attachments: [Desmos_Posts_V1beta1_Attachment] = []

  var poll: Desmos_Posts_V1beta1_Poll {
    get {return _poll ?? Desmos_Posts_V1beta1_Poll()}
    set {_poll = newValue}
  }
  /// Returns true if `poll` has been explicitly set.
  var hasPoll: Bool {return self._poll != nil}
  /// Clears the value of `poll`. Subsequent reads from it will return its default value.
  mutating func clearPoll() {self._poll = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poll: Desmos_Posts_V1beta1_Poll? = nil
}

/// MsgCreatePostResponse defines the Msg/CreatePost response type.
struct Desmos_Posts_V1beta1_MsgCreatePostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditPost represents the message used to edit a post.
struct Desmos_Posts_V1beta1_MsgEditPost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: String = String()

  var message: String = String()

  var commentsState: Desmos_Posts_V1beta1_CommentsState = .unspecified

  var attachments: [Desmos_Posts_V1beta1_Attachment] = []

  var poll: Desmos_Posts_V1beta1_Poll {
    get {return _poll ?? Desmos_Posts_V1beta1_Poll()}
    set {_poll = newValue}
  }
  /// Returns true if `poll` has been explicitly set.
  var hasPoll: Bool {return self._poll != nil}
  /// Clears the value of `poll`. Subsequent reads from it will return its default value.
  mutating func clearPoll() {self._poll = nil}

  var editor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _poll: Desmos_Posts_V1beta1_Poll? = nil
}

/// MsgEditPostResponse defines the Msg/EditPost response type.
struct Desmos_Posts_V1beta1_MsgEditPostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddPostReaction represents the message to be used to add a reaction to a
/// post
struct Desmos_Posts_V1beta1_MsgAddPostReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: String = String()

  var reaction: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAddPostReactionResponse defines the Msg/AddReaction response type.
struct Desmos_Posts_V1beta1_MsgAddPostReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemovePostReaction represents the message to be used when wanting to
/// remove an existing reaction from a specific user having a specific value
struct Desmos_Posts_V1beta1_MsgRemovePostReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: String = String()

  var reaction: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRemovePostReactionResponse defines the Msg/RemovePostReaction response
/// type.
struct Desmos_Posts_V1beta1_MsgRemovePostReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAnswerPoll represents the message to be used when wanting to answer a poll
struct Desmos_Posts_V1beta1_MsgAnswerPoll {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: String = String()

  var answers: [String] = []

  var answerer: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgAnswerPollResponse defines the Msg/AnswerPoll response type.
struct Desmos_Posts_V1beta1_MsgAnswerPollResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRegisterReaction represents the message that must be used when wanting
/// to register a new reaction shortCode and the associated value
struct Desmos_Posts_V1beta1_MsgRegisterReaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shortCode: String = String()

  var value: String = String()

  var subspace: String = String()

  var creator: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRegisterReactionResponse defines the Msg/RegisterReaction response type.
struct Desmos_Posts_V1beta1_MsgRegisterReactionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgReportPost represents a message to create a port report.
struct Desmos_Posts_V1beta1_MsgReportPost {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var postID: String = String()

  var reportType: String = String()

  var message: String = String()

  var user: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgReportPostResponse defines the Msg/ReportPost response type.
struct Desmos_Posts_V1beta1_MsgReportPostResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "desmos.posts.v1beta1"

extension Desmos_Posts_V1beta1_MsgCreatePost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "parent_id"),
    2: .same(proto: "message"),
    3: .standard(proto: "comments_state"),
    4: .same(proto: "subspace"),
    5: .standard(proto: "additional_attributes"),
    6: .same(proto: "creator"),
    7: .same(proto: "attachments"),
    8: .same(proto: "poll"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parentID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.commentsState) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subspace) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.additionalAttributes) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.attachments) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._poll) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parentID.isEmpty {
      try visitor.visitSingularStringField(value: self.parentID, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.commentsState != .unspecified {
      try visitor.visitSingularEnumField(value: self.commentsState, fieldNumber: 3)
    }
    if !self.subspace.isEmpty {
      try visitor.visitSingularStringField(value: self.subspace, fieldNumber: 4)
    }
    if !self.additionalAttributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalAttributes, fieldNumber: 5)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 6)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 7)
    }
    if let v = self._poll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgCreatePost, rhs: Desmos_Posts_V1beta1_MsgCreatePost) -> Bool {
    if lhs.parentID != rhs.parentID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.commentsState != rhs.commentsState {return false}
    if lhs.subspace != rhs.subspace {return false}
    if lhs.additionalAttributes != rhs.additionalAttributes {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs._poll != rhs._poll {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgCreatePostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreatePostResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgCreatePostResponse, rhs: Desmos_Posts_V1beta1_MsgCreatePostResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgEditPost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditPost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .same(proto: "message"),
    3: .standard(proto: "comments_state"),
    4: .same(proto: "attachments"),
    5: .same(proto: "poll"),
    6: .same(proto: "editor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.commentsState) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.attachments) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._poll) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.editor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.commentsState != .unspecified {
      try visitor.visitSingularEnumField(value: self.commentsState, fieldNumber: 3)
    }
    if !self.attachments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachments, fieldNumber: 4)
    }
    if let v = self._poll {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.editor.isEmpty {
      try visitor.visitSingularStringField(value: self.editor, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgEditPost, rhs: Desmos_Posts_V1beta1_MsgEditPost) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.message != rhs.message {return false}
    if lhs.commentsState != rhs.commentsState {return false}
    if lhs.attachments != rhs.attachments {return false}
    if lhs._poll != rhs._poll {return false}
    if lhs.editor != rhs.editor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgEditPostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditPostResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgEditPostResponse, rhs: Desmos_Posts_V1beta1_MsgEditPostResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgAddPostReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddPostReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .same(proto: "reaction"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reaction) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.reaction.isEmpty {
      try visitor.visitSingularStringField(value: self.reaction, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgAddPostReaction, rhs: Desmos_Posts_V1beta1_MsgAddPostReaction) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.reaction != rhs.reaction {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgAddPostReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddPostReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgAddPostReactionResponse, rhs: Desmos_Posts_V1beta1_MsgAddPostReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgRemovePostReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemovePostReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .same(proto: "reaction"),
    3: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reaction) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.reaction.isEmpty {
      try visitor.visitSingularStringField(value: self.reaction, fieldNumber: 2)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgRemovePostReaction, rhs: Desmos_Posts_V1beta1_MsgRemovePostReaction) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.reaction != rhs.reaction {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgRemovePostReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemovePostReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgRemovePostReactionResponse, rhs: Desmos_Posts_V1beta1_MsgRemovePostReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgAnswerPoll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAnswerPoll"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .same(proto: "answers"),
    3: .same(proto: "answerer"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.answers) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.answerer) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.answers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.answers, fieldNumber: 2)
    }
    if !self.answerer.isEmpty {
      try visitor.visitSingularStringField(value: self.answerer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgAnswerPoll, rhs: Desmos_Posts_V1beta1_MsgAnswerPoll) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.answers != rhs.answers {return false}
    if lhs.answerer != rhs.answerer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgAnswerPollResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAnswerPollResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgAnswerPollResponse, rhs: Desmos_Posts_V1beta1_MsgAnswerPollResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgRegisterReaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterReaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "short_code"),
    2: .same(proto: "value"),
    3: .same(proto: "subspace"),
    4: .same(proto: "creator"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.shortCode) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.subspace) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.shortCode.isEmpty {
      try visitor.visitSingularStringField(value: self.shortCode, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    if !self.subspace.isEmpty {
      try visitor.visitSingularStringField(value: self.subspace, fieldNumber: 3)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgRegisterReaction, rhs: Desmos_Posts_V1beta1_MsgRegisterReaction) -> Bool {
    if lhs.shortCode != rhs.shortCode {return false}
    if lhs.value != rhs.value {return false}
    if lhs.subspace != rhs.subspace {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgRegisterReactionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRegisterReactionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgRegisterReactionResponse, rhs: Desmos_Posts_V1beta1_MsgRegisterReactionResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgReportPost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReportPost"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "post_id"),
    2: .standard(proto: "report_type"),
    3: .same(proto: "message"),
    4: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.postID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.reportType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.postID.isEmpty {
      try visitor.visitSingularStringField(value: self.postID, fieldNumber: 1)
    }
    if !self.reportType.isEmpty {
      try visitor.visitSingularStringField(value: self.reportType, fieldNumber: 2)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 3)
    }
    if !self.user.isEmpty {
      try visitor.visitSingularStringField(value: self.user, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgReportPost, rhs: Desmos_Posts_V1beta1_MsgReportPost) -> Bool {
    if lhs.postID != rhs.postID {return false}
    if lhs.reportType != rhs.reportType {return false}
    if lhs.message != rhs.message {return false}
    if lhs.user != rhs.user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Desmos_Posts_V1beta1_MsgReportPostResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReportPostResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Desmos_Posts_V1beta1_MsgReportPostResponse, rhs: Desmos_Posts_V1beta1_MsgReportPostResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
