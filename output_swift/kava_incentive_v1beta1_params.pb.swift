// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/incentive/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// RewardPeriod stores the state of an ongoing reward
struct Kava_Incentive_V1beta1_RewardPeriod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var active: Bool = false

  var collateralType: String = String()

  var start: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var rewardsPerSecond: Cosmos_Base_V1beta1_Coin {
    get {return _rewardsPerSecond ?? Cosmos_Base_V1beta1_Coin()}
    set {_rewardsPerSecond = newValue}
  }
  /// Returns true if `rewardsPerSecond` has been explicitly set.
  var hasRewardsPerSecond: Bool {return self._rewardsPerSecond != nil}
  /// Clears the value of `rewardsPerSecond`. Subsequent reads from it will return its default value.
  mutating func clearRewardsPerSecond() {self._rewardsPerSecond = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _rewardsPerSecond: Cosmos_Base_V1beta1_Coin? = nil
}

/// MultiRewardPeriod supports multiple reward types
struct Kava_Incentive_V1beta1_MultiRewardPeriod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var active: Bool = false

  var collateralType: String = String()

  var start: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _start ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  var hasStart: Bool {return self._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  mutating func clearStart() {self._start = nil}

  var end: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _end ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  var hasEnd: Bool {return self._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  mutating func clearEnd() {self._end = nil}

  var rewardsPerSecond: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _start: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _end: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Multiplier amount the claim rewards get increased by, along with how long the claim rewards are locked
struct Kava_Incentive_V1beta1_Multiplier {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var monthsLockup: Int64 = 0

  var factor: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MultipliersPerDenom is a map of denoms to a set of multipliers
struct Kava_Incentive_V1beta1_MultipliersPerDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var multipliers: [Kava_Incentive_V1beta1_Multiplier] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Params
struct Kava_Incentive_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var usdxMintingRewardPeriods: [Kava_Incentive_V1beta1_RewardPeriod] = []

  var hardSupplyRewardPeriods: [Kava_Incentive_V1beta1_MultiRewardPeriod] = []

  var hardBorrowRewardPeriods: [Kava_Incentive_V1beta1_MultiRewardPeriod] = []

  var delegatorRewardPeriods: [Kava_Incentive_V1beta1_MultiRewardPeriod] = []

  var swapRewardPeriods: [Kava_Incentive_V1beta1_MultiRewardPeriod] = []

  var claimMultipliers: [Kava_Incentive_V1beta1_MultipliersPerDenom] = []

  var claimEnd: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _claimEnd ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_claimEnd = newValue}
  }
  /// Returns true if `claimEnd` has been explicitly set.
  var hasClaimEnd: Bool {return self._claimEnd != nil}
  /// Clears the value of `claimEnd`. Subsequent reads from it will return its default value.
  mutating func clearClaimEnd() {self._claimEnd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _claimEnd: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.incentive.v1beta1"

extension Kava_Incentive_V1beta1_RewardPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardPeriod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
    5: .standard(proto: "rewards_per_second"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rewardsPerSecond) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._rewardsPerSecond {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_RewardPeriod, rhs: Kava_Incentive_V1beta1_RewardPeriod) -> Bool {
    if lhs.active != rhs.active {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs._rewardsPerSecond != rhs._rewardsPerSecond {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_MultiRewardPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiRewardPeriod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "start"),
    4: .same(proto: "end"),
    5: .standard(proto: "rewards_per_second"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._start) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._end) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.rewardsPerSecond) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._start {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._end {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.rewardsPerSecond.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardsPerSecond, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_MultiRewardPeriod, rhs: Kava_Incentive_V1beta1_MultiRewardPeriod) -> Bool {
    if lhs.active != rhs.active {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._start != rhs._start {return false}
    if lhs._end != rhs._end {return false}
    if lhs.rewardsPerSecond != rhs.rewardsPerSecond {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_Multiplier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Multiplier"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "months_lockup"),
    3: .same(proto: "factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.monthsLockup) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.factor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.monthsLockup != 0 {
      try visitor.visitSingularInt64Field(value: self.monthsLockup, fieldNumber: 2)
    }
    if !self.factor.isEmpty {
      try visitor.visitSingularBytesField(value: self.factor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_Multiplier, rhs: Kava_Incentive_V1beta1_Multiplier) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.monthsLockup != rhs.monthsLockup {return false}
    if lhs.factor != rhs.factor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_MultipliersPerDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultipliersPerDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "multipliers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.multipliers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.multipliers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.multipliers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_MultipliersPerDenom, rhs: Kava_Incentive_V1beta1_MultipliersPerDenom) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.multipliers != rhs.multipliers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "usdx_minting_reward_periods"),
    2: .standard(proto: "hard_supply_reward_periods"),
    3: .standard(proto: "hard_borrow_reward_periods"),
    4: .standard(proto: "delegator_reward_periods"),
    5: .standard(proto: "swap_reward_periods"),
    6: .standard(proto: "claim_multipliers"),
    7: .standard(proto: "claim_end"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.usdxMintingRewardPeriods) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.hardSupplyRewardPeriods) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.hardBorrowRewardPeriods) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.delegatorRewardPeriods) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.swapRewardPeriods) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.claimMultipliers) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._claimEnd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.usdxMintingRewardPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.usdxMintingRewardPeriods, fieldNumber: 1)
    }
    if !self.hardSupplyRewardPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hardSupplyRewardPeriods, fieldNumber: 2)
    }
    if !self.hardBorrowRewardPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hardBorrowRewardPeriods, fieldNumber: 3)
    }
    if !self.delegatorRewardPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delegatorRewardPeriods, fieldNumber: 4)
    }
    if !self.swapRewardPeriods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.swapRewardPeriods, fieldNumber: 5)
    }
    if !self.claimMultipliers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimMultipliers, fieldNumber: 6)
    }
    if let v = self._claimEnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_Params, rhs: Kava_Incentive_V1beta1_Params) -> Bool {
    if lhs.usdxMintingRewardPeriods != rhs.usdxMintingRewardPeriods {return false}
    if lhs.hardSupplyRewardPeriods != rhs.hardSupplyRewardPeriods {return false}
    if lhs.hardBorrowRewardPeriods != rhs.hardBorrowRewardPeriods {return false}
    if lhs.delegatorRewardPeriods != rhs.delegatorRewardPeriods {return false}
    if lhs.swapRewardPeriods != rhs.swapRewardPeriods {return false}
    if lhs.claimMultipliers != rhs.claimMultipliers {return false}
    if lhs._claimEnd != rhs._claimEnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
