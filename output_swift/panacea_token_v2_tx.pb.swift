// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/token/v2/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgIssueToken defines the Msg/IssueToken request type.
struct Panacea_Token_V2_MsgIssueToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var shortSymbol: String = String()

  var totalSupplyMicro: Cosmos_Base_V1beta1_IntProto {
    get {return _totalSupplyMicro ?? Cosmos_Base_V1beta1_IntProto()}
    set {_totalSupplyMicro = newValue}
  }
  /// Returns true if `totalSupplyMicro` has been explicitly set.
  var hasTotalSupplyMicro: Bool {return self._totalSupplyMicro != nil}
  /// Clears the value of `totalSupplyMicro`. Subsequent reads from it will return its default value.
  mutating func clearTotalSupplyMicro() {self._totalSupplyMicro = nil}

  var mintable: Bool = false

  var ownerAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalSupplyMicro: Cosmos_Base_V1beta1_IntProto? = nil
}

/// MsgIssueTokenResponse defines the Msg/IssueToken response type.
struct Panacea_Token_V2_MsgIssueTokenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.token.v2"

extension Panacea_Token_V2_MsgIssueToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgIssueToken"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "short_symbol"),
    3: .standard(proto: "total_supply_micro"),
    4: .same(proto: "mintable"),
    5: .standard(proto: "owner_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shortSymbol) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._totalSupplyMicro) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.mintable) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.shortSymbol.isEmpty {
      try visitor.visitSingularStringField(value: self.shortSymbol, fieldNumber: 2)
    }
    if let v = self._totalSupplyMicro {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.mintable != false {
      try visitor.visitSingularBoolField(value: self.mintable, fieldNumber: 4)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Token_V2_MsgIssueToken, rhs: Panacea_Token_V2_MsgIssueToken) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.shortSymbol != rhs.shortSymbol {return false}
    if lhs._totalSupplyMicro != rhs._totalSupplyMicro {return false}
    if lhs.mintable != rhs.mintable {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Token_V2_MsgIssueTokenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgIssueTokenResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Token_V2_MsgIssueTokenResponse, rhs: Panacea_Token_V2_MsgIssueTokenResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
