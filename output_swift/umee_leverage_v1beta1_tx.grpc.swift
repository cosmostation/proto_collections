//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/leverage/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the x/leverage module's Msg service.
///
/// Usage: instantiate `Umeenetwork_Umee_Leverage_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Umeenetwork_Umee_Leverage_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umeenetwork_Umee_Leverage_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func lendAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse>

  func withdrawAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse>

  func setCollateral(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral, Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse>

  func borrowAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse>

  func repayAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse>
}

extension Umeenetwork_Umee_Leverage_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "umeenetwork.umee.leverage.v1beta1.Msg"
  }

  /// LendAsset defines a method for lending coins to the capital facility.
  ///
  /// - Parameters:
  ///   - request: Request to send to LendAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lendAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Msg/LendAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLendAssetInterceptors() ?? []
    )
  }

  /// WithdrawAsset defines a method for withdrawing previously lent coins from
  /// the capital facility.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Msg/WithdrawAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawAssetInterceptors() ?? []
    )
  }

  /// SetCollateral defines a method for users to enable or disable a uToken
  /// denomination in their wallet for use as collateral.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCollateral(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral, Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Msg/SetCollateral",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCollateralInterceptors() ?? []
    )
  }

  /// BorrowAsset defines a method for borrowing coins from the capital facility.
  ///
  /// - Parameters:
  ///   - request: Request to send to BorrowAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func borrowAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Msg/BorrowAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBorrowAssetInterceptors() ?? []
    )
  }

  /// RepayAsset defines a method for repaying borrowed coins to the capital facility.
  ///
  /// - Parameters:
  ///   - request: Request to send to RepayAsset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func repayAsset(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Msg/RepayAsset",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRepayAssetInterceptors() ?? []
    )
  }
}

internal protocol Umeenetwork_Umee_Leverage_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'lendAsset'.
  func makeLendAssetInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawAsset'.
  func makeWithdrawAssetInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'setCollateral'.
  func makeSetCollateralInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral, Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'borrowAsset'.
  func makeBorrowAssetInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse>]

  /// - Returns: Interceptors to use when invoking 'repayAsset'.
  func makeRepayAssetInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse>]
}

internal final class Umeenetwork_Umee_Leverage_V1beta1_MsgClient: Umeenetwork_Umee_Leverage_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umeenetwork_Umee_Leverage_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the umeenetwork.umee.leverage.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umeenetwork_Umee_Leverage_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the x/leverage module's Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umeenetwork_Umee_Leverage_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Umeenetwork_Umee_Leverage_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// LendAsset defines a method for lending coins to the capital facility.
  func lendAsset(request: Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse>

  /// WithdrawAsset defines a method for withdrawing previously lent coins from
  /// the capital facility.
  func withdrawAsset(request: Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse>

  /// SetCollateral defines a method for users to enable or disable a uToken
  /// denomination in their wallet for use as collateral.
  func setCollateral(request: Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse>

  /// BorrowAsset defines a method for borrowing coins from the capital facility.
  func borrowAsset(request: Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse>

  /// RepayAsset defines a method for repaying borrowed coins to the capital facility.
  func repayAsset(request: Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse>
}

extension Umeenetwork_Umee_Leverage_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "umeenetwork.umee.leverage.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LendAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse>(),
        interceptors: self.interceptors?.makeLendAssetInterceptors() ?? [],
        userFunction: self.lendAsset(request:context:)
      )

    case "WithdrawAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse>(),
        interceptors: self.interceptors?.makeWithdrawAssetInterceptors() ?? [],
        userFunction: self.withdrawAsset(request:context:)
      )

    case "SetCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse>(),
        interceptors: self.interceptors?.makeSetCollateralInterceptors() ?? [],
        userFunction: self.setCollateral(request:context:)
      )

    case "BorrowAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse>(),
        interceptors: self.interceptors?.makeBorrowAssetInterceptors() ?? [],
        userFunction: self.borrowAsset(request:context:)
      )

    case "RepayAsset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse>(),
        interceptors: self.interceptors?.makeRepayAssetInterceptors() ?? [],
        userFunction: self.repayAsset(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umeenetwork_Umee_Leverage_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'lendAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLendAssetInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgLendAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgLendAssetResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawAssetInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgWithdrawAssetResponse>]

  /// - Returns: Interceptors to use when handling 'setCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCollateralInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateral, Umeenetwork_Umee_Leverage_V1beta1_MsgSetCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'borrowAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBorrowAssetInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgBorrowAssetResponse>]

  /// - Returns: Interceptors to use when handling 'repayAsset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRepayAssetInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAsset, Umeenetwork_Umee_Leverage_V1beta1_MsgRepayAssetResponse>]
}
