//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: secret/compute/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Secret_Compute_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Secret_Compute_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func contractInfo(
    _ request: Secret_Compute_V1beta1_QueryContractInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryContractInfoRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>

  func contractsByCode(
    _ request: Secret_Compute_V1beta1_QueryContractsByCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryContractsByCodeRequest, Secret_Compute_V1beta1_QueryContractsByCodeResponse>

  func smartContractState(
    _ request: Secret_Compute_V1beta1_QuerySmartContractStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QuerySmartContractStateRequest, Secret_Compute_V1beta1_QuerySmartContractStateResponse>

  func code(
    _ request: Secret_Compute_V1beta1_QueryCodeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryCodeRequest, Secret_Compute_V1beta1_QueryCodeResponse>

  func codes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>
}

extension Secret_Compute_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "secret.compute.v1beta1.Query"
  }

  /// Query contract
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractInfo(
    _ request: Secret_Compute_V1beta1_QueryContractInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryContractInfoRequest, Secret_Compute_V1beta1_QueryContractInfoResponse> {
    return self.makeUnaryCall(
      path: "/secret.compute.v1beta1.Query/ContractInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractInfoInterceptors() ?? []
    )
  }

  /// Query contract
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractsByCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractsByCode(
    _ request: Secret_Compute_V1beta1_QueryContractsByCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryContractsByCodeRequest, Secret_Compute_V1beta1_QueryContractsByCodeResponse> {
    return self.makeUnaryCall(
      path: "/secret.compute.v1beta1.Query/ContractsByCode",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractsByCodeInterceptors() ?? []
    )
  }

  /// Query contract
  ///
  /// - Parameters:
  ///   - request: Request to send to SmartContractState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func smartContractState(
    _ request: Secret_Compute_V1beta1_QuerySmartContractStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QuerySmartContractStateRequest, Secret_Compute_V1beta1_QuerySmartContractStateResponse> {
    return self.makeUnaryCall(
      path: "/secret.compute.v1beta1.Query/SmartContractState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSmartContractStateInterceptors() ?? []
    )
  }

  /// Query a specific contract code
  ///
  /// - Parameters:
  ///   - request: Request to send to Code.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func code(
    _ request: Secret_Compute_V1beta1_QueryCodeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryCodeRequest, Secret_Compute_V1beta1_QueryCodeResponse> {
    return self.makeUnaryCall(
      path: "/secret.compute.v1beta1.Query/Code",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  /// Query all contract codes on-chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Codes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse> {
    return self.makeUnaryCall(
      path: "/secret.compute.v1beta1.Query/Codes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodesInterceptors() ?? []
    )
  }
}

internal protocol Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'contractInfo'.
  func makeContractInfoInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryContractInfoRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'contractsByCode'.
  func makeContractsByCodeInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryContractsByCodeRequest, Secret_Compute_V1beta1_QueryContractsByCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'smartContractState'.
  func makeSmartContractStateInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QuerySmartContractStateRequest, Secret_Compute_V1beta1_QuerySmartContractStateResponse>]

  /// - Returns: Interceptors to use when invoking 'code'.
  func makeCodeInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryCodeRequest, Secret_Compute_V1beta1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'codes'.
  func makeCodesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>]
}

internal final class Secret_Compute_V1beta1_QueryClient: Secret_Compute_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the secret.compute.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Secret_Compute_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Query contract
  func contractInfo(request: Secret_Compute_V1beta1_QueryContractInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractInfoResponse>

  /// Query contract
  func contractsByCode(request: Secret_Compute_V1beta1_QueryContractsByCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractsByCodeResponse>

  /// Query contract
  func smartContractState(request: Secret_Compute_V1beta1_QuerySmartContractStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QuerySmartContractStateResponse>

  /// Query a specific contract code
  func code(request: Secret_Compute_V1beta1_QueryCodeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodeResponse>

  /// Query all contract codes on-chain
  func codes(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodesResponse>
}

extension Secret_Compute_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "secret.compute.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ContractInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryContractInfoRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractInfoResponse>(),
        interceptors: self.interceptors?.makeContractInfoInterceptors() ?? [],
        userFunction: self.contractInfo(request:context:)
      )

    case "ContractsByCode":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryContractsByCodeRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractsByCodeResponse>(),
        interceptors: self.interceptors?.makeContractsByCodeInterceptors() ?? [],
        userFunction: self.contractsByCode(request:context:)
      )

    case "SmartContractState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QuerySmartContractStateRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QuerySmartContractStateResponse>(),
        interceptors: self.interceptors?.makeSmartContractStateInterceptors() ?? [],
        userFunction: self.smartContractState(request:context:)
      )

    case "Code":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryCodeRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        userFunction: self.code(request:context:)
      )

    case "Codes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodesResponse>(),
        interceptors: self.interceptors?.makeCodesInterceptors() ?? [],
        userFunction: self.codes(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'contractInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractInfoInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryContractInfoRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when handling 'contractsByCode'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractsByCodeInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryContractsByCodeRequest, Secret_Compute_V1beta1_QueryContractsByCodeResponse>]

  /// - Returns: Interceptors to use when handling 'smartContractState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSmartContractStateInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QuerySmartContractStateRequest, Secret_Compute_V1beta1_QuerySmartContractStateResponse>]

  /// - Returns: Interceptors to use when handling 'code'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryCodeRequest, Secret_Compute_V1beta1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when handling 'codes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodesInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>]
}
