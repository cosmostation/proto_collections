//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/msgfees/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for marker module.
///
/// Usage: instantiate `Provenance_Msgfees_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Msgfees_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Msgfees_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Provenance_Msgfees_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Msgfees_V1_QueryParamsRequest, Provenance_Msgfees_V1_QueryParamsResponse>

  func queryAllMsgFees(
    _ request: Provenance_Msgfees_V1_QueryAllMsgFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Msgfees_V1_QueryAllMsgFeesRequest, Provenance_Msgfees_V1_QueryAllMsgFeesResponse>

  func calculateTxFees(
    _ request: Provenance_Msgfees_V1_CalculateTxFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Msgfees_V1_CalculateTxFeesRequest, Provenance_Msgfees_V1_CalculateTxFeesResponse>
}

extension Provenance_Msgfees_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "provenance.msgfees.v1.Query"
  }

  /// Params queries the parameters for x/msgfees
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Provenance_Msgfees_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Msgfees_V1_QueryParamsRequest, Provenance_Msgfees_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.msgfees.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Query all Msgs which have fees associated with them.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllMsgFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllMsgFees(
    _ request: Provenance_Msgfees_V1_QueryAllMsgFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Msgfees_V1_QueryAllMsgFeesRequest, Provenance_Msgfees_V1_QueryAllMsgFeesResponse> {
    return self.makeUnaryCall(
      path: "/provenance.msgfees.v1.Query/QueryAllMsgFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllMsgFeesInterceptors() ?? []
    )
  }

  /// CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees.
  ///
  /// - Parameters:
  ///   - request: Request to send to CalculateTxFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func calculateTxFees(
    _ request: Provenance_Msgfees_V1_CalculateTxFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Msgfees_V1_CalculateTxFeesRequest, Provenance_Msgfees_V1_CalculateTxFeesResponse> {
    return self.makeUnaryCall(
      path: "/provenance.msgfees.v1.Query/CalculateTxFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCalculateTxFeesInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Msgfees_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Provenance_Msgfees_V1_QueryParamsRequest, Provenance_Msgfees_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllMsgFees'.
  func makeQueryAllMsgFeesInterceptors() -> [ClientInterceptor<Provenance_Msgfees_V1_QueryAllMsgFeesRequest, Provenance_Msgfees_V1_QueryAllMsgFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'calculateTxFees'.
  func makeCalculateTxFeesInterceptors() -> [ClientInterceptor<Provenance_Msgfees_V1_CalculateTxFeesRequest, Provenance_Msgfees_V1_CalculateTxFeesResponse>]
}

internal final class Provenance_Msgfees_V1_QueryClient: Provenance_Msgfees_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Msgfees_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.msgfees.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Msgfees_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for marker module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Provenance_Msgfees_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Provenance_Msgfees_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters for x/msgfees
  func params(request: Provenance_Msgfees_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Msgfees_V1_QueryParamsResponse>

  /// Query all Msgs which have fees associated with them.
  func queryAllMsgFees(request: Provenance_Msgfees_V1_QueryAllMsgFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Msgfees_V1_QueryAllMsgFeesResponse>

  /// CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees.
  func calculateTxFees(request: Provenance_Msgfees_V1_CalculateTxFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Msgfees_V1_CalculateTxFeesResponse>
}

extension Provenance_Msgfees_V1_QueryProvider {
  internal var serviceName: Substring { return "provenance.msgfees.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Msgfees_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Msgfees_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "QueryAllMsgFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Msgfees_V1_QueryAllMsgFeesRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Msgfees_V1_QueryAllMsgFeesResponse>(),
        interceptors: self.interceptors?.makeQueryAllMsgFeesInterceptors() ?? [],
        userFunction: self.queryAllMsgFees(request:context:)
      )

    case "CalculateTxFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Msgfees_V1_CalculateTxFeesRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Msgfees_V1_CalculateTxFeesResponse>(),
        interceptors: self.interceptors?.makeCalculateTxFeesInterceptors() ?? [],
        userFunction: self.calculateTxFees(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Provenance_Msgfees_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Provenance_Msgfees_V1_QueryParamsRequest, Provenance_Msgfees_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllMsgFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllMsgFeesInterceptors() -> [ServerInterceptor<Provenance_Msgfees_V1_QueryAllMsgFeesRequest, Provenance_Msgfees_V1_QueryAllMsgFeesResponse>]

  /// - Returns: Interceptors to use when handling 'calculateTxFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCalculateTxFeesInterceptors() -> [ServerInterceptor<Provenance_Msgfees_V1_CalculateTxFeesRequest, Provenance_Msgfees_V1_CalculateTxFeesResponse>]
}
