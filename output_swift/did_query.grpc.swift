//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: did/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Did_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Did_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Did_QueryClientInterceptorFactoryProtocol? { get }

  func didDoc(
    _ request: Did_QueryDidDocRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_QueryDidDocRequest, Did_QueryDidDocResponse>

  func allDids(
    _ request: Did_QueryAllDidsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_QueryAllDidsRequest, Did_QueryAllDidsResponse>

  func allDidDocs(
    _ request: Did_QueryAllDidDocsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_QueryAllDidDocsRequest, Did_QueryAllDidDocsResponse>

  func addressFromDid(
    _ request: Did_QueryAddressFromDidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_QueryAddressFromDidRequest, Did_QueryAddressFromDidResponse>

  func addressFromBase58EncodedPubkey(
    _ request: Did_QueryAddressFromBase58EncodedPubkeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_QueryAddressFromBase58EncodedPubkeyRequest, Did_QueryAddressFromBase58EncodedPubkeyResponse>
}

extension Did_QueryClientProtocol {
  internal var serviceName: String {
    return "did.Query"
  }

  /// DidDoc queries info of a specific DID's DidDoc.
  ///
  /// - Parameters:
  ///   - request: Request to send to DidDoc.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func didDoc(
    _ request: Did_QueryDidDocRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_QueryDidDocRequest, Did_QueryDidDocResponse> {
    return self.makeUnaryCall(
      path: "/did.Query/DidDoc",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDidDocInterceptors() ?? []
    )
  }

  /// AllDids returns a list of all existing DIDs.
  ///
  /// - Parameters:
  ///   - request: Request to send to AllDids.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allDids(
    _ request: Did_QueryAllDidsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_QueryAllDidsRequest, Did_QueryAllDidsResponse> {
    return self.makeUnaryCall(
      path: "/did.Query/AllDids",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllDidsInterceptors() ?? []
    )
  }

  /// AllDidDocs returns a list of all existing DidDocs (i.e. all DIDs along with their DidDoc info).
  ///
  /// - Parameters:
  ///   - request: Request to send to AllDidDocs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allDidDocs(
    _ request: Did_QueryAllDidDocsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_QueryAllDidDocsRequest, Did_QueryAllDidDocsResponse> {
    return self.makeUnaryCall(
      path: "/did.Query/AllDidDocs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllDidDocsInterceptors() ?? []
    )
  }

  /// AddressFromDid retrieves the cosmos address associated to an ixo DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressFromDid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addressFromDid(
    _ request: Did_QueryAddressFromDidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_QueryAddressFromDidRequest, Did_QueryAddressFromDidResponse> {
    return self.makeUnaryCall(
      path: "/did.Query/AddressFromDid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressFromDidInterceptors() ?? []
    )
  }

  /// AddressFromBase58EncodedPubkey retrieves the cosmos address associated to an ixo DID's pubkey.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressFromBase58EncodedPubkey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addressFromBase58EncodedPubkey(
    _ request: Did_QueryAddressFromBase58EncodedPubkeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_QueryAddressFromBase58EncodedPubkeyRequest, Did_QueryAddressFromBase58EncodedPubkeyResponse> {
    return self.makeUnaryCall(
      path: "/did.Query/AddressFromBase58EncodedPubkey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressFromBase58EncodedPubkeyInterceptors() ?? []
    )
  }
}

internal protocol Did_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'didDoc'.
  func makeDidDocInterceptors() -> [ClientInterceptor<Did_QueryDidDocRequest, Did_QueryDidDocResponse>]

  /// - Returns: Interceptors to use when invoking 'allDids'.
  func makeAllDidsInterceptors() -> [ClientInterceptor<Did_QueryAllDidsRequest, Did_QueryAllDidsResponse>]

  /// - Returns: Interceptors to use when invoking 'allDidDocs'.
  func makeAllDidDocsInterceptors() -> [ClientInterceptor<Did_QueryAllDidDocsRequest, Did_QueryAllDidDocsResponse>]

  /// - Returns: Interceptors to use when invoking 'addressFromDid'.
  func makeAddressFromDidInterceptors() -> [ClientInterceptor<Did_QueryAddressFromDidRequest, Did_QueryAddressFromDidResponse>]

  /// - Returns: Interceptors to use when invoking 'addressFromBase58EncodedPubkey'.
  func makeAddressFromBase58EncodedPubkeyInterceptors() -> [ClientInterceptor<Did_QueryAddressFromBase58EncodedPubkeyRequest, Did_QueryAddressFromBase58EncodedPubkeyResponse>]
}

internal final class Did_QueryClient: Did_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Did_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the did.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Did_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Did_QueryProvider: CallHandlerProvider {
  var interceptors: Did_QueryServerInterceptorFactoryProtocol? { get }

  /// DidDoc queries info of a specific DID's DidDoc.
  func didDoc(request: Did_QueryDidDocRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Did_QueryDidDocResponse>

  /// AllDids returns a list of all existing DIDs.
  func allDids(request: Did_QueryAllDidsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Did_QueryAllDidsResponse>

  /// AllDidDocs returns a list of all existing DidDocs (i.e. all DIDs along with their DidDoc info).
  func allDidDocs(request: Did_QueryAllDidDocsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Did_QueryAllDidDocsResponse>

  /// AddressFromDid retrieves the cosmos address associated to an ixo DID.
  func addressFromDid(request: Did_QueryAddressFromDidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Did_QueryAddressFromDidResponse>

  /// AddressFromBase58EncodedPubkey retrieves the cosmos address associated to an ixo DID's pubkey.
  func addressFromBase58EncodedPubkey(request: Did_QueryAddressFromBase58EncodedPubkeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Did_QueryAddressFromBase58EncodedPubkeyResponse>
}

extension Did_QueryProvider {
  internal var serviceName: Substring { return "did.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "DidDoc":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_QueryDidDocRequest>(),
        responseSerializer: ProtobufSerializer<Did_QueryDidDocResponse>(),
        interceptors: self.interceptors?.makeDidDocInterceptors() ?? [],
        userFunction: self.didDoc(request:context:)
      )

    case "AllDids":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_QueryAllDidsRequest>(),
        responseSerializer: ProtobufSerializer<Did_QueryAllDidsResponse>(),
        interceptors: self.interceptors?.makeAllDidsInterceptors() ?? [],
        userFunction: self.allDids(request:context:)
      )

    case "AllDidDocs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_QueryAllDidDocsRequest>(),
        responseSerializer: ProtobufSerializer<Did_QueryAllDidDocsResponse>(),
        interceptors: self.interceptors?.makeAllDidDocsInterceptors() ?? [],
        userFunction: self.allDidDocs(request:context:)
      )

    case "AddressFromDid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_QueryAddressFromDidRequest>(),
        responseSerializer: ProtobufSerializer<Did_QueryAddressFromDidResponse>(),
        interceptors: self.interceptors?.makeAddressFromDidInterceptors() ?? [],
        userFunction: self.addressFromDid(request:context:)
      )

    case "AddressFromBase58EncodedPubkey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_QueryAddressFromBase58EncodedPubkeyRequest>(),
        responseSerializer: ProtobufSerializer<Did_QueryAddressFromBase58EncodedPubkeyResponse>(),
        interceptors: self.interceptors?.makeAddressFromBase58EncodedPubkeyInterceptors() ?? [],
        userFunction: self.addressFromBase58EncodedPubkey(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Did_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'didDoc'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDidDocInterceptors() -> [ServerInterceptor<Did_QueryDidDocRequest, Did_QueryDidDocResponse>]

  /// - Returns: Interceptors to use when handling 'allDids'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllDidsInterceptors() -> [ServerInterceptor<Did_QueryAllDidsRequest, Did_QueryAllDidsResponse>]

  /// - Returns: Interceptors to use when handling 'allDidDocs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllDidDocsInterceptors() -> [ServerInterceptor<Did_QueryAllDidDocsRequest, Did_QueryAllDidDocsResponse>]

  /// - Returns: Interceptors to use when handling 'addressFromDid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressFromDidInterceptors() -> [ServerInterceptor<Did_QueryAddressFromDidRequest, Did_QueryAddressFromDidResponse>]

  /// - Returns: Interceptors to use when handling 'addressFromBase58EncodedPubkey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressFromBase58EncodedPubkeyInterceptors() -> [ServerInterceptor<Did_QueryAddressFromBase58EncodedPubkeyRequest, Did_QueryAddressFromBase58EncodedPubkeyResponse>]
}
