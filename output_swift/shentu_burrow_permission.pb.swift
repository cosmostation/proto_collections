// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/burrow/permission.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Permission_AccountPermissions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var base: Permission_BasePermissions {
    get {return _base ?? Permission_BasePermissions()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var roles: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _base: Permission_BasePermissions? = nil
}

struct Permission_BasePermissions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var perms: UInt64 {
    get {return _perms ?? 0}
    set {_perms = newValue}
  }
  /// Returns true if `perms` has been explicitly set.
  var hasPerms: Bool {return self._perms != nil}
  /// Clears the value of `perms`. Subsequent reads from it will return its default value.
  mutating func clearPerms() {self._perms = nil}

  var setBit: UInt64 {
    get {return _setBit ?? 0}
    set {_setBit = newValue}
  }
  /// Returns true if `setBit` has been explicitly set.
  var hasSetBit: Bool {return self._setBit != nil}
  /// Clears the value of `setBit`. Subsequent reads from it will return its default value.
  mutating func clearSetBit() {self._setBit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _perms: UInt64? = nil
  fileprivate var _setBit: UInt64? = nil
}

struct Permission_PermArgs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The permission function
  var action: UInt64 {
    get {return _action ?? 0}
    set {_action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return self._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {self._action = nil}

  /// The target of the action
  var target: Data {
    get {return _target ?? Data()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  mutating func clearTarget() {self._target = nil}

  /// Possible arguments
  var permission: UInt64 {
    get {return _permission ?? 0}
    set {_permission = newValue}
  }
  /// Returns true if `permission` has been explicitly set.
  var hasPermission: Bool {return self._permission != nil}
  /// Clears the value of `permission`. Subsequent reads from it will return its default value.
  mutating func clearPermission() {self._permission = nil}

  var role: String {
    get {return _role ?? String()}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  mutating func clearRole() {self._role = nil}

  var value: Bool {
    get {return _value ?? false}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _action: UInt64? = nil
  fileprivate var _target: Data? = nil
  fileprivate var _permission: UInt64? = nil
  fileprivate var _role: String? = nil
  fileprivate var _value: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "permission"

extension Permission_AccountPermissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountPermissions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Base"),
    2: .same(proto: "Roles"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._base) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.roles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._base {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.roles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.roles, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Permission_AccountPermissions, rhs: Permission_AccountPermissions) -> Bool {
    if lhs._base != rhs._base {return false}
    if lhs.roles != rhs.roles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Permission_BasePermissions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BasePermissions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Perms"),
    2: .same(proto: "SetBit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._perms) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._setBit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._perms {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._setBit {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Permission_BasePermissions, rhs: Permission_BasePermissions) -> Bool {
    if lhs._perms != rhs._perms {return false}
    if lhs._setBit != rhs._setBit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Permission_PermArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PermArgs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Action"),
    2: .same(proto: "Target"),
    3: .same(proto: "Permission"),
    4: .same(proto: "Role"),
    5: .same(proto: "Value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._action) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._target) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._permission) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._role) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._action {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._target {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._permission {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    if let v = self._role {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._value {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Permission_PermArgs, rhs: Permission_PermArgs) -> Bool {
    if lhs._action != rhs._action {return false}
    if lhs._target != rhs._target {return false}
    if lhs._permission != rhs._permission {return false}
    if lhs._role != rhs._role {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
