//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sifnode/dispensation/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sifnode_Dispensation_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Sifnode_Dispensation_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sifnode_Dispensation_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createDistribution(
    _ request: Sifnode_Dispensation_V1_MsgCreateDistribution,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgCreateDistribution, Sifnode_Dispensation_V1_MsgCreateDistributionResponse>

  func createUserClaim(
    _ request: Sifnode_Dispensation_V1_MsgCreateUserClaim,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgCreateUserClaim, Sifnode_Dispensation_V1_MsgCreateClaimResponse>

  func runDistribution(
    _ request: Sifnode_Dispensation_V1_MsgRunDistribution,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgRunDistribution, Sifnode_Dispensation_V1_MsgRunDistributionResponse>
}

extension Sifnode_Dispensation_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "sifnode.dispensation.v1.Msg"
  }

  /// Unary call to CreateDistribution
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDistribution.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDistribution(
    _ request: Sifnode_Dispensation_V1_MsgCreateDistribution,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgCreateDistribution, Sifnode_Dispensation_V1_MsgCreateDistributionResponse> {
    return self.makeUnaryCall(
      path: "/sifnode.dispensation.v1.Msg/CreateDistribution",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDistributionInterceptors() ?? []
    )
  }

  /// Unary call to CreateUserClaim
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUserClaim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createUserClaim(
    _ request: Sifnode_Dispensation_V1_MsgCreateUserClaim,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgCreateUserClaim, Sifnode_Dispensation_V1_MsgCreateClaimResponse> {
    return self.makeUnaryCall(
      path: "/sifnode.dispensation.v1.Msg/CreateUserClaim",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserClaimInterceptors() ?? []
    )
  }

  /// Unary call to RunDistribution
  ///
  /// - Parameters:
  ///   - request: Request to send to RunDistribution.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func runDistribution(
    _ request: Sifnode_Dispensation_V1_MsgRunDistribution,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Dispensation_V1_MsgRunDistribution, Sifnode_Dispensation_V1_MsgRunDistributionResponse> {
    return self.makeUnaryCall(
      path: "/sifnode.dispensation.v1.Msg/RunDistribution",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRunDistributionInterceptors() ?? []
    )
  }
}

internal protocol Sifnode_Dispensation_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createDistribution'.
  func makeCreateDistributionInterceptors() -> [ClientInterceptor<Sifnode_Dispensation_V1_MsgCreateDistribution, Sifnode_Dispensation_V1_MsgCreateDistributionResponse>]

  /// - Returns: Interceptors to use when invoking 'createUserClaim'.
  func makeCreateUserClaimInterceptors() -> [ClientInterceptor<Sifnode_Dispensation_V1_MsgCreateUserClaim, Sifnode_Dispensation_V1_MsgCreateClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'runDistribution'.
  func makeRunDistributionInterceptors() -> [ClientInterceptor<Sifnode_Dispensation_V1_MsgRunDistribution, Sifnode_Dispensation_V1_MsgRunDistributionResponse>]
}

internal final class Sifnode_Dispensation_V1_MsgClient: Sifnode_Dispensation_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sifnode_Dispensation_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the sifnode.dispensation.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sifnode_Dispensation_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sifnode_Dispensation_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Sifnode_Dispensation_V1_MsgServerInterceptorFactoryProtocol? { get }

  func createDistribution(request: Sifnode_Dispensation_V1_MsgCreateDistribution, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Dispensation_V1_MsgCreateDistributionResponse>

  func createUserClaim(request: Sifnode_Dispensation_V1_MsgCreateUserClaim, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Dispensation_V1_MsgCreateClaimResponse>

  func runDistribution(request: Sifnode_Dispensation_V1_MsgRunDistribution, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Dispensation_V1_MsgRunDistributionResponse>
}

extension Sifnode_Dispensation_V1_MsgProvider {
  internal var serviceName: Substring { return "sifnode.dispensation.v1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDistribution":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Dispensation_V1_MsgCreateDistribution>(),
        responseSerializer: ProtobufSerializer<Sifnode_Dispensation_V1_MsgCreateDistributionResponse>(),
        interceptors: self.interceptors?.makeCreateDistributionInterceptors() ?? [],
        userFunction: self.createDistribution(request:context:)
      )

    case "CreateUserClaim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Dispensation_V1_MsgCreateUserClaim>(),
        responseSerializer: ProtobufSerializer<Sifnode_Dispensation_V1_MsgCreateClaimResponse>(),
        interceptors: self.interceptors?.makeCreateUserClaimInterceptors() ?? [],
        userFunction: self.createUserClaim(request:context:)
      )

    case "RunDistribution":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Dispensation_V1_MsgRunDistribution>(),
        responseSerializer: ProtobufSerializer<Sifnode_Dispensation_V1_MsgRunDistributionResponse>(),
        interceptors: self.interceptors?.makeRunDistributionInterceptors() ?? [],
        userFunction: self.runDistribution(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sifnode_Dispensation_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDistribution'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDistributionInterceptors() -> [ServerInterceptor<Sifnode_Dispensation_V1_MsgCreateDistribution, Sifnode_Dispensation_V1_MsgCreateDistributionResponse>]

  /// - Returns: Interceptors to use when handling 'createUserClaim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateUserClaimInterceptors() -> [ServerInterceptor<Sifnode_Dispensation_V1_MsgCreateUserClaim, Sifnode_Dispensation_V1_MsgCreateClaimResponse>]

  /// - Returns: Interceptors to use when handling 'runDistribution'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRunDistributionInterceptors() -> [ServerInterceptor<Sifnode_Dispensation_V1_MsgRunDistribution, Sifnode_Dispensation_V1_MsgRunDistributionResponse>]
}
