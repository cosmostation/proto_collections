// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/bep3/v1beta1/bep3.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// SwapStatus is the status of an AtomicSwap
enum Kava_Bep3_V1beta1_SwapStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// SWAP_STATUS_UNSPECIFIED represents an unspecified status
  case unspecified // = 0

  /// SWAP_STATUS_OPEN represents an open swap
  case `open` // = 1

  /// SWAP_STATUS_COMPLETED represents a completed swap
  case completed // = 2

  /// SWAP_STATUS_EXPIRED represents an expired swap
  case expired // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .open
    case 2: self = .completed
    case 3: self = .expired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .open: return 1
    case .completed: return 2
    case .expired: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Kava_Bep3_V1beta1_SwapStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Kava_Bep3_V1beta1_SwapStatus] = [
    .unspecified,
    .open,
    .completed,
    .expired,
  ]
}

#endif  // swift(>=4.2)

/// SwapDirection is the direction of an AtomicSwap
enum Kava_Bep3_V1beta1_SwapDirection: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// SWAP_DIRECTION_UNSPECIFIED represents unspecified or invalid swap direcation
  case unspecified // = 0

  /// SWAP_DIRECTION_INCOMING represents is incoming swap (to the kava chain)
  case incoming // = 1

  /// SWAP_DIRECTION_OUTGOING represents an outgoing swap (from the kava chain)
  case outgoing // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .incoming
    case 2: self = .outgoing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .incoming: return 1
    case .outgoing: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Kava_Bep3_V1beta1_SwapDirection: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Kava_Bep3_V1beta1_SwapDirection] = [
    .unspecified,
    .incoming,
    .outgoing,
  ]
}

#endif  // swift(>=4.2)

/// Params defines the parameters for the bep3 module.
struct Kava_Bep3_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// asset_params define the parameters for each bep3 asset
  var assetParams: [Kava_Bep3_V1beta1_AssetParam] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AssetParam defines parameters for each bep3 asset.
struct Kava_Bep3_V1beta1_AssetParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom represents the denominatin for this asset
  var denom: String = String()

  /// coin_id represents the registered coin type to use (https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
  var coinID: Int64 = 0

  /// supply_limit defines the maximum supply allowed for the asset - a total or time based rate limit
  var supplyLimit: Kava_Bep3_V1beta1_SupplyLimit {
    get {return _supplyLimit ?? Kava_Bep3_V1beta1_SupplyLimit()}
    set {_supplyLimit = newValue}
  }
  /// Returns true if `supplyLimit` has been explicitly set.
  var hasSupplyLimit: Bool {return self._supplyLimit != nil}
  /// Clears the value of `supplyLimit`. Subsequent reads from it will return its default value.
  mutating func clearSupplyLimit() {self._supplyLimit = nil}

  /// active specifies if the asset is live or paused
  var active: Bool = false

  /// deputy_address the kava address of the deputy
  var deputyAddress: Data = Data()

  /// fixed_fee defines the fee for incoming swaps
  var fixedFee: String = String()

  /// min_swap_amount defines the minimum amount able to be swapped in a single message
  var minSwapAmount: String = String()

  /// max_swap_amount defines the maximum amount able to be swapped in a single message
  var maxSwapAmount: String = String()

  /// min_block_lock defined the minimum blocks to lock
  var minBlockLock: UInt64 = 0

  /// min_block_lock defined the maximum blocks to lock
  var maxBlockLock: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supplyLimit: Kava_Bep3_V1beta1_SupplyLimit? = nil
}

/// SupplyLimit define the absolute and time-based limits for an assets's supply.
struct Kava_Bep3_V1beta1_SupplyLimit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// limit defines the total supply allowed
  var limit: String = String()

  /// time_limited enables or disables time based supply limiting
  var timeLimited: Bool = false

  /// time_period specifies the duration that time_based_limit is evalulated
  var timePeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timePeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timePeriod = newValue}
  }
  /// Returns true if `timePeriod` has been explicitly set.
  var hasTimePeriod: Bool {return self._timePeriod != nil}
  /// Clears the value of `timePeriod`. Subsequent reads from it will return its default value.
  mutating func clearTimePeriod() {self._timePeriod = nil}

  /// time_based_limit defines the maximum supply that can be swapped within time_period
  var timeBasedLimit: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timePeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// AtomicSwap defines an atomic swap between chains for the pricefeed module.
struct Kava_Bep3_V1beta1_AtomicSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// amount represents the amount being swapped
  var amount: [Cosmos_Base_V1beta1_Coin] = []

  /// random_number_hash represents the hash of the random number
  var randomNumberHash: Data = Data()

  /// expire_height represents the height when the swap expires
  var expireHeight: UInt64 = 0

  /// timestamp represents the timestamp of the swap
  var timestamp: Int64 = 0

  /// sender is the kava chain sender of the swap
  var sender: Data = Data()

  /// recipient is the kava chain recipient of the swap
  var recipient: Data = Data()

  /// sender_other_chain is the sender on the other chain
  var senderOtherChain: String = String()

  /// recipient_other_chain is the recipient on the other chain
  var recipientOtherChain: String = String()

  /// closed_block is the block when the swap is closed
  var closedBlock: Int64 = 0

  /// status represents the current status of the swap
  var status: Kava_Bep3_V1beta1_SwapStatus = .unspecified

  /// cross_chain identifies whether the atomic swap is cross chain
  var crossChain: Bool = false

  /// direction identifies if the swap is incoming or outgoing
  var direction: Kava_Bep3_V1beta1_SwapDirection = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AssetSupply defines information about an asset's supply.
struct Kava_Bep3_V1beta1_AssetSupply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// incoming_supply represents the incoming supply of an asset
  var incomingSupply: Cosmos_Base_V1beta1_Coin {
    get {return _incomingSupply ?? Cosmos_Base_V1beta1_Coin()}
    set {_incomingSupply = newValue}
  }
  /// Returns true if `incomingSupply` has been explicitly set.
  var hasIncomingSupply: Bool {return self._incomingSupply != nil}
  /// Clears the value of `incomingSupply`. Subsequent reads from it will return its default value.
  mutating func clearIncomingSupply() {self._incomingSupply = nil}

  /// outgoing_supply represents the outgoing supply of an asset
  var outgoingSupply: Cosmos_Base_V1beta1_Coin {
    get {return _outgoingSupply ?? Cosmos_Base_V1beta1_Coin()}
    set {_outgoingSupply = newValue}
  }
  /// Returns true if `outgoingSupply` has been explicitly set.
  var hasOutgoingSupply: Bool {return self._outgoingSupply != nil}
  /// Clears the value of `outgoingSupply`. Subsequent reads from it will return its default value.
  mutating func clearOutgoingSupply() {self._outgoingSupply = nil}

  /// current_supply represents the current on-chain supply of an asset
  var currentSupply: Cosmos_Base_V1beta1_Coin {
    get {return _currentSupply ?? Cosmos_Base_V1beta1_Coin()}
    set {_currentSupply = newValue}
  }
  /// Returns true if `currentSupply` has been explicitly set.
  var hasCurrentSupply: Bool {return self._currentSupply != nil}
  /// Clears the value of `currentSupply`. Subsequent reads from it will return its default value.
  mutating func clearCurrentSupply() {self._currentSupply = nil}

  /// time_limited_current_supply represents the time limited current supply of an asset
  var timeLimitedCurrentSupply: Cosmos_Base_V1beta1_Coin {
    get {return _timeLimitedCurrentSupply ?? Cosmos_Base_V1beta1_Coin()}
    set {_timeLimitedCurrentSupply = newValue}
  }
  /// Returns true if `timeLimitedCurrentSupply` has been explicitly set.
  var hasTimeLimitedCurrentSupply: Bool {return self._timeLimitedCurrentSupply != nil}
  /// Clears the value of `timeLimitedCurrentSupply`. Subsequent reads from it will return its default value.
  mutating func clearTimeLimitedCurrentSupply() {self._timeLimitedCurrentSupply = nil}

  /// time_elapsed represents the time elapsed
  var timeElapsed: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _timeElapsed ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_timeElapsed = newValue}
  }
  /// Returns true if `timeElapsed` has been explicitly set.
  var hasTimeElapsed: Bool {return self._timeElapsed != nil}
  /// Clears the value of `timeElapsed`. Subsequent reads from it will return its default value.
  mutating func clearTimeElapsed() {self._timeElapsed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _incomingSupply: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _outgoingSupply: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _currentSupply: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _timeLimitedCurrentSupply: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _timeElapsed: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.bep3.v1beta1"

extension Kava_Bep3_V1beta1_SwapStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SWAP_STATUS_UNSPECIFIED"),
    1: .same(proto: "SWAP_STATUS_OPEN"),
    2: .same(proto: "SWAP_STATUS_COMPLETED"),
    3: .same(proto: "SWAP_STATUS_EXPIRED"),
  ]
}

extension Kava_Bep3_V1beta1_SwapDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SWAP_DIRECTION_UNSPECIFIED"),
    1: .same(proto: "SWAP_DIRECTION_INCOMING"),
    2: .same(proto: "SWAP_DIRECTION_OUTGOING"),
  ]
}

extension Kava_Bep3_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_params"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.assetParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assetParams, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_Params, rhs: Kava_Bep3_V1beta1_Params) -> Bool {
    if lhs.assetParams != rhs.assetParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_AssetParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssetParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "coin_id"),
    3: .standard(proto: "supply_limit"),
    4: .same(proto: "active"),
    5: .standard(proto: "deputy_address"),
    6: .standard(proto: "fixed_fee"),
    7: .standard(proto: "min_swap_amount"),
    8: .standard(proto: "max_swap_amount"),
    9: .standard(proto: "min_block_lock"),
    10: .standard(proto: "max_block_lock"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.coinID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._supplyLimit) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.active) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.deputyAddress) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fixedFee) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.minSwapAmount) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.maxSwapAmount) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.minBlockLock) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.maxBlockLock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if self.coinID != 0 {
      try visitor.visitSingularInt64Field(value: self.coinID, fieldNumber: 2)
    }
    if let v = self._supplyLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 4)
    }
    if !self.deputyAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.deputyAddress, fieldNumber: 5)
    }
    if !self.fixedFee.isEmpty {
      try visitor.visitSingularStringField(value: self.fixedFee, fieldNumber: 6)
    }
    if !self.minSwapAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.minSwapAmount, fieldNumber: 7)
    }
    if !self.maxSwapAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.maxSwapAmount, fieldNumber: 8)
    }
    if self.minBlockLock != 0 {
      try visitor.visitSingularUInt64Field(value: self.minBlockLock, fieldNumber: 9)
    }
    if self.maxBlockLock != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxBlockLock, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_AssetParam, rhs: Kava_Bep3_V1beta1_AssetParam) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.coinID != rhs.coinID {return false}
    if lhs._supplyLimit != rhs._supplyLimit {return false}
    if lhs.active != rhs.active {return false}
    if lhs.deputyAddress != rhs.deputyAddress {return false}
    if lhs.fixedFee != rhs.fixedFee {return false}
    if lhs.minSwapAmount != rhs.minSwapAmount {return false}
    if lhs.maxSwapAmount != rhs.maxSwapAmount {return false}
    if lhs.minBlockLock != rhs.minBlockLock {return false}
    if lhs.maxBlockLock != rhs.maxBlockLock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_SupplyLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupplyLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "limit"),
    2: .standard(proto: "time_limited"),
    3: .standard(proto: "time_period"),
    4: .standard(proto: "time_based_limit"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.limit) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.timeLimited) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._timePeriod) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.timeBasedLimit) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.limit.isEmpty {
      try visitor.visitSingularStringField(value: self.limit, fieldNumber: 1)
    }
    if self.timeLimited != false {
      try visitor.visitSingularBoolField(value: self.timeLimited, fieldNumber: 2)
    }
    if let v = self._timePeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.timeBasedLimit.isEmpty {
      try visitor.visitSingularStringField(value: self.timeBasedLimit, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_SupplyLimit, rhs: Kava_Bep3_V1beta1_SupplyLimit) -> Bool {
    if lhs.limit != rhs.limit {return false}
    if lhs.timeLimited != rhs.timeLimited {return false}
    if lhs._timePeriod != rhs._timePeriod {return false}
    if lhs.timeBasedLimit != rhs.timeBasedLimit {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_AtomicSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AtomicSwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amount"),
    2: .standard(proto: "random_number_hash"),
    3: .standard(proto: "expire_height"),
    4: .same(proto: "timestamp"),
    5: .same(proto: "sender"),
    6: .same(proto: "recipient"),
    7: .standard(proto: "sender_other_chain"),
    8: .standard(proto: "recipient_other_chain"),
    9: .standard(proto: "closed_block"),
    10: .same(proto: "status"),
    11: .standard(proto: "cross_chain"),
    12: .same(proto: "direction"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.randomNumberHash) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.expireHeight) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.sender) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.recipient) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.senderOtherChain) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.recipientOtherChain) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.closedBlock) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.crossChain) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 1)
    }
    if !self.randomNumberHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.randomNumberHash, fieldNumber: 2)
    }
    if self.expireHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.expireHeight, fieldNumber: 3)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 4)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularBytesField(value: self.sender, fieldNumber: 5)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularBytesField(value: self.recipient, fieldNumber: 6)
    }
    if !self.senderOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.senderOtherChain, fieldNumber: 7)
    }
    if !self.recipientOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientOtherChain, fieldNumber: 8)
    }
    if self.closedBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.closedBlock, fieldNumber: 9)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 10)
    }
    if self.crossChain != false {
      try visitor.visitSingularBoolField(value: self.crossChain, fieldNumber: 11)
    }
    if self.direction != .unspecified {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_AtomicSwap, rhs: Kava_Bep3_V1beta1_AtomicSwap) -> Bool {
    if lhs.amount != rhs.amount {return false}
    if lhs.randomNumberHash != rhs.randomNumberHash {return false}
    if lhs.expireHeight != rhs.expireHeight {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.senderOtherChain != rhs.senderOtherChain {return false}
    if lhs.recipientOtherChain != rhs.recipientOtherChain {return false}
    if lhs.closedBlock != rhs.closedBlock {return false}
    if lhs.status != rhs.status {return false}
    if lhs.crossChain != rhs.crossChain {return false}
    if lhs.direction != rhs.direction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_AssetSupply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AssetSupply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "incoming_supply"),
    2: .standard(proto: "outgoing_supply"),
    3: .standard(proto: "current_supply"),
    4: .standard(proto: "time_limited_current_supply"),
    5: .standard(proto: "time_elapsed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._incomingSupply) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._outgoingSupply) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._currentSupply) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timeLimitedCurrentSupply) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._timeElapsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._incomingSupply {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._outgoingSupply {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._currentSupply {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._timeLimitedCurrentSupply {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._timeElapsed {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_AssetSupply, rhs: Kava_Bep3_V1beta1_AssetSupply) -> Bool {
    if lhs._incomingSupply != rhs._incomingSupply {return false}
    if lhs._outgoingSupply != rhs._outgoingSupply {return false}
    if lhs._currentSupply != rhs._currentSupply {return false}
    if lhs._timeLimitedCurrentSupply != rhs._timeLimitedCurrentSupply {return false}
    if lhs._timeElapsed != rhs._timeElapsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
