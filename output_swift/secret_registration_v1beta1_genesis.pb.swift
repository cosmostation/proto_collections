// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: secret/registration/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Secret_Registration_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var registration: [Secret_Registration_V1beta1_RegistrationNodeInfo] = []

  var nodeExchMasterCertificate: Secret_Registration_V1beta1_MasterCertificate {
    get {return _nodeExchMasterCertificate ?? Secret_Registration_V1beta1_MasterCertificate()}
    set {_nodeExchMasterCertificate = newValue}
  }
  /// Returns true if `nodeExchMasterCertificate` has been explicitly set.
  var hasNodeExchMasterCertificate: Bool {return self._nodeExchMasterCertificate != nil}
  /// Clears the value of `nodeExchMasterCertificate`. Subsequent reads from it will return its default value.
  mutating func clearNodeExchMasterCertificate() {self._nodeExchMasterCertificate = nil}

  var ioMasterCertificate: Secret_Registration_V1beta1_MasterCertificate {
    get {return _ioMasterCertificate ?? Secret_Registration_V1beta1_MasterCertificate()}
    set {_ioMasterCertificate = newValue}
  }
  /// Returns true if `ioMasterCertificate` has been explicitly set.
  var hasIoMasterCertificate: Bool {return self._ioMasterCertificate != nil}
  /// Clears the value of `ioMasterCertificate`. Subsequent reads from it will return its default value.
  mutating func clearIoMasterCertificate() {self._ioMasterCertificate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _nodeExchMasterCertificate: Secret_Registration_V1beta1_MasterCertificate? = nil
  fileprivate var _ioMasterCertificate: Secret_Registration_V1beta1_MasterCertificate? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "secret.registration.v1beta1"

extension Secret_Registration_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "registration"),
    2: .standard(proto: "node_exch_master_certificate"),
    3: .standard(proto: "io_master_certificate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.registration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._nodeExchMasterCertificate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._ioMasterCertificate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.registration.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.registration, fieldNumber: 1)
    }
    if let v = self._nodeExchMasterCertificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._ioMasterCertificate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Secret_Registration_V1beta1_GenesisState, rhs: Secret_Registration_V1beta1_GenesisState) -> Bool {
    if lhs.registration != rhs.registration {return false}
    if lhs._nodeExchMasterCertificate != rhs._nodeExchMasterCertificate {return false}
    if lhs._ioMasterCertificate != rhs._ioMasterCertificate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
