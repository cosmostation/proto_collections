//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tendermint/liquidity/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC query service for the liquidity module.
///
/// Usage: instantiate `Tendermint_Liquidity_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Tendermint_Liquidity_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Tendermint_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func liquidityPools(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse>

  func liquidityPool(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  func liquidityPoolByPoolCoinDenom(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  func liquidityPoolByReserveAcc(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  func liquidityPoolBatch(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse>

  func poolBatchSwapMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse>

  func poolBatchSwapMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse>

  func poolBatchDepositMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse>

  func poolBatchDepositMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse>

  func poolBatchWithdrawMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse>

  func poolBatchWithdrawMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse>

  func params(
    _ request: Tendermint_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryParamsRequest, Tendermint_Liquidity_V1beta1_QueryParamsResponse>
}

extension Tendermint_Liquidity_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "tendermint.liquidity.v1beta1.Query"
  }

  /// Get existing liquidity pools.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPools(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/LiquidityPools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPoolsInterceptors() ?? []
    )
  }

  /// Get specific liquidity pool.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPool(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/LiquidityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPoolInterceptors() ?? []
    )
  }

  /// Get specific liquidity pool corresponding to the pool_coin_denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPoolByPoolCoinDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPoolByPoolCoinDenom(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/LiquidityPoolByPoolCoinDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPoolByPoolCoinDenomInterceptors() ?? []
    )
  }

  /// Get specific liquidity pool corresponding to the reserve account.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPoolByReserveAcc.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPoolByReserveAcc(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/LiquidityPoolByReserveAcc",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPoolByReserveAccInterceptors() ?? []
    )
  }

  /// Get the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to LiquidityPoolBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func liquidityPoolBatch(
    _ request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/LiquidityPoolBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLiquidityPoolBatchInterceptors() ?? []
    )
  }

  /// Get all swap messages in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchSwapMsgs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchSwapMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchSwapMsgs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchSwapMsgsInterceptors() ?? []
    )
  }

  /// Get a specific swap message in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchSwapMsg.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchSwapMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchSwapMsg",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchSwapMsgInterceptors() ?? []
    )
  }

  /// Get all deposit messages in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchDepositMsgs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchDepositMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchDepositMsgs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchDepositMsgsInterceptors() ?? []
    )
  }

  /// Get a specific deposit message in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchDepositMsg.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchDepositMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchDepositMsg",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchDepositMsgInterceptors() ?? []
    )
  }

  /// Get all withdraw messages in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchWithdrawMsgs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchWithdrawMsgs(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchWithdrawMsgs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchWithdrawMsgsInterceptors() ?? []
    )
  }

  /// Get a specific withdraw message in the pool's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolBatchWithdrawMsg.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolBatchWithdrawMsg(
    _ request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/PoolBatchWithdrawMsg",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolBatchWithdrawMsgInterceptors() ?? []
    )
  }

  /// Get all parameters of the liquidity module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Tendermint_Liquidity_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Tendermint_Liquidity_V1beta1_QueryParamsRequest, Tendermint_Liquidity_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/tendermint.liquidity.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Tendermint_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'liquidityPools'.
  func makeLiquidityPoolsInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityPool'.
  func makeLiquidityPoolInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityPoolByPoolCoinDenom'.
  func makeLiquidityPoolByPoolCoinDenomInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityPoolByReserveAcc'.
  func makeLiquidityPoolByReserveAccInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'liquidityPoolBatch'.
  func makeLiquidityPoolBatchInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchSwapMsgs'.
  func makePoolBatchSwapMsgsInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchSwapMsg'.
  func makePoolBatchSwapMsgInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchDepositMsgs'.
  func makePoolBatchDepositMsgsInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchDepositMsg'.
  func makePoolBatchDepositMsgInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchWithdrawMsgs'.
  func makePoolBatchWithdrawMsgsInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolBatchWithdrawMsg'.
  func makePoolBatchWithdrawMsgInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Tendermint_Liquidity_V1beta1_QueryParamsRequest, Tendermint_Liquidity_V1beta1_QueryParamsResponse>]
}

internal final class Tendermint_Liquidity_V1beta1_QueryClient: Tendermint_Liquidity_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Tendermint_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the tendermint.liquidity.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Tendermint_Liquidity_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC query service for the liquidity module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Tendermint_Liquidity_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Tendermint_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Get existing liquidity pools.
  func liquidityPools(request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse>

  /// Get specific liquidity pool.
  func liquidityPool(request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  /// Get specific liquidity pool corresponding to the pool_coin_denom.
  func liquidityPoolByPoolCoinDenom(request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  /// Get specific liquidity pool corresponding to the reserve account.
  func liquidityPoolByReserveAcc(request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>

  /// Get the pool's current batch.
  func liquidityPoolBatch(request: Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse>

  /// Get all swap messages in the pool's current batch.
  func poolBatchSwapMsgs(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse>

  /// Get a specific swap message in the pool's current batch.
  func poolBatchSwapMsg(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse>

  /// Get all deposit messages in the pool's current batch.
  func poolBatchDepositMsgs(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse>

  /// Get a specific deposit message in the pool's current batch.
  func poolBatchDepositMsg(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse>

  /// Get all withdraw messages in the pool's current batch.
  func poolBatchWithdrawMsgs(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse>

  /// Get a specific withdraw message in the pool's current batch.
  func poolBatchWithdrawMsg(request: Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse>

  /// Get all parameters of the liquidity module.
  func params(request: Tendermint_Liquidity_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Tendermint_Liquidity_V1beta1_QueryParamsResponse>
}

extension Tendermint_Liquidity_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "tendermint.liquidity.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LiquidityPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse>(),
        interceptors: self.interceptors?.makeLiquidityPoolsInterceptors() ?? [],
        userFunction: self.liquidityPools(request:context:)
      )

    case "LiquidityPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>(),
        interceptors: self.interceptors?.makeLiquidityPoolInterceptors() ?? [],
        userFunction: self.liquidityPool(request:context:)
      )

    case "LiquidityPoolByPoolCoinDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>(),
        interceptors: self.interceptors?.makeLiquidityPoolByPoolCoinDenomInterceptors() ?? [],
        userFunction: self.liquidityPoolByPoolCoinDenom(request:context:)
      )

    case "LiquidityPoolByReserveAcc":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>(),
        interceptors: self.interceptors?.makeLiquidityPoolByReserveAccInterceptors() ?? [],
        userFunction: self.liquidityPoolByReserveAcc(request:context:)
      )

    case "LiquidityPoolBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse>(),
        interceptors: self.interceptors?.makeLiquidityPoolBatchInterceptors() ?? [],
        userFunction: self.liquidityPoolBatch(request:context:)
      )

    case "PoolBatchSwapMsgs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse>(),
        interceptors: self.interceptors?.makePoolBatchSwapMsgsInterceptors() ?? [],
        userFunction: self.poolBatchSwapMsgs(request:context:)
      )

    case "PoolBatchSwapMsg":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse>(),
        interceptors: self.interceptors?.makePoolBatchSwapMsgInterceptors() ?? [],
        userFunction: self.poolBatchSwapMsg(request:context:)
      )

    case "PoolBatchDepositMsgs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse>(),
        interceptors: self.interceptors?.makePoolBatchDepositMsgsInterceptors() ?? [],
        userFunction: self.poolBatchDepositMsgs(request:context:)
      )

    case "PoolBatchDepositMsg":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse>(),
        interceptors: self.interceptors?.makePoolBatchDepositMsgInterceptors() ?? [],
        userFunction: self.poolBatchDepositMsg(request:context:)
      )

    case "PoolBatchWithdrawMsgs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse>(),
        interceptors: self.interceptors?.makePoolBatchWithdrawMsgsInterceptors() ?? [],
        userFunction: self.poolBatchWithdrawMsgs(request:context:)
      )

    case "PoolBatchWithdrawMsg":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse>(),
        interceptors: self.interceptors?.makePoolBatchWithdrawMsgInterceptors() ?? [],
        userFunction: self.poolBatchWithdrawMsg(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Tendermint_Liquidity_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Tendermint_Liquidity_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Tendermint_Liquidity_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'liquidityPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPoolsInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPoolInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityPoolByPoolCoinDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPoolByPoolCoinDenomInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByPoolCoinDenomRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityPoolByReserveAcc'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPoolByReserveAccInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolByReserveAccRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolResponse>]

  /// - Returns: Interceptors to use when handling 'liquidityPoolBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLiquidityPoolBatchInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchRequest, Tendermint_Liquidity_V1beta1_QueryLiquidityPoolBatchResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchSwapMsgs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchSwapMsgsInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgsResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchSwapMsg'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchSwapMsgInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchSwapMsgResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchDepositMsgs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchDepositMsgsInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgsResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchDepositMsg'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchDepositMsgInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchDepositMsgResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchWithdrawMsgs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchWithdrawMsgsInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgsResponse>]

  /// - Returns: Interceptors to use when handling 'poolBatchWithdrawMsg'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolBatchWithdrawMsgInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgRequest, Tendermint_Liquidity_V1beta1_QueryPoolBatchWithdrawMsgResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Tendermint_Liquidity_V1beta1_QueryParamsRequest, Tendermint_Liquidity_V1beta1_QueryParamsResponse>]
}
