// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: iscn/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Likechain_Iscn_IscnRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Using camelCases to make the record JSON in tx more like general JSON documents
  var recordNotes: String = String()

  var contentFingerprints: [String] = []

  /// Here, `IscnInput` is JSON encoded bytes
  var stakeholders: [Data] = []

  var contentMetadata: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Likechain_Iscn_MsgCreateIscnRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var record: Likechain_Iscn_IscnRecord {
    get {return _record ?? Likechain_Iscn_IscnRecord()}
    set {_record = newValue}
  }
  /// Returns true if `record` has been explicitly set.
  var hasRecord: Bool {return self._record != nil}
  /// Clears the value of `record`. Subsequent reads from it will return its default value.
  mutating func clearRecord() {self._record = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _record: Likechain_Iscn_IscnRecord? = nil
}

struct Likechain_Iscn_MsgCreateIscnRecordResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iscnID: String = String()

  var recordIpld: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Likechain_Iscn_MsgUpdateIscnRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var iscnID: String = String()

  var record: Likechain_Iscn_IscnRecord {
    get {return _record ?? Likechain_Iscn_IscnRecord()}
    set {_record = newValue}
  }
  /// Returns true if `record` has been explicitly set.
  var hasRecord: Bool {return self._record != nil}
  /// Clears the value of `record`. Subsequent reads from it will return its default value.
  mutating func clearRecord() {self._record = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _record: Likechain_Iscn_IscnRecord? = nil
}

struct Likechain_Iscn_MsgUpdateIscnRecordResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iscnID: String = String()

  var recordIpld: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Likechain_Iscn_MsgChangeIscnRecordOwnership {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var iscnID: String = String()

  var newOwner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Likechain_Iscn_MsgChangeIscnRecordOwnershipResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "likechain.iscn"

extension Likechain_Iscn_IscnRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IscnRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recordNotes"),
    2: .same(proto: "contentFingerprints"),
    3: .same(proto: "stakeholders"),
    4: .same(proto: "contentMetadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.recordNotes) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.contentFingerprints) }()
      case 3: try { try decoder.decodeRepeatedBytesField(value: &self.stakeholders) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.contentMetadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.recordNotes.isEmpty {
      try visitor.visitSingularStringField(value: self.recordNotes, fieldNumber: 1)
    }
    if !self.contentFingerprints.isEmpty {
      try visitor.visitRepeatedStringField(value: self.contentFingerprints, fieldNumber: 2)
    }
    if !self.stakeholders.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.stakeholders, fieldNumber: 3)
    }
    if !self.contentMetadata.isEmpty {
      try visitor.visitSingularBytesField(value: self.contentMetadata, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_IscnRecord, rhs: Likechain_Iscn_IscnRecord) -> Bool {
    if lhs.recordNotes != rhs.recordNotes {return false}
    if lhs.contentFingerprints != rhs.contentFingerprints {return false}
    if lhs.stakeholders != rhs.stakeholders {return false}
    if lhs.contentMetadata != rhs.contentMetadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgCreateIscnRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateIscnRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "record"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._record) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgCreateIscnRecord, rhs: Likechain_Iscn_MsgCreateIscnRecord) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs._record != rhs._record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgCreateIscnRecordResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateIscnRecordResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iscn_id"),
    2: .standard(proto: "record_ipld"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iscnID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recordIpld) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iscnID.isEmpty {
      try visitor.visitSingularStringField(value: self.iscnID, fieldNumber: 1)
    }
    if !self.recordIpld.isEmpty {
      try visitor.visitSingularStringField(value: self.recordIpld, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgCreateIscnRecordResponse, rhs: Likechain_Iscn_MsgCreateIscnRecordResponse) -> Bool {
    if lhs.iscnID != rhs.iscnID {return false}
    if lhs.recordIpld != rhs.recordIpld {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgUpdateIscnRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateIscnRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "iscn_id"),
    3: .same(proto: "record"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.iscnID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._record) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.iscnID.isEmpty {
      try visitor.visitSingularStringField(value: self.iscnID, fieldNumber: 2)
    }
    if let v = self._record {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgUpdateIscnRecord, rhs: Likechain_Iscn_MsgUpdateIscnRecord) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.iscnID != rhs.iscnID {return false}
    if lhs._record != rhs._record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgUpdateIscnRecordResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateIscnRecordResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iscn_id"),
    2: .standard(proto: "record_ipld"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.iscnID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recordIpld) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.iscnID.isEmpty {
      try visitor.visitSingularStringField(value: self.iscnID, fieldNumber: 1)
    }
    if !self.recordIpld.isEmpty {
      try visitor.visitSingularStringField(value: self.recordIpld, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgUpdateIscnRecordResponse, rhs: Likechain_Iscn_MsgUpdateIscnRecordResponse) -> Bool {
    if lhs.iscnID != rhs.iscnID {return false}
    if lhs.recordIpld != rhs.recordIpld {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgChangeIscnRecordOwnership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChangeIscnRecordOwnership"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "iscn_id"),
    3: .standard(proto: "new_owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.iscnID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newOwner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.iscnID.isEmpty {
      try visitor.visitSingularStringField(value: self.iscnID, fieldNumber: 2)
    }
    if !self.newOwner.isEmpty {
      try visitor.visitSingularStringField(value: self.newOwner, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgChangeIscnRecordOwnership, rhs: Likechain_Iscn_MsgChangeIscnRecordOwnership) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.iscnID != rhs.iscnID {return false}
    if lhs.newOwner != rhs.newOwner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_MsgChangeIscnRecordOwnershipResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChangeIscnRecordOwnershipResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_MsgChangeIscnRecordOwnershipResponse, rhs: Likechain_Iscn_MsgChangeIscnRecordOwnershipResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
