//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: comdex/oracle/v1beta1/querier.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Comdex_Oracle_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Comdex_Oracle_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Comdex_Oracle_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func queryMarkets(
    _ request: Comdex_Oracle_V1beta1_QueryMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryMarketsRequest, Comdex_Oracle_V1beta1_QueryMarketsResponse>

  func queryMarket(
    _ request: Comdex_Oracle_V1beta1_QueryMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryMarketRequest, Comdex_Oracle_V1beta1_QueryMarketResponse>

  func queryParams(
    _ request: Comdex_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryParamsRequest, Comdex_Oracle_V1beta1_QueryParamsResponse>
}

extension Comdex_Oracle_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "comdex.oracle.v1beta1.QueryService"
  }

  /// Unary call to QueryMarkets
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryMarkets(
    _ request: Comdex_Oracle_V1beta1_QueryMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryMarketsRequest, Comdex_Oracle_V1beta1_QueryMarketsResponse> {
    return self.makeUnaryCall(
      path: "/comdex.oracle.v1beta1.QueryService/QueryMarkets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMarketsInterceptors() ?? []
    )
  }

  /// Unary call to QueryMarket
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryMarket(
    _ request: Comdex_Oracle_V1beta1_QueryMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryMarketRequest, Comdex_Oracle_V1beta1_QueryMarketResponse> {
    return self.makeUnaryCall(
      path: "/comdex.oracle.v1beta1.QueryService/QueryMarket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryMarketInterceptors() ?? []
    )
  }

  /// Unary call to QueryParams
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryParams(
    _ request: Comdex_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Oracle_V1beta1_QueryParamsRequest, Comdex_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/comdex.oracle.v1beta1.QueryService/QueryParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? []
    )
  }
}

internal protocol Comdex_Oracle_V1beta1_QueryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'queryMarkets'.
  func makeQueryMarketsInterceptors() -> [ClientInterceptor<Comdex_Oracle_V1beta1_QueryMarketsRequest, Comdex_Oracle_V1beta1_QueryMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryMarket'.
  func makeQueryMarketInterceptors() -> [ClientInterceptor<Comdex_Oracle_V1beta1_QueryMarketRequest, Comdex_Oracle_V1beta1_QueryMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'queryParams'.
  func makeQueryParamsInterceptors() -> [ClientInterceptor<Comdex_Oracle_V1beta1_QueryParamsRequest, Comdex_Oracle_V1beta1_QueryParamsResponse>]
}

internal final class Comdex_Oracle_V1beta1_QueryServiceClient: Comdex_Oracle_V1beta1_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Oracle_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the comdex.oracle.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Oracle_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Comdex_Oracle_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Comdex_Oracle_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryMarkets(request: Comdex_Oracle_V1beta1_QueryMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Oracle_V1beta1_QueryMarketsResponse>

  func queryMarket(request: Comdex_Oracle_V1beta1_QueryMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Oracle_V1beta1_QueryMarketResponse>

  func queryParams(request: Comdex_Oracle_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Oracle_V1beta1_QueryParamsResponse>
}

extension Comdex_Oracle_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring { return "comdex.oracle.v1beta1.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Oracle_V1beta1_QueryMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Oracle_V1beta1_QueryMarketsResponse>(),
        interceptors: self.interceptors?.makeQueryMarketsInterceptors() ?? [],
        userFunction: self.queryMarkets(request:context:)
      )

    case "QueryMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Oracle_V1beta1_QueryMarketRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Oracle_V1beta1_QueryMarketResponse>(),
        interceptors: self.interceptors?.makeQueryMarketInterceptors() ?? [],
        userFunction: self.queryMarket(request:context:)
      )

    case "QueryParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeQueryParamsInterceptors() ?? [],
        userFunction: self.queryParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Comdex_Oracle_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryMarketsInterceptors() -> [ServerInterceptor<Comdex_Oracle_V1beta1_QueryMarketsRequest, Comdex_Oracle_V1beta1_QueryMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'queryMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryMarketInterceptors() -> [ServerInterceptor<Comdex_Oracle_V1beta1_QueryMarketRequest, Comdex_Oracle_V1beta1_QueryMarketResponse>]

  /// - Returns: Interceptors to use when handling 'queryParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryParamsInterceptors() -> [ServerInterceptor<Comdex_Oracle_V1beta1_QueryParamsRequest, Comdex_Oracle_V1beta1_QueryParamsResponse>]
}
