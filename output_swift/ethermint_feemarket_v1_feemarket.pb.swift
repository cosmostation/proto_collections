// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethermint/feemarket/v1/feemarket.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the EVM module parameters
struct Ethermint_Feemarket_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// no base fee forces the EIP-1559 base fee to 0 (needed for 0 price calls)
  var noBaseFee: Bool = false

  /// base fee change denominator bounds the amount the base fee can change
  /// between blocks.
  var baseFeeChangeDenominator: UInt32 = 0

  /// elasticity multiplier bounds the maximum gas limit an EIP-1559 block may
  /// have.
  var elasticityMultiplier: UInt32 = 0

  /// initial base fee for EIP-1559 blocks.
  var initialBaseFee: Int64 = 0

  /// height at which the base fee calculation is enabled.
  var enableHeight: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ethermint.feemarket.v1"

extension Ethermint_Feemarket_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "no_base_fee"),
    2: .standard(proto: "base_fee_change_denominator"),
    3: .standard(proto: "elasticity_multiplier"),
    4: .standard(proto: "initial_base_fee"),
    5: .standard(proto: "enable_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.noBaseFee) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.baseFeeChangeDenominator) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.elasticityMultiplier) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.initialBaseFee) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.enableHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.noBaseFee != false {
      try visitor.visitSingularBoolField(value: self.noBaseFee, fieldNumber: 1)
    }
    if self.baseFeeChangeDenominator != 0 {
      try visitor.visitSingularUInt32Field(value: self.baseFeeChangeDenominator, fieldNumber: 2)
    }
    if self.elasticityMultiplier != 0 {
      try visitor.visitSingularUInt32Field(value: self.elasticityMultiplier, fieldNumber: 3)
    }
    if self.initialBaseFee != 0 {
      try visitor.visitSingularInt64Field(value: self.initialBaseFee, fieldNumber: 4)
    }
    if self.enableHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.enableHeight, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Feemarket_V1_Params, rhs: Ethermint_Feemarket_V1_Params) -> Bool {
    if lhs.noBaseFee != rhs.noBaseFee {return false}
    if lhs.baseFeeChangeDenominator != rhs.baseFeeChangeDenominator {return false}
    if lhs.elasticityMultiplier != rhs.elasticityMultiplier {return false}
    if lhs.initialBaseFee != rhs.initialBaseFee {return false}
    if lhs.enableHeight != rhs.enableHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
