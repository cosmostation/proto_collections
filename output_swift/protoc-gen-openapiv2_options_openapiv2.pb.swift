// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protoc-gen-openapiv2/options/openapiv2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Scheme describes the schemes supported by the OpenAPI Swagger
/// and Operation objects.
enum Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case http // = 1
  case https // = 2
  case ws // = 3
  case wss // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .http
    case 2: self = .https
    case 3: self = .ws
    case 4: self = .wss
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .http: return 1
    case .https: return 2
    case .ws: return 3
    case .wss: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme] = [
    .unknown,
    .http,
    .https,
    .ws,
    .wss,
  ]
}

#endif  // swift(>=4.2)

/// `Swagger` is a representation of OpenAPI v2 specification's Swagger object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#swaggerObject
///
/// Example:
///
///  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
///    info: {
///      title: "Echo API";
///      version: "1.0";
///      description: ";
///      contact: {
///        name: "gRPC-Gateway project";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway";
///        email: "none@example.com";
///      };
///      license: {
///        name: "BSD 3-Clause License";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
///      };
///    };
///    schemes: HTTPS;
///    consumes: "application/json";
///    produces: "application/json";
///  };
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Swagger {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the OpenAPI Specification version being used. It can be
  /// used by the OpenAPI UI and other clients to interpret the API listing. The 
  /// value MUST be "2.0".
  var swagger: String {
    get {return _storage._swagger}
    set {_uniqueStorage()._swagger = newValue}
  }

  /// Provides metadata about the API. The metadata can be used by the 
  /// clients if needed.
  var info: Grpc_Gateway_ProtocGenOpenapiv2_Options_Info {
    get {return _storage._info ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_Info()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_uniqueStorage()._info = nil}

  /// The host (name or ip) serving the API. This MUST be the host only and does 
  /// not include the scheme nor sub-paths. It MAY include a port. If the host is
  /// not included, the host serving the documentation is to be used (including
  /// the port). The host does not support path templating.
  var host: String {
    get {return _storage._host}
    set {_uniqueStorage()._host = newValue}
  }

  /// The base path on which the API is served, which is relative to the host. If
  /// it is not included, the API is served directly under the host. The value 
  /// MUST start with a leading slash (/). The basePath does not support path
  /// templating.
  /// Note that using `base_path` does not change the endpoint paths that are 
  /// generated in the resulting OpenAPI file. If you wish to use `base_path`
  /// with relatively generated OpenAPI paths, the `base_path` prefix must be 
  /// manually removed from your `google.api.http` paths and your code changed to 
  /// serve the API from the `base_path`.
  var basePath: String {
    get {return _storage._basePath}
    set {_uniqueStorage()._basePath = newValue}
  }

  /// The transfer protocol of the API. Values MUST be from the list: "http",
  /// "https", "ws", "wss". If the schemes is not included, the default scheme to
  /// be used is the one used to access the OpenAPI definition itself.
  var schemes: [Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme] {
    get {return _storage._schemes}
    set {_uniqueStorage()._schemes = newValue}
  }

  /// A list of MIME types the APIs can consume. This is global to all APIs but 
  /// can be overridden on specific API calls. Value MUST be as described under
  /// Mime Types.
  var consumes: [String] {
    get {return _storage._consumes}
    set {_uniqueStorage()._consumes = newValue}
  }

  /// A list of MIME types the APIs can produce. This is global to all APIs but
  /// can be overridden on specific API calls. Value MUST be as described under
  /// Mime Types.
  var produces: [String] {
    get {return _storage._produces}
    set {_uniqueStorage()._produces = newValue}
  }

  /// An object to hold responses that can be used across operations. This
  /// property does not define global responses for all operations.
  var responses: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response> {
    get {return _storage._responses}
    set {_uniqueStorage()._responses = newValue}
  }

  /// Security scheme definitions that can be used across the specification.
  var securityDefinitions: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions {
    get {return _storage._securityDefinitions ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions()}
    set {_uniqueStorage()._securityDefinitions = newValue}
  }
  /// Returns true if `securityDefinitions` has been explicitly set.
  var hasSecurityDefinitions: Bool {return _storage._securityDefinitions != nil}
  /// Clears the value of `securityDefinitions`. Subsequent reads from it will return its default value.
  mutating func clearSecurityDefinitions() {_uniqueStorage()._securityDefinitions = nil}

  /// A declaration of which security schemes are applied for the API as a whole.
  /// The list of values describes alternative security schemes that can be used 
  /// (that is, there is a logical OR between the security requirements). 
  /// Individual operations can override this definition.
  var security: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement] {
    get {return _storage._security}
    set {_uniqueStorage()._security = newValue}
  }

  /// Additional external documentation.
  var externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation {
    get {return _storage._externalDocs ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  mutating func clearExternalDocs() {_uniqueStorage()._externalDocs = nil}

  var extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> {
    get {return _storage._extensions}
    set {_uniqueStorage()._extensions = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// `Operation` is a representation of OpenAPI v2 specification's Operation object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#operationObject
///
/// Example:
///
///  service EchoService {
///    rpc Echo(SimpleMessage) returns (SimpleMessage) {
///      option (google.api.http) = {
///        get: "/v1/example/echo/{id}"
///      };
///
///      option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
///        summary: "Get a message.";
///        operation_id: "getMessage";
///        tags: "echo";
///        responses: {
///          key: "200"
///            value: {
///            description: "OK";
///          }
///        }
///      };
///    }
///  }
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Operation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A list of tags for API documentation control. Tags can be used for logical
  /// grouping of operations by resources or any other qualifier.
  var tags: [String] = []

  /// A short summary of what the operation does. For maximum readability in the
  /// swagger-ui, this field SHOULD be less than 120 characters.
  var summary: String = String()

  /// A verbose explanation of the operation behavior. GFM syntax can be used for
  /// rich text representation.
  var description_p: String = String()

  /// Additional external documentation for this operation.
  var externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation {
    get {return _externalDocs ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation()}
    set {_externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  var hasExternalDocs: Bool {return self._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  mutating func clearExternalDocs() {self._externalDocs = nil}

  /// Unique string used to identify the operation. The id MUST be unique among
  /// all operations described in the API. Tools and libraries MAY use the
  /// operationId to uniquely identify an operation, therefore, it is recommended
  /// to follow common programming naming conventions.
  var operationID: String = String()

  /// A list of MIME types the operation can consume. This overrides the consumes
  /// definition at the OpenAPI Object. An empty value MAY be used to clear the
  /// global definition. Value MUST be as described under Mime Types.
  var consumes: [String] = []

  /// A list of MIME types the operation can produce. This overrides the produces
  /// definition at the OpenAPI Object. An empty value MAY be used to clear the
  /// global definition. Value MUST be as described under Mime Types.
  var produces: [String] = []

  /// The list of possible responses as they are returned from executing this
  /// operation.
  var responses: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response> = [:]

  /// The transfer protocol for the operation. Values MUST be from the list:
  /// "http", "https", "ws", "wss". The value overrides the OpenAPI Object
  /// schemes definition.
  var schemes: [Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme] = []

  /// Declares this operation to be deprecated. Usage of the declared operation
  /// should be refrained. Default value is false.
  var deprecated: Bool = false

  /// A declaration of which security schemes are applied for this operation. The
  /// list of values describes alternative security schemes that can be used
  /// (that is, there is a logical OR between the security requirements). This
  /// definition overrides any declared top-level security. To remove a top-level
  /// security declaration, an empty array can be used.
  var security: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement] = []

  var extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation? = nil
}

/// `Header` is a representation of OpenAPI v2 specification's Header object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#headerObject
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Header {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// `Description` is a short description of the header.
  var description_p: String = String()

  /// The type of the object. The value MUST be one of "string", "number", "integer", or "boolean". The "array" type is not supported.
  var type: String = String()

  /// `Format` The extending format for the previously mentioned type.
  var format: String = String()

  /// `Default` Declares the value of the header that the server will use if none is provided.
  /// See: https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2.
  /// Unlike JSON Schema this value MUST conform to the defined type for the header.
  var `default`: String = String()

  /// 'Pattern' See https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3.
  var pattern: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `Response` is a representation of OpenAPI v2 specification's Response object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#responseObject
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// `Description` is a short description of the response.
  /// GFM syntax can be used for rich text representation.
  var description_p: String = String()

  /// `Schema` optionally defines the structure of the response.
  /// If `Schema` is not provided, it means there is no content to the response.
  var schema: Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema {
    get {return _schema ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema()}
    set {_schema = newValue}
  }
  /// Returns true if `schema` has been explicitly set.
  var hasSchema: Bool {return self._schema != nil}
  /// Clears the value of `schema`. Subsequent reads from it will return its default value.
  mutating func clearSchema() {self._schema = nil}

  /// `Headers` A list of headers that are sent with the response.
  /// `Header` name is expected to be a string in the canonical format of the MIME header key
  /// See: https://golang.org/pkg/net/textproto/#CanonicalMIMEHeaderKey
  var headers: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_Header> = [:]

  /// `Examples` gives per-mimetype response examples.
  /// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#example-object
  var examples: Dictionary<String,String> = [:]

  var extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _schema: Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema? = nil
}

/// `Info` is a representation of OpenAPI v2 specification's Info object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#infoObject
///
/// Example:
///
///  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
///    info: {
///      title: "Echo API";
///      version: "1.0";
///      description: ";
///      contact: {
///        name: "gRPC-Gateway project";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway";
///        email: "none@example.com";
///      };
///      license: {
///        name: "BSD 3-Clause License";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
///      };
///    };
///    ...
///  };
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Info {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The title of the application.
  var title: String = String()

  /// A short description of the application. GFM syntax can be used for rich
  /// text representation.
  var description_p: String = String()

  /// The Terms of Service for the API.
  var termsOfService: String = String()

  /// The contact information for the exposed API.
  var contact: Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact {
    get {return _contact ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact()}
    set {_contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  var hasContact: Bool {return self._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  mutating func clearContact() {self._contact = nil}

  /// The license information for the exposed API.
  var license: Grpc_Gateway_ProtocGenOpenapiv2_Options_License {
    get {return _license ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_License()}
    set {_license = newValue}
  }
  /// Returns true if `license` has been explicitly set.
  var hasLicense: Bool {return self._license != nil}
  /// Clears the value of `license`. Subsequent reads from it will return its default value.
  mutating func clearLicense() {self._license = nil}

  /// Provides the version of the application API (not to be confused
  /// with the specification version).
  var version: String = String()

  var extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contact: Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact? = nil
  fileprivate var _license: Grpc_Gateway_ProtocGenOpenapiv2_Options_License? = nil
}

/// `Contact` is a representation of OpenAPI v2 specification's Contact object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#contactObject
///
/// Example:
///
///  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
///    info: {
///      ...
///      contact: {
///        name: "gRPC-Gateway project";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway";
///        email: "none@example.com";
///      };
///      ...
///    };
///    ...
///  };
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The identifying name of the contact person/organization.
  var name: String = String()

  /// The URL pointing to the contact information. MUST be in the format of a
  /// URL.
  var url: String = String()

  /// The email address of the contact person/organization. MUST be in the format
  /// of an email address.
  var email: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `License` is a representation of OpenAPI v2 specification's License object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#licenseObject
///
/// Example:
///
///  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
///    info: {
///      ...
///      license: {
///        name: "BSD 3-Clause License";
///        url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/master/LICENSE.txt";
///      };
///      ...
///    };
///    ...
///  };
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_License {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The license name used for the API.
  var name: String = String()

  /// A URL to the license used for the API. MUST be in the format of a URL.
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `ExternalDocumentation` is a representation of OpenAPI v2 specification's
/// ExternalDocumentation object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#externalDocumentationObject
///
/// Example:
///
///  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
///    ...
///    external_docs: {
///      description: "More about gRPC-Gateway";
///      url: "https://github.com/grpc-ecosystem/grpc-gateway";
///    }
///    ...
///  };
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A short description of the target documentation. GFM syntax can be used for
  /// rich text representation.
  var description_p: String = String()

  /// The URL for the target documentation. Value MUST be in the format
  /// of a URL.
  var url: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `Schema` is a representation of OpenAPI v2 specification's Schema object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var jsonSchema: Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema {
    get {return _jsonSchema ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema()}
    set {_jsonSchema = newValue}
  }
  /// Returns true if `jsonSchema` has been explicitly set.
  var hasJsonSchema: Bool {return self._jsonSchema != nil}
  /// Clears the value of `jsonSchema`. Subsequent reads from it will return its default value.
  mutating func clearJsonSchema() {self._jsonSchema = nil}

  /// Adds support for polymorphism. The discriminator is the schema property
  /// name that is used to differentiate between other schema that inherit this
  /// schema. The property name used MUST be defined at this schema and it MUST
  /// be in the required property list. When used, the value MUST be the name of
  /// this schema or any schema that inherits it.
  var discriminator: String = String()

  /// Relevant only for Schema "properties" definitions. Declares the property as
  /// "read only". This means that it MAY be sent as part of a response but MUST
  /// NOT be sent as part of the request. Properties marked as readOnly being
  /// true SHOULD NOT be in the required list of the defined schema. Default
  /// value is false.
  var readOnly: Bool = false

  /// Additional external documentation for this schema.
  var externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation {
    get {return _externalDocs ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation()}
    set {_externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  var hasExternalDocs: Bool {return self._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  mutating func clearExternalDocs() {self._externalDocs = nil}

  /// A free-form property to include an example of an instance for this schema in JSON.
  /// This is copied verbatim to the output.
  var example: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _jsonSchema: Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema? = nil
  fileprivate var _externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation? = nil
}

/// `JSONSchema` represents properties from JSON Schema taken, and as used, in
/// the OpenAPI v2 spec.
///
/// This includes changes made by OpenAPI v2.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
///
/// See also: https://cswr.github.io/JsonSchema/spec/basic_types/,
/// https://github.com/json-schema-org/json-schema-spec/blob/master/schema.json
///
/// Example:
///
///  message SimpleMessage {
///    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
///      json_schema: {
///        title: "SimpleMessage"
///        description: "A simple message."
///        required: ["id"]
///      }
///    };
///
///    // Id represents the message identifier.
///    string id = 1; [
///        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
///          {description: "The unique identifier of the simple message."
///        }];
///  }
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Ref is used to define an external reference to include in the message.
  /// This could be a fully qualified proto message reference, and that type must
  /// be imported into the protofile. If no message is identified, the Ref will
  /// be used verbatim in the output.
  /// For example:
  ///  `ref: ".google.protobuf.Timestamp"`.
  var ref: String {
    get {return _storage._ref}
    set {_uniqueStorage()._ref = newValue}
  }

  /// The title of the schema.
  var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// A short description of the schema.
  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var `default`: String {
    get {return _storage._default}
    set {_uniqueStorage()._default = newValue}
  }

  var readOnly: Bool {
    get {return _storage._readOnly}
    set {_uniqueStorage()._readOnly = newValue}
  }

  /// A free-form property to include a JSON example of this field. This is copied
  /// verbatim to the output swagger.json. Quotes must be escaped.
  /// This property is the same for 2.0 and 3.0.0 https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/3.0.0.md#schemaObject  https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#schemaObject
  var example: String {
    get {return _storage._example}
    set {_uniqueStorage()._example = newValue}
  }

  var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  /// Maximum represents an inclusive upper limit for a numeric instance. The 
  /// value of MUST be a number, 
  var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  /// minimum represents an inclusive lower limit for a numeric instance. The 
  /// value of MUST be a number, 
  var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  var maxLength: UInt64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  var minLength: UInt64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  var maxItems: UInt64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  var minItems: UInt64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  var maxProperties: UInt64 {
    get {return _storage._maxProperties}
    set {_uniqueStorage()._maxProperties = newValue}
  }

  var minProperties: UInt64 {
    get {return _storage._minProperties}
    set {_uniqueStorage()._minProperties = newValue}
  }

  var required: [String] {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  /// Items in 'array' must be unique.
  var array: [String] {
    get {return _storage._array}
    set {_uniqueStorage()._array = newValue}
  }

  var type: [Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema.JSONSchemaSimpleTypes] {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// `Format`
  var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  /// Items in `enum` must be unique https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1
  var `enum`: [String] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum JSONSchemaSimpleTypes: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unknown // = 0
    case array // = 1
    case boolean // = 2
    case integer // = 3
    case null // = 4
    case number // = 5
    case object // = 6
    case string // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .array
      case 2: self = .boolean
      case 3: self = .integer
      case 4: self = .null
      case 5: self = .number
      case 6: self = .object
      case 7: self = .string
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .array: return 1
      case .boolean: return 2
      case .integer: return 3
      case .null: return 4
      case .number: return 5
      case .object: return 6
      case .string: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema.JSONSchemaSimpleTypes: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema.JSONSchemaSimpleTypes] = [
    .unknown,
    .array,
    .boolean,
    .integer,
    .null,
    .number,
    .object,
    .string,
  ]
}

#endif  // swift(>=4.2)

/// `Tag` is a representation of OpenAPI v2 specification's Tag object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#tagObject
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Tag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A short description for the tag. GFM syntax can be used for rich text 
  /// representation.
  var description_p: String = String()

  /// Additional external documentation for this tag.
  var externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation {
    get {return _externalDocs ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation()}
    set {_externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  var hasExternalDocs: Bool {return self._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  mutating func clearExternalDocs() {self._externalDocs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation? = nil
}

/// `SecurityDefinitions` is a representation of OpenAPI v2 specification's
/// Security Definitions object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityDefinitionsObject
///
/// A declaration of the security schemes available to be used in the
/// specification. This does not enforce the security schemes on the operations
/// and only serves to provide the relevant details for each scheme.
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A single security scheme definition, mapping a "name" to the scheme it
  /// defines.
  var security: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// `SecurityScheme` is a representation of OpenAPI v2 specification's
/// Security Scheme object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securitySchemeObject
///
/// Allows the definition of a security scheme that can be used by the
/// operations. Supported schemes are basic authentication, an API key (either as
/// a header or as a query parameter) and OAuth2's common flows (implicit,
/// password, application and access code).
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The type of the security scheme. Valid values are "basic",
  /// "apiKey" or "oauth2".
  var type: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.TypeEnum = .invalid

  /// A short description for security scheme.
  var description_p: String = String()

  /// The name of the header or query parameter to be used.
  /// Valid for apiKey.
  var name: String = String()

  /// The location of the API key. Valid values are "query" or
  /// "header".
  /// Valid for apiKey.
  var `in`: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.In = .invalid

  /// The flow used by the OAuth2 security scheme. Valid values are
  /// "implicit", "password", "application" or "accessCode".
  /// Valid for oauth2.
  var flow: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.Flow = .invalid

  /// The authorization URL to be used for this flow. This SHOULD be in
  /// the form of a URL.
  /// Valid for oauth2/implicit and oauth2/accessCode.
  var authorizationURL: String = String()

  /// The token URL to be used for this flow. This SHOULD be in the
  /// form of a URL.
  /// Valid for oauth2/password, oauth2/application and oauth2/accessCode.
  var tokenURL: String = String()

  /// The available scopes for the OAuth2 security scheme.
  /// Valid for oauth2.
  var scopes: Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes {
    get {return _scopes ?? Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes()}
    set {_scopes = newValue}
  }
  /// Returns true if `scopes` has been explicitly set.
  var hasScopes: Bool {return self._scopes != nil}
  /// Clears the value of `scopes`. Subsequent reads from it will return its default value.
  mutating func clearScopes() {self._scopes = nil}

  var extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The type of the security scheme. Valid values are "basic",
  /// "apiKey" or "oauth2".
  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalid // = 0
    case basic // = 1
    case apiKey // = 2
    case oauth2 // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .basic
      case 2: self = .apiKey
      case 3: self = .oauth2
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .basic: return 1
      case .apiKey: return 2
      case .oauth2: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The location of the API key. Valid values are "query" or "header".
  enum In: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalid // = 0
    case query // = 1
    case header // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .query
      case 2: self = .header
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .query: return 1
      case .header: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// The flow used by the OAuth2 security scheme. Valid values are
  /// "implicit", "password", "application" or "accessCode".
  enum Flow: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case invalid // = 0
    case implicit // = 1
    case password // = 2
    case application // = 3
    case accessCode // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .invalid
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .invalid
      case 1: self = .implicit
      case 2: self = .password
      case 3: self = .application
      case 4: self = .accessCode
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .invalid: return 0
      case .implicit: return 1
      case .password: return 2
      case .application: return 3
      case .accessCode: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _scopes: Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes? = nil
}

#if swift(>=4.2)

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.TypeEnum] = [
    .invalid,
    .basic,
    .apiKey,
    .oauth2,
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.In: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.In] = [
    .invalid,
    .query,
    .header,
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.Flow: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.Flow] = [
    .invalid,
    .implicit,
    .password,
    .application,
    .accessCode,
  ]
}

#endif  // swift(>=4.2)

/// `SecurityRequirement` is a representation of OpenAPI v2 specification's
/// Security Requirement object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#securityRequirementObject
///
/// Lists the required security schemes to execute this operation. The object can
/// have multiple security schemes declared in it which are all required (that
/// is, there is a logical AND between the schemes).
///
/// The name used for each property MUST correspond to a security scheme
/// declared in the Security Definitions.
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Each name must correspond to a security scheme which is declared in
  /// the Security Definitions. If the security scheme is of type "oauth2",
  /// then the value is a list of scope names required for the execution.
  /// For other security scheme types, the array MUST be empty.
  var securityRequirement: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// If the security scheme is of type "oauth2", then the value is a list of
  /// scope names required for the execution. For other security scheme types,
  /// the array MUST be empty.
  struct SecurityRequirementValue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var scope: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

/// `Scopes` is a representation of OpenAPI v2 specification's Scopes object.
///
/// See: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0/versions/2.0.md#scopesObject
///
/// Lists the available scopes for an OAuth2 security scheme.
struct Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Maps between a name of a scope to a short description of it (as the value
  /// of the property).
  var scope: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grpc.gateway.protoc_gen_openapiv2.options"

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "HTTP"),
    2: .same(proto: "HTTPS"),
    3: .same(proto: "WS"),
    4: .same(proto: "WSS"),
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Swagger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Swagger"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "swagger"),
    2: .same(proto: "info"),
    3: .same(proto: "host"),
    4: .standard(proto: "base_path"),
    5: .same(proto: "schemes"),
    6: .same(proto: "consumes"),
    7: .same(proto: "produces"),
    10: .same(proto: "responses"),
    11: .standard(proto: "security_definitions"),
    12: .same(proto: "security"),
    14: .standard(proto: "external_docs"),
    15: .same(proto: "extensions"),
  ]

  fileprivate class _StorageClass {
    var _swagger: String = String()
    var _info: Grpc_Gateway_ProtocGenOpenapiv2_Options_Info? = nil
    var _host: String = String()
    var _basePath: String = String()
    var _schemes: [Grpc_Gateway_ProtocGenOpenapiv2_Options_Scheme] = []
    var _consumes: [String] = []
    var _produces: [String] = []
    var _responses: Dictionary<String,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response> = [:]
    var _securityDefinitions: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions? = nil
    var _security: [Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement] = []
    var _externalDocs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation? = nil
    var _extensions: Dictionary<String,SwiftProtobuf.Google_Protobuf_Value> = [:]

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _swagger = source._swagger
      _info = source._info
      _host = source._host
      _basePath = source._basePath
      _schemes = source._schemes
      _consumes = source._consumes
      _produces = source._produces
      _responses = source._responses
      _securityDefinitions = source._securityDefinitions
      _security = source._security
      _externalDocs = source._externalDocs
      _extensions = source._extensions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._swagger) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._host) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._basePath) }()
        case 5: try { try decoder.decodeRepeatedEnumField(value: &_storage._schemes) }()
        case 6: try { try decoder.decodeRepeatedStringField(value: &_storage._consumes) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._produces) }()
        case 10: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response>.self, value: &_storage._responses) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._securityDefinitions) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._security) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._externalDocs) }()
        case 15: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &_storage._extensions) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._swagger.isEmpty {
        try visitor.visitSingularStringField(value: _storage._swagger, fieldNumber: 1)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._host.isEmpty {
        try visitor.visitSingularStringField(value: _storage._host, fieldNumber: 3)
      }
      if !_storage._basePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basePath, fieldNumber: 4)
      }
      if !_storage._schemes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._schemes, fieldNumber: 5)
      }
      if !_storage._consumes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._consumes, fieldNumber: 6)
      }
      if !_storage._produces.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._produces, fieldNumber: 7)
      }
      if !_storage._responses.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response>.self, value: _storage._responses, fieldNumber: 10)
      }
      if let v = _storage._securityDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._security.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._security, fieldNumber: 12)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._extensions.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: _storage._extensions, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Swagger, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Swagger) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._swagger != rhs_storage._swagger {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._host != rhs_storage._host {return false}
        if _storage._basePath != rhs_storage._basePath {return false}
        if _storage._schemes != rhs_storage._schemes {return false}
        if _storage._consumes != rhs_storage._consumes {return false}
        if _storage._produces != rhs_storage._produces {return false}
        if _storage._responses != rhs_storage._responses {return false}
        if _storage._securityDefinitions != rhs_storage._securityDefinitions {return false}
        if _storage._security != rhs_storage._security {return false}
        if _storage._externalDocs != rhs_storage._externalDocs {return false}
        if _storage._extensions != rhs_storage._extensions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tags"),
    2: .same(proto: "summary"),
    3: .same(proto: "description"),
    4: .standard(proto: "external_docs"),
    5: .standard(proto: "operation_id"),
    6: .same(proto: "consumes"),
    7: .same(proto: "produces"),
    9: .same(proto: "responses"),
    10: .same(proto: "schemes"),
    11: .same(proto: "deprecated"),
    12: .same(proto: "security"),
    13: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.summary) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._externalDocs) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.operationID) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.consumes) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.produces) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response>.self, value: &self.responses) }()
      case 10: try { try decoder.decodeRepeatedEnumField(value: &self.schemes) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.deprecated) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.security) }()
      case 13: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.extensions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 1)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularStringField(value: self.summary, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if let v = self._externalDocs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.operationID.isEmpty {
      try visitor.visitSingularStringField(value: self.operationID, fieldNumber: 5)
    }
    if !self.consumes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.consumes, fieldNumber: 6)
    }
    if !self.produces.isEmpty {
      try visitor.visitRepeatedStringField(value: self.produces, fieldNumber: 7)
    }
    if !self.responses.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Response>.self, value: self.responses, fieldNumber: 9)
    }
    if !self.schemes.isEmpty {
      try visitor.visitPackedEnumField(value: self.schemes, fieldNumber: 10)
    }
    if self.deprecated != false {
      try visitor.visitSingularBoolField(value: self.deprecated, fieldNumber: 11)
    }
    if !self.security.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.security, fieldNumber: 12)
    }
    if !self.extensions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.extensions, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Operation, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Operation) -> Bool {
    if lhs.tags != rhs.tags {return false}
    if lhs.summary != rhs.summary {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._externalDocs != rhs._externalDocs {return false}
    if lhs.operationID != rhs.operationID {return false}
    if lhs.consumes != rhs.consumes {return false}
    if lhs.produces != rhs.produces {return false}
    if lhs.responses != rhs.responses {return false}
    if lhs.schemes != rhs.schemes {return false}
    if lhs.deprecated != rhs.deprecated {return false}
    if lhs.security != rhs.security {return false}
    if lhs.extensions != rhs.extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "type"),
    3: .same(proto: "format"),
    6: .same(proto: "default"),
    13: .same(proto: "pattern"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.format) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.`default`) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.pattern) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 3)
    }
    if !self.`default`.isEmpty {
      try visitor.visitSingularStringField(value: self.`default`, fieldNumber: 6)
    }
    if !self.pattern.isEmpty {
      try visitor.visitSingularStringField(value: self.pattern, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Header, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Header) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.type != rhs.type {return false}
    if lhs.format != rhs.format {return false}
    if lhs.`default` != rhs.`default` {return false}
    if lhs.pattern != rhs.pattern {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "schema"),
    3: .same(proto: "headers"),
    4: .same(proto: "examples"),
    5: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._schema) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Header>.self, value: &self.headers) }()
      case 4: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.examples) }()
      case 5: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.extensions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if let v = self._schema {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.headers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_Header>.self, value: self.headers, fieldNumber: 3)
    }
    if !self.examples.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.examples, fieldNumber: 4)
    }
    if !self.extensions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.extensions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Response, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Response) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs._schema != rhs._schema {return false}
    if lhs.headers != rhs.headers {return false}
    if lhs.examples != rhs.examples {return false}
    if lhs.extensions != rhs.extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Info"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "terms_of_service"),
    4: .same(proto: "contact"),
    5: .same(proto: "license"),
    6: .same(proto: "version"),
    7: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.termsOfService) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._contact) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._license) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.extensions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.termsOfService.isEmpty {
      try visitor.visitSingularStringField(value: self.termsOfService, fieldNumber: 3)
    }
    if let v = self._contact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._license {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 6)
    }
    if !self.extensions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.extensions, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Info, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Info) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.termsOfService != rhs.termsOfService {return false}
    if lhs._contact != rhs._contact {return false}
    if lhs._license != rhs._license {return false}
    if lhs.version != rhs.version {return false}
    if lhs.extensions != rhs.extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contact"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .same(proto: "email"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.email) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Contact) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.email != rhs.email {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_License: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".License"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_License, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_License) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExternalDocumentation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "url"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.url) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_ExternalDocumentation) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Schema"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "json_schema"),
    2: .same(proto: "discriminator"),
    3: .standard(proto: "read_only"),
    5: .standard(proto: "external_docs"),
    6: .same(proto: "example"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._jsonSchema) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.discriminator) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.readOnly) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._externalDocs) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.example) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._jsonSchema {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.discriminator.isEmpty {
      try visitor.visitSingularStringField(value: self.discriminator, fieldNumber: 2)
    }
    if self.readOnly != false {
      try visitor.visitSingularBoolField(value: self.readOnly, fieldNumber: 3)
    }
    if let v = self._externalDocs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.example.isEmpty {
      try visitor.visitSingularStringField(value: self.example, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Schema) -> Bool {
    if lhs._jsonSchema != rhs._jsonSchema {return false}
    if lhs.discriminator != rhs.discriminator {return false}
    if lhs.readOnly != rhs.readOnly {return false}
    if lhs._externalDocs != rhs._externalDocs {return false}
    if lhs.example != rhs.example {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JSONSchema"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "ref"),
    5: .same(proto: "title"),
    6: .same(proto: "description"),
    7: .same(proto: "default"),
    8: .standard(proto: "read_only"),
    9: .same(proto: "example"),
    10: .standard(proto: "multiple_of"),
    11: .same(proto: "maximum"),
    12: .standard(proto: "exclusive_maximum"),
    13: .same(proto: "minimum"),
    14: .standard(proto: "exclusive_minimum"),
    15: .standard(proto: "max_length"),
    16: .standard(proto: "min_length"),
    17: .same(proto: "pattern"),
    20: .standard(proto: "max_items"),
    21: .standard(proto: "min_items"),
    22: .standard(proto: "unique_items"),
    24: .standard(proto: "max_properties"),
    25: .standard(proto: "min_properties"),
    26: .same(proto: "required"),
    34: .same(proto: "array"),
    35: .same(proto: "type"),
    36: .same(proto: "format"),
    46: .same(proto: "enum"),
  ]

  fileprivate class _StorageClass {
    var _ref: String = String()
    var _title: String = String()
    var _description_p: String = String()
    var _default: String = String()
    var _readOnly: Bool = false
    var _example: String = String()
    var _multipleOf: Double = 0
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: UInt64 = 0
    var _minLength: UInt64 = 0
    var _pattern: String = String()
    var _maxItems: UInt64 = 0
    var _minItems: UInt64 = 0
    var _uniqueItems: Bool = false
    var _maxProperties: UInt64 = 0
    var _minProperties: UInt64 = 0
    var _required: [String] = []
    var _array: [String] = []
    var _type: [Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema.JSONSchemaSimpleTypes] = []
    var _format: String = String()
    var _enum: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ref = source._ref
      _title = source._title
      _description_p = source._description_p
      _default = source._default
      _readOnly = source._readOnly
      _example = source._example
      _multipleOf = source._multipleOf
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _maxProperties = source._maxProperties
      _minProperties = source._minProperties
      _required = source._required
      _array = source._array
      _type = source._type
      _format = source._format
      _enum = source._enum
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._ref) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._default) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._readOnly) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._example) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._multipleOf) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._maximum) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._minimum) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum) }()
        case 15: try { try decoder.decodeSingularUInt64Field(value: &_storage._maxLength) }()
        case 16: try { try decoder.decodeSingularUInt64Field(value: &_storage._minLength) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._pattern) }()
        case 20: try { try decoder.decodeSingularUInt64Field(value: &_storage._maxItems) }()
        case 21: try { try decoder.decodeSingularUInt64Field(value: &_storage._minItems) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._uniqueItems) }()
        case 24: try { try decoder.decodeSingularUInt64Field(value: &_storage._maxProperties) }()
        case 25: try { try decoder.decodeSingularUInt64Field(value: &_storage._minProperties) }()
        case 26: try { try decoder.decodeRepeatedStringField(value: &_storage._required) }()
        case 34: try { try decoder.decodeRepeatedStringField(value: &_storage._array) }()
        case 35: try { try decoder.decodeRepeatedEnumField(value: &_storage._type) }()
        case 36: try { try decoder.decodeSingularStringField(value: &_storage._format) }()
        case 46: try { try decoder.decodeRepeatedStringField(value: &_storage._enum) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._ref.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ref, fieldNumber: 3)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if !_storage._default.isEmpty {
        try visitor.visitSingularStringField(value: _storage._default, fieldNumber: 7)
      }
      if _storage._readOnly != false {
        try visitor.visitSingularBoolField(value: _storage._readOnly, fieldNumber: 8)
      }
      if !_storage._example.isEmpty {
        try visitor.visitSingularStringField(value: _storage._example, fieldNumber: 9)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 10)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 11)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 12)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 13)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 14)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxLength, fieldNumber: 15)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._minLength, fieldNumber: 16)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 17)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxItems, fieldNumber: 20)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._minItems, fieldNumber: 21)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 22)
      }
      if _storage._maxProperties != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._maxProperties, fieldNumber: 24)
      }
      if _storage._minProperties != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._minProperties, fieldNumber: 25)
      }
      if !_storage._required.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._required, fieldNumber: 26)
      }
      if !_storage._array.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._array, fieldNumber: 34)
      }
      if !_storage._type.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._type, fieldNumber: 35)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 36)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._enum, fieldNumber: 46)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ref != rhs_storage._ref {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._default != rhs_storage._default {return false}
        if _storage._readOnly != rhs_storage._readOnly {return false}
        if _storage._example != rhs_storage._example {return false}
        if _storage._multipleOf != rhs_storage._multipleOf {return false}
        if _storage._maximum != rhs_storage._maximum {return false}
        if _storage._exclusiveMaximum != rhs_storage._exclusiveMaximum {return false}
        if _storage._minimum != rhs_storage._minimum {return false}
        if _storage._exclusiveMinimum != rhs_storage._exclusiveMinimum {return false}
        if _storage._maxLength != rhs_storage._maxLength {return false}
        if _storage._minLength != rhs_storage._minLength {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._maxItems != rhs_storage._maxItems {return false}
        if _storage._minItems != rhs_storage._minItems {return false}
        if _storage._uniqueItems != rhs_storage._uniqueItems {return false}
        if _storage._maxProperties != rhs_storage._maxProperties {return false}
        if _storage._minProperties != rhs_storage._minProperties {return false}
        if _storage._required != rhs_storage._required {return false}
        if _storage._array != rhs_storage._array {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._format != rhs_storage._format {return false}
        if _storage._enum != rhs_storage._enum {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_JSONSchema.JSONSchemaSimpleTypes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ARRAY"),
    2: .same(proto: "BOOLEAN"),
    3: .same(proto: "INTEGER"),
    4: .same(proto: "NULL"),
    5: .same(proto: "NUMBER"),
    6: .same(proto: "OBJECT"),
    7: .same(proto: "STRING"),
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Tag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Tag"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "description"),
    3: .standard(proto: "external_docs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._externalDocs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if let v = self._externalDocs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Tag, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Tag) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs._externalDocs != rhs._externalDocs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SecurityDefinitions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "security"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme>.self, value: &self.security) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.security.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme>.self, value: self.security, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityDefinitions) -> Bool {
    if lhs.security != rhs.security {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SecurityScheme"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "description"),
    3: .same(proto: "name"),
    4: .same(proto: "in"),
    5: .same(proto: "flow"),
    6: .standard(proto: "authorization_url"),
    7: .standard(proto: "token_url"),
    8: .same(proto: "scopes"),
    9: .same(proto: "extensions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.`in`) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.flow) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.authorizationURL) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.tokenURL) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._scopes) }()
      case 9: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: &self.extensions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .invalid {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if self.`in` != .invalid {
      try visitor.visitSingularEnumField(value: self.`in`, fieldNumber: 4)
    }
    if self.flow != .invalid {
      try visitor.visitSingularEnumField(value: self.flow, fieldNumber: 5)
    }
    if !self.authorizationURL.isEmpty {
      try visitor.visitSingularStringField(value: self.authorizationURL, fieldNumber: 6)
    }
    if !self.tokenURL.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenURL, fieldNumber: 7)
    }
    if let v = self._scopes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.extensions.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.Google_Protobuf_Value>.self, value: self.extensions, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.name != rhs.name {return false}
    if lhs.`in` != rhs.`in` {return false}
    if lhs.flow != rhs.flow {return false}
    if lhs.authorizationURL != rhs.authorizationURL {return false}
    if lhs.tokenURL != rhs.tokenURL {return false}
    if lhs._scopes != rhs._scopes {return false}
    if lhs.extensions != rhs.extensions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_INVALID"),
    1: .same(proto: "TYPE_BASIC"),
    2: .same(proto: "TYPE_API_KEY"),
    3: .same(proto: "TYPE_OAUTH2"),
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.In: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IN_INVALID"),
    1: .same(proto: "IN_QUERY"),
    2: .same(proto: "IN_HEADER"),
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityScheme.Flow: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FLOW_INVALID"),
    1: .same(proto: "FLOW_IMPLICIT"),
    2: .same(proto: "FLOW_PASSWORD"),
    3: .same(proto: "FLOW_APPLICATION"),
    4: .same(proto: "FLOW_ACCESS_CODE"),
  ]
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SecurityRequirement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "security_requirement"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue>.self, value: &self.securityRequirement) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.securityRequirement.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue>.self, value: self.securityRequirement, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement) -> Bool {
    if lhs.securityRequirement != rhs.securityRequirement {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.protoMessageName + ".SecurityRequirementValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.scope) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitRepeatedStringField(value: self.scope, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_SecurityRequirement.SecurityRequirementValue) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Scopes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.scope) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.scope, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes, rhs: Grpc_Gateway_ProtocGenOpenapiv2_Options_Scopes) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
