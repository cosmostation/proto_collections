//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: em/market/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Em_Market_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Em_Market_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? { get }

  func addLimitOrder(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>

  func addMarketOrder(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>

  func cancelOrder(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>

  func cancelReplaceLimitOrder(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>

  func cancelReplaceMarketOrder(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions?
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>
}

extension Em_Market_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "em.market.v1.Msg"
  }

  /// Unary call to AddLimitOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to AddLimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addLimitOrder(
    _ request: Em_Market_V1_MsgAddLimitOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse> {
    return self.makeUnaryCall(
      path: "/em.market.v1.Msg/AddLimitOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? []
    )
  }

  /// Unary call to AddMarketOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to AddMarketOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addMarketOrder(
    _ request: Em_Market_V1_MsgAddMarketOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse> {
    return self.makeUnaryCall(
      path: "/em.market.v1.Msg/AddMarketOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelOrder(
    _ request: Em_Market_V1_MsgCancelOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse> {
    return self.makeUnaryCall(
      path: "/em.market.v1.Msg/CancelOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelReplaceLimitOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelReplaceLimitOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelReplaceLimitOrder(
    _ request: Em_Market_V1_MsgCancelReplaceLimitOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse> {
    return self.makeUnaryCall(
      path: "/em.market.v1.Msg/CancelReplaceLimitOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelReplaceMarketOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelReplaceMarketOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelReplaceMarketOrder(
    _ request: Em_Market_V1_MsgCancelReplaceMarketOrder,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse> {
    return self.makeUnaryCall(
      path: "/em.market.v1.Msg/CancelReplaceMarketOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? []
    )
  }
}

internal protocol Em_Market_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'addLimitOrder'.
  func makeAddLimitOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'addMarketOrder'.
  func makeAddMarketOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelOrder'.
  func makeCancelOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelReplaceLimitOrder'.
  func makeCancelReplaceLimitOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelReplaceMarketOrder'.
  func makeCancelReplaceMarketOrderInterceptors() -> [ClientInterceptor<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>]
}

internal final class Em_Market_V1_MsgClient: Em_Market_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the em.market.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Em_Market_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Em_Market_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Em_Market_V1_MsgServerInterceptorFactoryProtocol? { get }

  func addLimitOrder(request: Em_Market_V1_MsgAddLimitOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgAddLimitOrderResponse>

  func addMarketOrder(request: Em_Market_V1_MsgAddMarketOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgAddMarketOrderResponse>

  func cancelOrder(request: Em_Market_V1_MsgCancelOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelOrderResponse>

  func cancelReplaceLimitOrder(request: Em_Market_V1_MsgCancelReplaceLimitOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelReplaceLimitOrderResponse>

  func cancelReplaceMarketOrder(request: Em_Market_V1_MsgCancelReplaceMarketOrder, context: StatusOnlyCallContext) -> EventLoopFuture<Em_Market_V1_MsgCancelReplaceMarketOrderResponse>
}

extension Em_Market_V1_MsgProvider {
  internal var serviceName: Substring { return "em.market.v1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddLimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddLimitOrderResponse>(),
        interceptors: self.interceptors?.makeAddLimitOrderInterceptors() ?? [],
        userFunction: self.addLimitOrder(request:context:)
      )

    case "AddMarketOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgAddMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgAddMarketOrderResponse>(),
        interceptors: self.interceptors?.makeAddMarketOrderInterceptors() ?? [],
        userFunction: self.addMarketOrder(request:context:)
      )

    case "CancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelOrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        userFunction: self.cancelOrder(request:context:)
      )

    case "CancelReplaceLimitOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceLimitOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceLimitOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceLimitOrderInterceptors() ?? [],
        userFunction: self.cancelReplaceLimitOrder(request:context:)
      )

    case "CancelReplaceMarketOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Em_Market_V1_MsgCancelReplaceMarketOrder>(),
        responseSerializer: ProtobufSerializer<Em_Market_V1_MsgCancelReplaceMarketOrderResponse>(),
        interceptors: self.interceptors?.makeCancelReplaceMarketOrderInterceptors() ?? [],
        userFunction: self.cancelReplaceMarketOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Em_Market_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addLimitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddLimitOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgAddLimitOrder, Em_Market_V1_MsgAddLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'addMarketOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddMarketOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgAddMarketOrder, Em_Market_V1_MsgAddMarketOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelOrder, Em_Market_V1_MsgCancelOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelReplaceLimitOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelReplaceLimitOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelReplaceLimitOrder, Em_Market_V1_MsgCancelReplaceLimitOrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelReplaceMarketOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelReplaceMarketOrderInterceptors() -> [ServerInterceptor<Em_Market_V1_MsgCancelReplaceMarketOrder, Em_Market_V1_MsgCancelReplaceMarketOrderResponse>]
}
