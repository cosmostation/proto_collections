//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ixo/bonds/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Bonds_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Bonds_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bonds_QueryClientInterceptorFactoryProtocol? { get }

  func bonds(
    _ request: Bonds_QueryBondsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryBondsRequest, Bonds_QueryBondsResponse>

  func bondsDetailed(
    _ request: Bonds_QueryBondsDetailedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryBondsDetailedRequest, Bonds_QueryBondsDetailedResponse>

  func params(
    _ request: Bonds_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryParamsRequest, Bonds_QueryParamsResponse>

  func bond(
    _ request: Bonds_QueryBondRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryBondRequest, Bonds_QueryBondResponse>

  func batch(
    _ request: Bonds_QueryBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryBatchRequest, Bonds_QueryBatchResponse>

  func lastBatch(
    _ request: Bonds_QueryLastBatchRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryLastBatchRequest, Bonds_QueryLastBatchResponse>

  func currentPrice(
    _ request: Bonds_QueryCurrentPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryCurrentPriceRequest, Bonds_QueryCurrentPriceResponse>

  func currentReserve(
    _ request: Bonds_QueryCurrentReserveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryCurrentReserveRequest, Bonds_QueryCurrentReserveResponse>

  func availableReserve(
    _ request: Bonds_QueryAvailableReserveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryAvailableReserveRequest, Bonds_QueryAvailableReserveResponse>

  func customPrice(
    _ request: Bonds_QueryCustomPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryCustomPriceRequest, Bonds_QueryCustomPriceResponse>

  func buyPrice(
    _ request: Bonds_QueryBuyPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryBuyPriceRequest, Bonds_QueryBuyPriceResponse>

  func sellReturn(
    _ request: Bonds_QuerySellReturnRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QuerySellReturnRequest, Bonds_QuerySellReturnResponse>

  func swapReturn(
    _ request: Bonds_QuerySwapReturnRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QuerySwapReturnRequest, Bonds_QuerySwapReturnResponse>

  func alphaMaximums(
    _ request: Bonds_QueryAlphaMaximumsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_QueryAlphaMaximumsRequest, Bonds_QueryAlphaMaximumsResponse>
}

extension Bonds_QueryClientProtocol {
  internal var serviceName: String {
    return "bonds.Query"
  }

  /// Bonds returns all existing bonds.
  ///
  /// - Parameters:
  ///   - request: Request to send to Bonds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bonds(
    _ request: Bonds_QueryBondsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryBondsRequest, Bonds_QueryBondsResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/Bonds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondsInterceptors() ?? []
    )
  }

  /// BondsDetailed returns a list of all existing bonds with some details about their current state.
  ///
  /// - Parameters:
  ///   - request: Request to send to BondsDetailed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bondsDetailed(
    _ request: Bonds_QueryBondsDetailedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryBondsDetailedRequest, Bonds_QueryBondsDetailedResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/BondsDetailed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondsDetailedInterceptors() ?? []
    )
  }

  /// Params queries the paramaters of x/bonds module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Bonds_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryParamsRequest, Bonds_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Bond queries info of a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to Bond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bond(
    _ request: Bonds_QueryBondRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryBondRequest, Bonds_QueryBondResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/Bond",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBondInterceptors() ?? []
    )
  }

  /// Batch queries info of a specific bond's current batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to Batch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batch(
    _ request: Bonds_QueryBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryBatchRequest, Bonds_QueryBatchResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/Batch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchInterceptors() ?? []
    )
  }

  /// LastBatch queries info of a specific bond's last batch.
  ///
  /// - Parameters:
  ///   - request: Request to send to LastBatch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastBatch(
    _ request: Bonds_QueryLastBatchRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryLastBatchRequest, Bonds_QueryLastBatchResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/LastBatch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastBatchInterceptors() ?? []
    )
  }

  /// CurrentPrice queries the current price/s of a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentPrice(
    _ request: Bonds_QueryCurrentPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryCurrentPriceRequest, Bonds_QueryCurrentPriceResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/CurrentPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentPriceInterceptors() ?? []
    )
  }

  /// CurrentReserve queries the current balance/s of the reserve pool for a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentReserve.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentReserve(
    _ request: Bonds_QueryCurrentReserveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryCurrentReserveRequest, Bonds_QueryCurrentReserveResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/CurrentReserve",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentReserveInterceptors() ?? []
    )
  }

  /// AvailableReserve queries current available balance/s of the reserve pool for a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to AvailableReserve.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func availableReserve(
    _ request: Bonds_QueryAvailableReserveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryAvailableReserveRequest, Bonds_QueryAvailableReserveResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/AvailableReserve",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAvailableReserveInterceptors() ?? []
    )
  }

  /// CustomPrice queries price/s of a specific bond at a specific supply.
  ///
  /// - Parameters:
  ///   - request: Request to send to CustomPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func customPrice(
    _ request: Bonds_QueryCustomPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryCustomPriceRequest, Bonds_QueryCustomPriceResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/CustomPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCustomPriceInterceptors() ?? []
    )
  }

  /// BuyPrice queries price/s of buying an amount of tokens from a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to BuyPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buyPrice(
    _ request: Bonds_QueryBuyPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryBuyPriceRequest, Bonds_QueryBuyPriceResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/BuyPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyPriceInterceptors() ?? []
    )
  }

  /// SellReturn queries return/s on selling an amount of tokens of a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to SellReturn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sellReturn(
    _ request: Bonds_QuerySellReturnRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QuerySellReturnRequest, Bonds_QuerySellReturnResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/SellReturn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellReturnInterceptors() ?? []
    )
  }

  /// SwapReturn queries return/s on swapping an amount of tokens to another token of a specific bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to SwapReturn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func swapReturn(
    _ request: Bonds_QuerySwapReturnRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QuerySwapReturnRequest, Bonds_QuerySwapReturnResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/SwapReturn",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapReturnInterceptors() ?? []
    )
  }

  /// AlphaMaximums queries alpha maximums for a specific augmented bonding curve.
  ///
  /// - Parameters:
  ///   - request: Request to send to AlphaMaximums.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func alphaMaximums(
    _ request: Bonds_QueryAlphaMaximumsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_QueryAlphaMaximumsRequest, Bonds_QueryAlphaMaximumsResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Query/AlphaMaximums",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAlphaMaximumsInterceptors() ?? []
    )
  }
}

internal protocol Bonds_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'bonds'.
  func makeBondsInterceptors() -> [ClientInterceptor<Bonds_QueryBondsRequest, Bonds_QueryBondsResponse>]

  /// - Returns: Interceptors to use when invoking 'bondsDetailed'.
  func makeBondsDetailedInterceptors() -> [ClientInterceptor<Bonds_QueryBondsDetailedRequest, Bonds_QueryBondsDetailedResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Bonds_QueryParamsRequest, Bonds_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'bond'.
  func makeBondInterceptors() -> [ClientInterceptor<Bonds_QueryBondRequest, Bonds_QueryBondResponse>]

  /// - Returns: Interceptors to use when invoking 'batch'.
  func makeBatchInterceptors() -> [ClientInterceptor<Bonds_QueryBatchRequest, Bonds_QueryBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'lastBatch'.
  func makeLastBatchInterceptors() -> [ClientInterceptor<Bonds_QueryLastBatchRequest, Bonds_QueryLastBatchResponse>]

  /// - Returns: Interceptors to use when invoking 'currentPrice'.
  func makeCurrentPriceInterceptors() -> [ClientInterceptor<Bonds_QueryCurrentPriceRequest, Bonds_QueryCurrentPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'currentReserve'.
  func makeCurrentReserveInterceptors() -> [ClientInterceptor<Bonds_QueryCurrentReserveRequest, Bonds_QueryCurrentReserveResponse>]

  /// - Returns: Interceptors to use when invoking 'availableReserve'.
  func makeAvailableReserveInterceptors() -> [ClientInterceptor<Bonds_QueryAvailableReserveRequest, Bonds_QueryAvailableReserveResponse>]

  /// - Returns: Interceptors to use when invoking 'customPrice'.
  func makeCustomPriceInterceptors() -> [ClientInterceptor<Bonds_QueryCustomPriceRequest, Bonds_QueryCustomPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'buyPrice'.
  func makeBuyPriceInterceptors() -> [ClientInterceptor<Bonds_QueryBuyPriceRequest, Bonds_QueryBuyPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'sellReturn'.
  func makeSellReturnInterceptors() -> [ClientInterceptor<Bonds_QuerySellReturnRequest, Bonds_QuerySellReturnResponse>]

  /// - Returns: Interceptors to use when invoking 'swapReturn'.
  func makeSwapReturnInterceptors() -> [ClientInterceptor<Bonds_QuerySwapReturnRequest, Bonds_QuerySwapReturnResponse>]

  /// - Returns: Interceptors to use when invoking 'alphaMaximums'.
  func makeAlphaMaximumsInterceptors() -> [ClientInterceptor<Bonds_QueryAlphaMaximumsRequest, Bonds_QueryAlphaMaximumsResponse>]
}

internal final class Bonds_QueryClient: Bonds_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bonds_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the bonds.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bonds_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bonds_QueryProvider: CallHandlerProvider {
  var interceptors: Bonds_QueryServerInterceptorFactoryProtocol? { get }

  /// Bonds returns all existing bonds.
  func bonds(request: Bonds_QueryBondsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryBondsResponse>

  /// BondsDetailed returns a list of all existing bonds with some details about their current state.
  func bondsDetailed(request: Bonds_QueryBondsDetailedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryBondsDetailedResponse>

  /// Params queries the paramaters of x/bonds module.
  func params(request: Bonds_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryParamsResponse>

  /// Bond queries info of a specific bond.
  func bond(request: Bonds_QueryBondRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryBondResponse>

  /// Batch queries info of a specific bond's current batch.
  func batch(request: Bonds_QueryBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryBatchResponse>

  /// LastBatch queries info of a specific bond's last batch.
  func lastBatch(request: Bonds_QueryLastBatchRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryLastBatchResponse>

  /// CurrentPrice queries the current price/s of a specific bond.
  func currentPrice(request: Bonds_QueryCurrentPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryCurrentPriceResponse>

  /// CurrentReserve queries the current balance/s of the reserve pool for a specific bond.
  func currentReserve(request: Bonds_QueryCurrentReserveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryCurrentReserveResponse>

  /// AvailableReserve queries current available balance/s of the reserve pool for a specific bond.
  func availableReserve(request: Bonds_QueryAvailableReserveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryAvailableReserveResponse>

  /// CustomPrice queries price/s of a specific bond at a specific supply.
  func customPrice(request: Bonds_QueryCustomPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryCustomPriceResponse>

  /// BuyPrice queries price/s of buying an amount of tokens from a specific bond.
  func buyPrice(request: Bonds_QueryBuyPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryBuyPriceResponse>

  /// SellReturn queries return/s on selling an amount of tokens of a specific bond.
  func sellReturn(request: Bonds_QuerySellReturnRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QuerySellReturnResponse>

  /// SwapReturn queries return/s on swapping an amount of tokens to another token of a specific bond.
  func swapReturn(request: Bonds_QuerySwapReturnRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QuerySwapReturnResponse>

  /// AlphaMaximums queries alpha maximums for a specific augmented bonding curve.
  func alphaMaximums(request: Bonds_QueryAlphaMaximumsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_QueryAlphaMaximumsResponse>
}

extension Bonds_QueryProvider {
  internal var serviceName: Substring { return "bonds.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Bonds":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryBondsRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryBondsResponse>(),
        interceptors: self.interceptors?.makeBondsInterceptors() ?? [],
        userFunction: self.bonds(request:context:)
      )

    case "BondsDetailed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryBondsDetailedRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryBondsDetailedResponse>(),
        interceptors: self.interceptors?.makeBondsDetailedInterceptors() ?? [],
        userFunction: self.bondsDetailed(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Bond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryBondRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryBondResponse>(),
        interceptors: self.interceptors?.makeBondInterceptors() ?? [],
        userFunction: self.bond(request:context:)
      )

    case "Batch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryBatchRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryBatchResponse>(),
        interceptors: self.interceptors?.makeBatchInterceptors() ?? [],
        userFunction: self.batch(request:context:)
      )

    case "LastBatch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryLastBatchRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryLastBatchResponse>(),
        interceptors: self.interceptors?.makeLastBatchInterceptors() ?? [],
        userFunction: self.lastBatch(request:context:)
      )

    case "CurrentPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryCurrentPriceRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryCurrentPriceResponse>(),
        interceptors: self.interceptors?.makeCurrentPriceInterceptors() ?? [],
        userFunction: self.currentPrice(request:context:)
      )

    case "CurrentReserve":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryCurrentReserveRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryCurrentReserveResponse>(),
        interceptors: self.interceptors?.makeCurrentReserveInterceptors() ?? [],
        userFunction: self.currentReserve(request:context:)
      )

    case "AvailableReserve":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryAvailableReserveRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryAvailableReserveResponse>(),
        interceptors: self.interceptors?.makeAvailableReserveInterceptors() ?? [],
        userFunction: self.availableReserve(request:context:)
      )

    case "CustomPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryCustomPriceRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryCustomPriceResponse>(),
        interceptors: self.interceptors?.makeCustomPriceInterceptors() ?? [],
        userFunction: self.customPrice(request:context:)
      )

    case "BuyPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryBuyPriceRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryBuyPriceResponse>(),
        interceptors: self.interceptors?.makeBuyPriceInterceptors() ?? [],
        userFunction: self.buyPrice(request:context:)
      )

    case "SellReturn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QuerySellReturnRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QuerySellReturnResponse>(),
        interceptors: self.interceptors?.makeSellReturnInterceptors() ?? [],
        userFunction: self.sellReturn(request:context:)
      )

    case "SwapReturn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QuerySwapReturnRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QuerySwapReturnResponse>(),
        interceptors: self.interceptors?.makeSwapReturnInterceptors() ?? [],
        userFunction: self.swapReturn(request:context:)
      )

    case "AlphaMaximums":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_QueryAlphaMaximumsRequest>(),
        responseSerializer: ProtobufSerializer<Bonds_QueryAlphaMaximumsResponse>(),
        interceptors: self.interceptors?.makeAlphaMaximumsInterceptors() ?? [],
        userFunction: self.alphaMaximums(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bonds_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'bonds'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondsInterceptors() -> [ServerInterceptor<Bonds_QueryBondsRequest, Bonds_QueryBondsResponse>]

  /// - Returns: Interceptors to use when handling 'bondsDetailed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondsDetailedInterceptors() -> [ServerInterceptor<Bonds_QueryBondsDetailedRequest, Bonds_QueryBondsDetailedResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Bonds_QueryParamsRequest, Bonds_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'bond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBondInterceptors() -> [ServerInterceptor<Bonds_QueryBondRequest, Bonds_QueryBondResponse>]

  /// - Returns: Interceptors to use when handling 'batch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchInterceptors() -> [ServerInterceptor<Bonds_QueryBatchRequest, Bonds_QueryBatchResponse>]

  /// - Returns: Interceptors to use when handling 'lastBatch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastBatchInterceptors() -> [ServerInterceptor<Bonds_QueryLastBatchRequest, Bonds_QueryLastBatchResponse>]

  /// - Returns: Interceptors to use when handling 'currentPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentPriceInterceptors() -> [ServerInterceptor<Bonds_QueryCurrentPriceRequest, Bonds_QueryCurrentPriceResponse>]

  /// - Returns: Interceptors to use when handling 'currentReserve'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentReserveInterceptors() -> [ServerInterceptor<Bonds_QueryCurrentReserveRequest, Bonds_QueryCurrentReserveResponse>]

  /// - Returns: Interceptors to use when handling 'availableReserve'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAvailableReserveInterceptors() -> [ServerInterceptor<Bonds_QueryAvailableReserveRequest, Bonds_QueryAvailableReserveResponse>]

  /// - Returns: Interceptors to use when handling 'customPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCustomPriceInterceptors() -> [ServerInterceptor<Bonds_QueryCustomPriceRequest, Bonds_QueryCustomPriceResponse>]

  /// - Returns: Interceptors to use when handling 'buyPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyPriceInterceptors() -> [ServerInterceptor<Bonds_QueryBuyPriceRequest, Bonds_QueryBuyPriceResponse>]

  /// - Returns: Interceptors to use when handling 'sellReturn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellReturnInterceptors() -> [ServerInterceptor<Bonds_QuerySellReturnRequest, Bonds_QuerySellReturnResponse>]

  /// - Returns: Interceptors to use when handling 'swapReturn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapReturnInterceptors() -> [ServerInterceptor<Bonds_QuerySwapReturnRequest, Bonds_QuerySwapReturnResponse>]

  /// - Returns: Interceptors to use when handling 'alphaMaximums'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAlphaMaximumsInterceptors() -> [ServerInterceptor<Bonds_QueryAlphaMaximumsRequest, Bonds_QueryAlphaMaximumsResponse>]
}
