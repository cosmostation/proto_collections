// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/committee/v1beta1/permissions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GodPermission allows any governance proposal. It is used mainly for testing.
struct Kava_Committee_V1beta1_GodPermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SoftwareUpgradePermission permission type for software upgrade proposals
struct Kava_Committee_V1beta1_SoftwareUpgradePermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TextPermission allows any text governance proposal.
struct Kava_Committee_V1beta1_TextPermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ParamsChangePermission allows any parameter or sub parameter change proposal.
struct Kava_Committee_V1beta1_ParamsChangePermission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var allowedParamsChanges: [Kava_Committee_V1beta1_AllowedParamsChange] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AllowedParamsChange contains data on the allowed parameter changes for subspace, key, and sub params requirements.
struct Kava_Committee_V1beta1_AllowedParamsChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subspace: String = String()

  var key: String = String()

  /// Requirements for when the subparam value is a single record. This contains list of allowed attribute keys that can
  /// be changed on the subparam record.
  var singleSubparamAllowedAttrs: [String] = []

  /// Requirements for when the subparam value is a list of records. The requirements contains requirements for each
  /// record in the list.
  var multiSubparamsRequirements: [Kava_Committee_V1beta1_SubparamRequirement] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SubparamRequirement contains requirements for a single record in a subparam value list
struct Kava_Committee_V1beta1_SubparamRequirement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The required attr key of the param record.
  var key: String = String()

  /// The required param value for the param record key. The key and value is used to match to the target param record.
  var val: String = String()

  /// The sub param attrs that are allowed to be changed.
  var allowedSubparamAttrChanges: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.committee.v1beta1"

extension Kava_Committee_V1beta1_GodPermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GodPermission"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_GodPermission, rhs: Kava_Committee_V1beta1_GodPermission) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_SoftwareUpgradePermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SoftwareUpgradePermission"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_SoftwareUpgradePermission, rhs: Kava_Committee_V1beta1_SoftwareUpgradePermission) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_TextPermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextPermission"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_TextPermission, rhs: Kava_Committee_V1beta1_TextPermission) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_ParamsChangePermission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParamsChangePermission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_params_changes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.allowedParamsChanges) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allowedParamsChanges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.allowedParamsChanges, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_ParamsChangePermission, rhs: Kava_Committee_V1beta1_ParamsChangePermission) -> Bool {
    if lhs.allowedParamsChanges != rhs.allowedParamsChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_AllowedParamsChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowedParamsChange"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subspace"),
    2: .same(proto: "key"),
    3: .standard(proto: "single_subparam_allowed_attrs"),
    4: .standard(proto: "multi_subparams_requirements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.subspace) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.singleSubparamAllowedAttrs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.multiSubparamsRequirements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subspace.isEmpty {
      try visitor.visitSingularStringField(value: self.subspace, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.singleSubparamAllowedAttrs.isEmpty {
      try visitor.visitRepeatedStringField(value: self.singleSubparamAllowedAttrs, fieldNumber: 3)
    }
    if !self.multiSubparamsRequirements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.multiSubparamsRequirements, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_AllowedParamsChange, rhs: Kava_Committee_V1beta1_AllowedParamsChange) -> Bool {
    if lhs.subspace != rhs.subspace {return false}
    if lhs.key != rhs.key {return false}
    if lhs.singleSubparamAllowedAttrs != rhs.singleSubparamAllowedAttrs {return false}
    if lhs.multiSubparamsRequirements != rhs.multiSubparamsRequirements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_SubparamRequirement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubparamRequirement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "val"),
    3: .standard(proto: "allowed_subparam_attr_changes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.val) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.allowedSubparamAttrChanges) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.val.isEmpty {
      try visitor.visitSingularStringField(value: self.val, fieldNumber: 2)
    }
    if !self.allowedSubparamAttrChanges.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedSubparamAttrChanges, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_SubparamRequirement, rhs: Kava_Committee_V1beta1_SubparamRequirement) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.val != rhs.val {return false}
    if lhs.allowedSubparamAttrChanges != rhs.allowedSubparamAttrChanges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
