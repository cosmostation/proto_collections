// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/oracle/v1alpha1/oracle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TaskStatus enumerates the valid statuses of a task.
enum Shentu_Oracle_V1alpha1_TaskStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case succeeded // = 2
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .succeeded
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .succeeded: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Shentu_Oracle_V1alpha1_TaskStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Shentu_Oracle_V1alpha1_TaskStatus] = [
    .unspecified,
    .pending,
    .succeeded,
    .failed,
  ]
}

#endif  // swift(>=4.2)

/// Withdraw stores a withdraw of "Amount" scheduled for a given "DueBlock." 
struct Shentu_Oracle_V1alpha1_Withdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var dueBlock: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_Task {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contract: String = String()

  var function: String = String()

  var beginBlock: Int64 = 0

  var bounty: [Cosmos_Base_V1beta1_Coin] = []

  var description_p: String = String()

  var expiration: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiration ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiration = newValue}
  }
  /// Returns true if `expiration` has been explicitly set.
  var hasExpiration: Bool {return self._expiration != nil}
  /// Clears the value of `expiration`. Subsequent reads from it will return its default value.
  mutating func clearExpiration() {self._expiration = nil}

  var creator: String = String()

  var responses: [Shentu_Oracle_V1alpha1_Response] = []

  var result: String = String()

  var closingBlock: Int64 = 0

  var waitingBlocks: Int64 = 0

  var status: Shentu_Oracle_V1alpha1_TaskStatus = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _expiration: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Shentu_Oracle_V1alpha1_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `operator`: String = String()

  var score: String = String()

  var weight: String = String()

  var reward: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_Operator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var proposer: String = String()

  var collateral: [Cosmos_Base_V1beta1_Coin] = []

  var accumulatedRewards: [Cosmos_Base_V1beta1_Coin] = []

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_TaskParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var expirationDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _expirationDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_expirationDuration = newValue}
  }
  /// Returns true if `expirationDuration` has been explicitly set.
  var hasExpirationDuration: Bool {return self._expirationDuration != nil}
  /// Clears the value of `expirationDuration`. Subsequent reads from it will return its default value.
  mutating func clearExpirationDuration() {self._expirationDuration = nil}

  var aggregationWindow: Int64 = 0

  var aggregationResult: String = String()

  var thresholdScore: String = String()

  var epsilon1: String = String()

  var epsilon2: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _expirationDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

struct Shentu_Oracle_V1alpha1_LockedPoolParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lockedInBlocks: Int64 = 0

  var minimumCollateral: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_TaskID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contract: String = String()

  var function: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_TaskIDs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var taskIds: [Shentu_Oracle_V1alpha1_TaskID] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Oracle_V1alpha1_CoinsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.oracle.v1alpha1"

extension Shentu_Oracle_V1alpha1_TaskStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TASK_STATUS_UNSPECIFIED"),
    1: .same(proto: "TASK_STATUS_PENDING"),
    2: .same(proto: "TASK_STATUS_SUCCEEDED"),
    3: .same(proto: "TASK_STATUS_FAILED"),
  ]
}

extension Shentu_Oracle_V1alpha1_Withdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Withdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "amount"),
    3: .standard(proto: "due_block"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.dueBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 2)
    }
    if self.dueBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.dueBlock, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_Withdraw, rhs: Shentu_Oracle_V1alpha1_Withdraw) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.dueBlock != rhs.dueBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_Task: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Task"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contract"),
    2: .same(proto: "function"),
    3: .standard(proto: "begin_block"),
    4: .same(proto: "bounty"),
    5: .same(proto: "description"),
    6: .same(proto: "expiration"),
    7: .same(proto: "creator"),
    8: .same(proto: "responses"),
    9: .same(proto: "result"),
    10: .standard(proto: "closing_block"),
    11: .standard(proto: "waiting_blocks"),
    12: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.function) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.beginBlock) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.bounty) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._expiration) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.creator) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.responses) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.result) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.closingBlock) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.waitingBlocks) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 1)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 2)
    }
    if self.beginBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.beginBlock, fieldNumber: 3)
    }
    if !self.bounty.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bounty, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 5)
    }
    if let v = self._expiration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.creator.isEmpty {
      try visitor.visitSingularStringField(value: self.creator, fieldNumber: 7)
    }
    if !self.responses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responses, fieldNumber: 8)
    }
    if !self.result.isEmpty {
      try visitor.visitSingularStringField(value: self.result, fieldNumber: 9)
    }
    if self.closingBlock != 0 {
      try visitor.visitSingularInt64Field(value: self.closingBlock, fieldNumber: 10)
    }
    if self.waitingBlocks != 0 {
      try visitor.visitSingularInt64Field(value: self.waitingBlocks, fieldNumber: 11)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_Task, rhs: Shentu_Oracle_V1alpha1_Task) -> Bool {
    if lhs.contract != rhs.contract {return false}
    if lhs.function != rhs.function {return false}
    if lhs.beginBlock != rhs.beginBlock {return false}
    if lhs.bounty != rhs.bounty {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs._expiration != rhs._expiration {return false}
    if lhs.creator != rhs.creator {return false}
    if lhs.responses != rhs.responses {return false}
    if lhs.result != rhs.result {return false}
    if lhs.closingBlock != rhs.closingBlock {return false}
    if lhs.waitingBlocks != rhs.waitingBlocks {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
    2: .same(proto: "score"),
    3: .same(proto: "weight"),
    4: .same(proto: "reward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.`operator`) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.score) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.weight) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.reward) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.`operator`.isEmpty {
      try visitor.visitSingularStringField(value: self.`operator`, fieldNumber: 1)
    }
    if !self.score.isEmpty {
      try visitor.visitSingularStringField(value: self.score, fieldNumber: 2)
    }
    if !self.weight.isEmpty {
      try visitor.visitSingularStringField(value: self.weight, fieldNumber: 3)
    }
    if !self.reward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reward, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_Response, rhs: Shentu_Oracle_V1alpha1_Response) -> Bool {
    if lhs.`operator` != rhs.`operator` {return false}
    if lhs.score != rhs.score {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.reward != rhs.reward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_Operator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "proposer"),
    3: .same(proto: "collateral"),
    4: .standard(proto: "accumulated_rewards"),
    5: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.proposer) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.collateral) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.accumulatedRewards) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.proposer.isEmpty {
      try visitor.visitSingularStringField(value: self.proposer, fieldNumber: 2)
    }
    if !self.collateral.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collateral, fieldNumber: 3)
    }
    if !self.accumulatedRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accumulatedRewards, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_Operator, rhs: Shentu_Oracle_V1alpha1_Operator) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.proposer != rhs.proposer {return false}
    if lhs.collateral != rhs.collateral {return false}
    if lhs.accumulatedRewards != rhs.accumulatedRewards {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_TaskParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "expiration_duration"),
    2: .standard(proto: "aggregation_window"),
    3: .standard(proto: "aggregation_result"),
    4: .standard(proto: "threshold_score"),
    5: .same(proto: "epsilon1"),
    6: .same(proto: "epsilon2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._expirationDuration) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.aggregationWindow) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.aggregationResult) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.thresholdScore) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.epsilon1) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.epsilon2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._expirationDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.aggregationWindow != 0 {
      try visitor.visitSingularInt64Field(value: self.aggregationWindow, fieldNumber: 2)
    }
    if !self.aggregationResult.isEmpty {
      try visitor.visitSingularStringField(value: self.aggregationResult, fieldNumber: 3)
    }
    if !self.thresholdScore.isEmpty {
      try visitor.visitSingularStringField(value: self.thresholdScore, fieldNumber: 4)
    }
    if !self.epsilon1.isEmpty {
      try visitor.visitSingularStringField(value: self.epsilon1, fieldNumber: 5)
    }
    if !self.epsilon2.isEmpty {
      try visitor.visitSingularStringField(value: self.epsilon2, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_TaskParams, rhs: Shentu_Oracle_V1alpha1_TaskParams) -> Bool {
    if lhs._expirationDuration != rhs._expirationDuration {return false}
    if lhs.aggregationWindow != rhs.aggregationWindow {return false}
    if lhs.aggregationResult != rhs.aggregationResult {return false}
    if lhs.thresholdScore != rhs.thresholdScore {return false}
    if lhs.epsilon1 != rhs.epsilon1 {return false}
    if lhs.epsilon2 != rhs.epsilon2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_LockedPoolParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LockedPoolParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "locked_in_blocks"),
    2: .standard(proto: "minimum_collateral"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.lockedInBlocks) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.minimumCollateral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lockedInBlocks != 0 {
      try visitor.visitSingularInt64Field(value: self.lockedInBlocks, fieldNumber: 1)
    }
    if self.minimumCollateral != 0 {
      try visitor.visitSingularInt64Field(value: self.minimumCollateral, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_LockedPoolParams, rhs: Shentu_Oracle_V1alpha1_LockedPoolParams) -> Bool {
    if lhs.lockedInBlocks != rhs.lockedInBlocks {return false}
    if lhs.minimumCollateral != rhs.minimumCollateral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_TaskID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contract"),
    2: .same(proto: "function"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.function) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 1)
    }
    if !self.function.isEmpty {
      try visitor.visitSingularStringField(value: self.function, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_TaskID, rhs: Shentu_Oracle_V1alpha1_TaskID) -> Bool {
    if lhs.contract != rhs.contract {return false}
    if lhs.function != rhs.function {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_TaskIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TaskIDs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.taskIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.taskIds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_TaskIDs, rhs: Shentu_Oracle_V1alpha1_TaskIDs) -> Bool {
    if lhs.taskIds != rhs.taskIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Oracle_V1alpha1_CoinsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoinsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Oracle_V1alpha1_CoinsProto, rhs: Shentu_Oracle_V1alpha1_CoinsProto) -> Bool {
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
