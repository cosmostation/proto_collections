// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/evm/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Evm_V1beta1_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// these enum values are used for bitwise operations, therefore they need to
  /// be powers of 2
  case unspecified // = 0
  case initialized // = 1
  case pending // = 2
  case confirmed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .initialized
    case 2: self = .pending
    case 4: self = .confirmed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .initialized: return 1
    case .pending: return 2
    case .confirmed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_Status] = [
    .unspecified,
    .initialized,
    .pending,
    .confirmed,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Evm_V1beta1_BatchedCommandsStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case signing // = 1
  case aborted // = 2
  case signed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .signing
    case 2: self = .aborted
    case 3: self = .signed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .signing: return 1
    case .aborted: return 2
    case .signed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_BatchedCommandsStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_BatchedCommandsStatus] = [
    .unspecified,
    .signing,
    .aborted,
    .signed,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Evm_V1beta1_TransferKeyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case ownership // = 1
  case operatorship // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .ownership
    case 2: self = .operatorship
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .ownership: return 1
    case .operatorship: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_TransferKeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_TransferKeyType] = [
    .unspecified,
    .ownership,
    .operatorship,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Evm_V1beta1_SigType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case tx // = 1
  case command // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .tx
    case 2: self = .command
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .tx: return 1
    case .command: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_SigType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_SigType] = [
    .unspecified,
    .tx,
    .command,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Evm_V1beta1_DepositStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case confirmed // = 2
  case burned // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .confirmed
    case 3: self = .burned
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .confirmed: return 2
    case .burned: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_DepositStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_DepositStatus] = [
    .unspecified,
    .pending,
    .confirmed,
    .burned,
  ]
}

#endif  // swift(>=4.2)

/// NetworkInfo describes information about a network
struct Axelar_Evm_V1beta1_NetworkInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var id: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BurnerInfo describes information required to burn token at an burner address
/// that is deposited by an user
struct Axelar_Evm_V1beta1_BurnerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var burnerAddress: Data = Data()

  var tokenAddress: Data = Data()

  var destinationChain: String = String()

  var symbol: String = String()

  var asset: String = String()

  var salt: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ERC20Deposit contains information for an ERC20 deposit
struct Axelar_Evm_V1beta1_ERC20Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txID: Data = Data()

  var amount: Data = Data()

  var asset: String = String()

  var destinationChain: String = String()

  var burnerAddress: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ERC20TokenMetadata describes information about an ERC20 token
struct Axelar_Evm_V1beta1_ERC20TokenMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var asset: String = String()

  var chainID: Data = Data()

  var details: Axelar_Evm_V1beta1_TokenDetails {
    get {return _details ?? Axelar_Evm_V1beta1_TokenDetails()}
    set {_details = newValue}
  }
  /// Returns true if `details` has been explicitly set.
  var hasDetails: Bool {return self._details != nil}
  /// Clears the value of `details`. Subsequent reads from it will return its default value.
  mutating func clearDetails() {self._details = nil}

  var tokenAddress: String = String()

  var txHash: String = String()

  var minAmount: Data = Data()

  var status: Axelar_Evm_V1beta1_Status = .unspecified

  var isExternal: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _details: Axelar_Evm_V1beta1_TokenDetails? = nil
}

struct Axelar_Evm_V1beta1_TransactionMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rawTx: Data = Data()

  var pubKey: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Evm_V1beta1_Command {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Data = Data()

  var command: String = String()

  var params: Data = Data()

  var keyID: String = String()

  var maxGasCost: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Evm_V1beta1_CommandBatchMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Data = Data()

  var commandIds: [Data] = []

  var data: Data = Data()

  var sigHash: Data = Data()

  var status: Axelar_Evm_V1beta1_BatchedCommandsStatus = .unspecified

  var keyID: String = String()

  var prevBatchedCommandsID: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SigMetadata stores necessary information for external apps to map signature
/// results to evm relay transaction types
struct Axelar_Evm_V1beta1_SigMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Axelar_Evm_V1beta1_SigType = .unspecified

  var chain: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TransferKey contains information for a transfer ownership or operatorship
struct Axelar_Evm_V1beta1_TransferKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txID: Data = Data()

  var type: Axelar_Evm_V1beta1_TransferKeyType = .unspecified

  var nextKeyID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Evm_V1beta1_Asset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: String = String()

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Evm_V1beta1_TokenDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokenName: String = String()

  var symbol: String = String()

  var decimals: UInt32 = 0

  var capacity: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Evm_V1beta1_Gateway {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: Data = Data()

  var status: Axelar_Evm_V1beta1_Gateway.Status = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case pending // = 1
    case confirmed // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .pending
      case 2: self = .confirmed
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .pending: return 1
      case .confirmed: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Axelar_Evm_V1beta1_Gateway.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Evm_V1beta1_Gateway.Status] = [
    .unspecified,
    .pending,
    .confirmed,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.evm.v1beta1"

extension Axelar_Evm_V1beta1_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "STATUS_INITIALIZED"),
    2: .same(proto: "STATUS_PENDING"),
    4: .same(proto: "STATUS_CONFIRMED"),
  ]
}

extension Axelar_Evm_V1beta1_BatchedCommandsStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BATCHED_COMMANDS_STATUS_UNSPECIFIED"),
    1: .same(proto: "BATCHED_COMMANDS_STATUS_SIGNING"),
    2: .same(proto: "BATCHED_COMMANDS_STATUS_ABORTED"),
    3: .same(proto: "BATCHED_COMMANDS_STATUS_SIGNED"),
  ]
}

extension Axelar_Evm_V1beta1_TransferKeyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRANSFER_KEY_TYPE_UNSPECIFIED"),
    1: .same(proto: "TRANSFER_KEY_TYPE_OWNERSHIP"),
    2: .same(proto: "TRANSFER_KEY_TYPE_OPERATORSHIP"),
  ]
}

extension Axelar_Evm_V1beta1_SigType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIG_TYPE_UNSPECIFIED"),
    1: .same(proto: "SIG_TYPE_TX"),
    2: .same(proto: "SIG_TYPE_COMMAND"),
  ]
}

extension Axelar_Evm_V1beta1_DepositStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEPOSIT_STATUS_UNSPECIFIED"),
    1: .same(proto: "DEPOSIT_STATUS_PENDING"),
    2: .same(proto: "DEPOSIT_STATUS_CONFIRMED"),
    3: .same(proto: "DEPOSIT_STATUS_BURNED"),
  ]
}

extension Axelar_Evm_V1beta1_NetworkInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NetworkInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_NetworkInfo, rhs: Axelar_Evm_V1beta1_NetworkInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.id != rhs.id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_BurnerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BurnerInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "burner_address"),
    2: .standard(proto: "token_address"),
    3: .standard(proto: "destination_chain"),
    4: .same(proto: "symbol"),
    5: .same(proto: "asset"),
    6: .same(proto: "salt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.burnerAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.tokenAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.destinationChain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.asset) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.salt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.burnerAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.burnerAddress, fieldNumber: 1)
    }
    if !self.tokenAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.tokenAddress, fieldNumber: 2)
    }
    if !self.destinationChain.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationChain, fieldNumber: 3)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 4)
    }
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 5)
    }
    if !self.salt.isEmpty {
      try visitor.visitSingularBytesField(value: self.salt, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_BurnerInfo, rhs: Axelar_Evm_V1beta1_BurnerInfo) -> Bool {
    if lhs.burnerAddress != rhs.burnerAddress {return false}
    if lhs.tokenAddress != rhs.tokenAddress {return false}
    if lhs.destinationChain != rhs.destinationChain {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.asset != rhs.asset {return false}
    if lhs.salt != rhs.salt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_ERC20Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ERC20Deposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_id"),
    2: .same(proto: "amount"),
    3: .same(proto: "asset"),
    4: .standard(proto: "destination_chain"),
    5: .standard(proto: "burner_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.txID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.asset) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.destinationChain) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.burnerAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txID.isEmpty {
      try visitor.visitSingularBytesField(value: self.txID, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 2)
    }
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 3)
    }
    if !self.destinationChain.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationChain, fieldNumber: 4)
    }
    if !self.burnerAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.burnerAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_ERC20Deposit, rhs: Axelar_Evm_V1beta1_ERC20Deposit) -> Bool {
    if lhs.txID != rhs.txID {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.asset != rhs.asset {return false}
    if lhs.destinationChain != rhs.destinationChain {return false}
    if lhs.burnerAddress != rhs.burnerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_ERC20TokenMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ERC20TokenMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "details"),
    4: .standard(proto: "token_address"),
    5: .standard(proto: "tx_hash"),
    6: .standard(proto: "min_amount"),
    7: .same(proto: "status"),
    8: .standard(proto: "is_external"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.asset) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.chainID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._details) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.minAmount) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isExternal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.asset.isEmpty {
      try visitor.visitSingularStringField(value: self.asset, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularBytesField(value: self.chainID, fieldNumber: 2)
    }
    if let v = self._details {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.tokenAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenAddress, fieldNumber: 4)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 5)
    }
    if !self.minAmount.isEmpty {
      try visitor.visitSingularBytesField(value: self.minAmount, fieldNumber: 6)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 7)
    }
    if self.isExternal != false {
      try visitor.visitSingularBoolField(value: self.isExternal, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_ERC20TokenMetadata, rhs: Axelar_Evm_V1beta1_ERC20TokenMetadata) -> Bool {
    if lhs.asset != rhs.asset {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs._details != rhs._details {return false}
    if lhs.tokenAddress != rhs.tokenAddress {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.minAmount != rhs.minAmount {return false}
    if lhs.status != rhs.status {return false}
    if lhs.isExternal != rhs.isExternal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_TransactionMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransactionMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "raw_tx"),
    2: .standard(proto: "pub_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.rawTx) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.pubKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rawTx.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawTx, fieldNumber: 1)
    }
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_TransactionMetadata, rhs: Axelar_Evm_V1beta1_TransactionMetadata) -> Bool {
    if lhs.rawTx != rhs.rawTx {return false}
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_Command: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Command"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "command"),
    3: .same(proto: "params"),
    4: .standard(proto: "key_id"),
    5: .standard(proto: "max_gas_cost"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.command) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.params) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.maxGasCost) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.command.isEmpty {
      try visitor.visitSingularStringField(value: self.command, fieldNumber: 2)
    }
    if !self.params.isEmpty {
      try visitor.visitSingularBytesField(value: self.params, fieldNumber: 3)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 4)
    }
    if self.maxGasCost != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxGasCost, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_Command, rhs: Axelar_Evm_V1beta1_Command) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.command != rhs.command {return false}
    if lhs.params != rhs.params {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.maxGasCost != rhs.maxGasCost {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_CommandBatchMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandBatchMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "command_ids"),
    3: .same(proto: "data"),
    4: .standard(proto: "sig_hash"),
    5: .same(proto: "status"),
    6: .standard(proto: "key_id"),
    7: .standard(proto: "prev_batched_commands_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.commandIds) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.sigHash) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.prevBatchedCommandsID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.commandIds.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.commandIds, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if !self.sigHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.sigHash, fieldNumber: 4)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 6)
    }
    if !self.prevBatchedCommandsID.isEmpty {
      try visitor.visitSingularBytesField(value: self.prevBatchedCommandsID, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_CommandBatchMetadata, rhs: Axelar_Evm_V1beta1_CommandBatchMetadata) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.commandIds != rhs.commandIds {return false}
    if lhs.data != rhs.data {return false}
    if lhs.sigHash != rhs.sigHash {return false}
    if lhs.status != rhs.status {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.prevBatchedCommandsID != rhs.prevBatchedCommandsID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_SigMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "chain"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_SigMetadata, rhs: Axelar_Evm_V1beta1_SigMetadata) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.chain != rhs.chain {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_TransferKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransferKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_id"),
    2: .same(proto: "type"),
    3: .standard(proto: "next_key_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.txID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.nextKeyID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txID.isEmpty {
      try visitor.visitSingularBytesField(value: self.txID, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.nextKeyID.isEmpty {
      try visitor.visitSingularStringField(value: self.nextKeyID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_TransferKey, rhs: Axelar_Evm_V1beta1_TransferKey) -> Bool {
    if lhs.txID != rhs.txID {return false}
    if lhs.type != rhs.type {return false}
    if lhs.nextKeyID != rhs.nextKeyID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_Asset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Asset"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_Asset, rhs: Axelar_Evm_V1beta1_Asset) -> Bool {
    if lhs.chain != rhs.chain {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_TokenDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_name"),
    2: .same(proto: "symbol"),
    3: .same(proto: "decimals"),
    4: .same(proto: "capacity"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.decimals) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.capacity) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenName.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenName, fieldNumber: 1)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 2)
    }
    if self.decimals != 0 {
      try visitor.visitSingularUInt32Field(value: self.decimals, fieldNumber: 3)
    }
    if !self.capacity.isEmpty {
      try visitor.visitSingularBytesField(value: self.capacity, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_TokenDetails, rhs: Axelar_Evm_V1beta1_TokenDetails) -> Bool {
    if lhs.tokenName != rhs.tokenName {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.capacity != rhs.capacity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_Gateway: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Gateway"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_Gateway, rhs: Axelar_Evm_V1beta1_Gateway) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_Gateway.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_UNSPECIFIED"),
    1: .same(proto: "STATUS_PENDING"),
    2: .same(proto: "STATUS_CONFIRMED"),
  ]
}
