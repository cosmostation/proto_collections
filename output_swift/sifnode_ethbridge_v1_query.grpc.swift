//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sifnode/ethbridge/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query service for queries
///
/// Usage: instantiate `Sifnode_Ethbridge_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Sifnode_Ethbridge_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sifnode_Ethbridge_V1_QueryClientInterceptorFactoryProtocol? { get }

  func ethProphecy(
    _ request: Sifnode_Ethbridge_V1_QueryEthProphecyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Ethbridge_V1_QueryEthProphecyRequest, Sifnode_Ethbridge_V1_QueryEthProphecyResponse>

  func getBlacklist(
    _ request: Sifnode_Ethbridge_V1_QueryBlacklistRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Ethbridge_V1_QueryBlacklistRequest, Sifnode_Ethbridge_V1_QueryBlacklistResponse>
}

extension Sifnode_Ethbridge_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "sifnode.ethbridge.v1.Query"
  }

  /// EthProphecy queries an EthProphecy
  ///
  /// - Parameters:
  ///   - request: Request to send to EthProphecy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ethProphecy(
    _ request: Sifnode_Ethbridge_V1_QueryEthProphecyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Ethbridge_V1_QueryEthProphecyRequest, Sifnode_Ethbridge_V1_QueryEthProphecyResponse> {
    return self.makeUnaryCall(
      path: "/sifnode.ethbridge.v1.Query/EthProphecy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthProphecyInterceptors() ?? []
    )
  }

  /// Unary call to GetBlacklist
  ///
  /// - Parameters:
  ///   - request: Request to send to GetBlacklist.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getBlacklist(
    _ request: Sifnode_Ethbridge_V1_QueryBlacklistRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Ethbridge_V1_QueryBlacklistRequest, Sifnode_Ethbridge_V1_QueryBlacklistResponse> {
    return self.makeUnaryCall(
      path: "/sifnode.ethbridge.v1.Query/GetBlacklist",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetBlacklistInterceptors() ?? []
    )
  }
}

internal protocol Sifnode_Ethbridge_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'ethProphecy'.
  func makeEthProphecyInterceptors() -> [ClientInterceptor<Sifnode_Ethbridge_V1_QueryEthProphecyRequest, Sifnode_Ethbridge_V1_QueryEthProphecyResponse>]

  /// - Returns: Interceptors to use when invoking 'getBlacklist'.
  func makeGetBlacklistInterceptors() -> [ClientInterceptor<Sifnode_Ethbridge_V1_QueryBlacklistRequest, Sifnode_Ethbridge_V1_QueryBlacklistResponse>]
}

internal final class Sifnode_Ethbridge_V1_QueryClient: Sifnode_Ethbridge_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sifnode_Ethbridge_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the sifnode.ethbridge.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sifnode_Ethbridge_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query service for queries
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Sifnode_Ethbridge_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Sifnode_Ethbridge_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// EthProphecy queries an EthProphecy
  func ethProphecy(request: Sifnode_Ethbridge_V1_QueryEthProphecyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Ethbridge_V1_QueryEthProphecyResponse>

  func getBlacklist(request: Sifnode_Ethbridge_V1_QueryBlacklistRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Ethbridge_V1_QueryBlacklistResponse>
}

extension Sifnode_Ethbridge_V1_QueryProvider {
  internal var serviceName: Substring { return "sifnode.ethbridge.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EthProphecy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Ethbridge_V1_QueryEthProphecyRequest>(),
        responseSerializer: ProtobufSerializer<Sifnode_Ethbridge_V1_QueryEthProphecyResponse>(),
        interceptors: self.interceptors?.makeEthProphecyInterceptors() ?? [],
        userFunction: self.ethProphecy(request:context:)
      )

    case "GetBlacklist":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Ethbridge_V1_QueryBlacklistRequest>(),
        responseSerializer: ProtobufSerializer<Sifnode_Ethbridge_V1_QueryBlacklistResponse>(),
        interceptors: self.interceptors?.makeGetBlacklistInterceptors() ?? [],
        userFunction: self.getBlacklist(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sifnode_Ethbridge_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ethProphecy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEthProphecyInterceptors() -> [ServerInterceptor<Sifnode_Ethbridge_V1_QueryEthProphecyRequest, Sifnode_Ethbridge_V1_QueryEthProphecyResponse>]

  /// - Returns: Interceptors to use when handling 'getBlacklist'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetBlacklistInterceptors() -> [ServerInterceptor<Sifnode_Ethbridge_V1_QueryBlacklistRequest, Sifnode_Ethbridge_V1_QueryBlacklistResponse>]
}
