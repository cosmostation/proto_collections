//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kava/bep3/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the bep3 Msg service.
///
/// Usage: instantiate `Kava_Bep3_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Kava_Bep3_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kava_Bep3_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgCreateAtomicSwap,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgCreateAtomicSwap, Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse>

  func claimAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgClaimAtomicSwap,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgClaimAtomicSwap, Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse>

  func refundAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgRefundAtomicSwap,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgRefundAtomicSwap, Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse>
}

extension Kava_Bep3_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "kava.bep3.v1beta1.Msg"
  }

  /// CreateAtomicSwap defines a method for creating an atomic swap
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateAtomicSwap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgCreateAtomicSwap,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgCreateAtomicSwap, Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse> {
    return self.makeUnaryCall(
      path: "/kava.bep3.v1beta1.Msg/CreateAtomicSwap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateAtomicSwapInterceptors() ?? []
    )
  }

  /// ClaimAtomicSwap defines a method for claiming an atomic swap
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimAtomicSwap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgClaimAtomicSwap,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgClaimAtomicSwap, Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse> {
    return self.makeUnaryCall(
      path: "/kava.bep3.v1beta1.Msg/ClaimAtomicSwap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAtomicSwapInterceptors() ?? []
    )
  }

  /// RefundAtomicSwap defines a method for refunding an atomic swap
  ///
  /// - Parameters:
  ///   - request: Request to send to RefundAtomicSwap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func refundAtomicSwap(
    _ request: Kava_Bep3_V1beta1_MsgRefundAtomicSwap,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Bep3_V1beta1_MsgRefundAtomicSwap, Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse> {
    return self.makeUnaryCall(
      path: "/kava.bep3.v1beta1.Msg/RefundAtomicSwap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRefundAtomicSwapInterceptors() ?? []
    )
  }
}

internal protocol Kava_Bep3_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createAtomicSwap'.
  func makeCreateAtomicSwapInterceptors() -> [ClientInterceptor<Kava_Bep3_V1beta1_MsgCreateAtomicSwap, Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse>]

  /// - Returns: Interceptors to use when invoking 'claimAtomicSwap'.
  func makeClaimAtomicSwapInterceptors() -> [ClientInterceptor<Kava_Bep3_V1beta1_MsgClaimAtomicSwap, Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse>]

  /// - Returns: Interceptors to use when invoking 'refundAtomicSwap'.
  func makeRefundAtomicSwapInterceptors() -> [ClientInterceptor<Kava_Bep3_V1beta1_MsgRefundAtomicSwap, Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse>]
}

internal final class Kava_Bep3_V1beta1_MsgClient: Kava_Bep3_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Bep3_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the kava.bep3.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Bep3_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the bep3 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kava_Bep3_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Kava_Bep3_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateAtomicSwap defines a method for creating an atomic swap
  func createAtomicSwap(request: Kava_Bep3_V1beta1_MsgCreateAtomicSwap, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse>

  /// ClaimAtomicSwap defines a method for claiming an atomic swap
  func claimAtomicSwap(request: Kava_Bep3_V1beta1_MsgClaimAtomicSwap, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse>

  /// RefundAtomicSwap defines a method for refunding an atomic swap
  func refundAtomicSwap(request: Kava_Bep3_V1beta1_MsgRefundAtomicSwap, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse>
}

extension Kava_Bep3_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "kava.bep3.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateAtomicSwap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Bep3_V1beta1_MsgCreateAtomicSwap>(),
        responseSerializer: ProtobufSerializer<Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse>(),
        interceptors: self.interceptors?.makeCreateAtomicSwapInterceptors() ?? [],
        userFunction: self.createAtomicSwap(request:context:)
      )

    case "ClaimAtomicSwap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Bep3_V1beta1_MsgClaimAtomicSwap>(),
        responseSerializer: ProtobufSerializer<Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse>(),
        interceptors: self.interceptors?.makeClaimAtomicSwapInterceptors() ?? [],
        userFunction: self.claimAtomicSwap(request:context:)
      )

    case "RefundAtomicSwap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Bep3_V1beta1_MsgRefundAtomicSwap>(),
        responseSerializer: ProtobufSerializer<Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse>(),
        interceptors: self.interceptors?.makeRefundAtomicSwapInterceptors() ?? [],
        userFunction: self.refundAtomicSwap(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kava_Bep3_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createAtomicSwap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateAtomicSwapInterceptors() -> [ServerInterceptor<Kava_Bep3_V1beta1_MsgCreateAtomicSwap, Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse>]

  /// - Returns: Interceptors to use when handling 'claimAtomicSwap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimAtomicSwapInterceptors() -> [ServerInterceptor<Kava_Bep3_V1beta1_MsgClaimAtomicSwap, Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse>]

  /// - Returns: Interceptors to use when handling 'refundAtomicSwap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRefundAtomicSwapInterceptors() -> [ServerInterceptor<Kava_Bep3_V1beta1_MsgRefundAtomicSwap, Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse>]
}
