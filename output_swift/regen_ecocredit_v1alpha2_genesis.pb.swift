// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: regen/ecocredit/v1alpha2/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines ecocredit module's genesis state.
struct Regen_Ecocredit_V1alpha2_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Params contains the updateable global parameters for use with the x/params
  /// module
  var params: Regen_Ecocredit_V1alpha2_Params {
    get {return _params ?? Regen_Ecocredit_V1alpha2_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// class_info is the list of credit class info.
  var classInfo: [Regen_Ecocredit_V1alpha2_ClassInfo] = []

  /// batch_info is the list of credit batch info.
  var batchInfo: [Regen_Ecocredit_V1alpha2_BatchInfo] = []

  /// sequences is the list of credit type sequence.
  var sequences: [Regen_Ecocredit_V1alpha2_CreditTypeSeq] = []

  /// balances is the list of credit batch tradable/retired units.
  var balances: [Regen_Ecocredit_V1alpha2_Balance] = []

  /// supplies is the list of credit batch tradable/retired supply.
  var supplies: [Regen_Ecocredit_V1alpha2_Supply] = []

  /// project_info is the list of projects.
  var projectInfo: [Regen_Ecocredit_V1alpha2_ProjectInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Regen_Ecocredit_V1alpha2_Params? = nil
}

/// Balance represents tradable or retired units of a credit batch with an
/// account address, batch_denom, and balance.
struct Regen_Ecocredit_V1alpha2_Balance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address is the account address of the account holding credits.
  var address: String = String()

  /// batch_denom is the unique ID of the credit batch.
  var batchDenom: String = String()

  /// tradable_balance is the tradable balance of the credit batch.
  var tradableBalance: String = String()

  /// retired_balance is the retired balance of the credit batch.
  var retiredBalance: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Supply represents a tradable or retired supply of a credit batch.
struct Regen_Ecocredit_V1alpha2_Supply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// batch_denom is the unique ID of the credit batch.
  var batchDenom: String = String()

  /// tradable_supply is the tradable supply of the credit batch.
  var tradableSupply: String = String()

  /// retired_supply is the retired supply of the credit batch.
  var retiredSupply: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "regen.ecocredit.v1alpha2"

extension Regen_Ecocredit_V1alpha2_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "class_info"),
    3: .standard(proto: "batch_info"),
    4: .same(proto: "sequences"),
    5: .same(proto: "balances"),
    6: .same(proto: "supplies"),
    7: .standard(proto: "project_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.classInfo) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.batchInfo) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sequences) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.balances) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.supplies) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.projectInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.classInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.classInfo, fieldNumber: 2)
    }
    if !self.batchInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.batchInfo, fieldNumber: 3)
    }
    if !self.sequences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sequences, fieldNumber: 4)
    }
    if !self.balances.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.balances, fieldNumber: 5)
    }
    if !self.supplies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.supplies, fieldNumber: 6)
    }
    if !self.projectInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.projectInfo, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_GenesisState, rhs: Regen_Ecocredit_V1alpha2_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.classInfo != rhs.classInfo {return false}
    if lhs.batchInfo != rhs.batchInfo {return false}
    if lhs.sequences != rhs.sequences {return false}
    if lhs.balances != rhs.balances {return false}
    if lhs.supplies != rhs.supplies {return false}
    if lhs.projectInfo != rhs.projectInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_Balance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Balance"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "batch_denom"),
    3: .standard(proto: "tradable_balance"),
    4: .standard(proto: "retired_balance"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tradableBalance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.retiredBalance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 2)
    }
    if !self.tradableBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.tradableBalance, fieldNumber: 3)
    }
    if !self.retiredBalance.isEmpty {
      try visitor.visitSingularStringField(value: self.retiredBalance, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_Balance, rhs: Regen_Ecocredit_V1alpha2_Balance) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.tradableBalance != rhs.tradableBalance {return false}
    if lhs.retiredBalance != rhs.retiredBalance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_Supply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Supply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "batch_denom"),
    2: .standard(proto: "tradable_supply"),
    3: .standard(proto: "retired_supply"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tradableSupply) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.retiredSupply) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 1)
    }
    if !self.tradableSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.tradableSupply, fieldNumber: 2)
    }
    if !self.retiredSupply.isEmpty {
      try visitor.visitSingularStringField(value: self.retiredSupply, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_Supply, rhs: Regen_Ecocredit_V1alpha2_Supply) -> Bool {
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.tradableSupply != rhs.tradableSupply {return false}
    if lhs.retiredSupply != rhs.retiredSupply {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
