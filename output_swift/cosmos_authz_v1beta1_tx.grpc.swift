//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/authz/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the authz Msg service.
///
/// Usage: instantiate `Cosmos_Authz_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Authz_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Authz_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func grant(
    _ request: Cosmos_Authz_V1beta1_MsgGrant,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgGrant, Cosmos_Authz_V1beta1_MsgGrantResponse>

  func exec(
    _ request: Cosmos_Authz_V1beta1_MsgExec,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgExec, Cosmos_Authz_V1beta1_MsgExecResponse>

  func revoke(
    _ request: Cosmos_Authz_V1beta1_MsgRevoke,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgRevoke, Cosmos_Authz_V1beta1_MsgRevokeResponse>
}

extension Cosmos_Authz_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "cosmos.authz.v1beta1.Msg"
  }

  /// Grant grants the provided authorization to the grantee on the granter's
  /// account with the provided expiration time. If there is already a grant
  /// for the given (granter, grantee, Authorization) triple, then the grant
  /// will be overwritten.
  ///
  /// - Parameters:
  ///   - request: Request to send to Grant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func grant(
    _ request: Cosmos_Authz_V1beta1_MsgGrant,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgGrant, Cosmos_Authz_V1beta1_MsgGrantResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.authz.v1beta1.Msg/Grant",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGrantInterceptors() ?? []
    )
  }

  /// Exec attempts to execute the provided messages using
  /// authorizations granted to the grantee. Each message should have only
  /// one signer corresponding to the granter of the authorization.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exec(
    _ request: Cosmos_Authz_V1beta1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgExec, Cosmos_Authz_V1beta1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.authz.v1beta1.Msg/Exec",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  /// Revoke revokes any authorization corresponding to the provided method name on the
  /// granter's account that has been granted to the grantee.
  ///
  /// - Parameters:
  ///   - request: Request to send to Revoke.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revoke(
    _ request: Cosmos_Authz_V1beta1_MsgRevoke,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Authz_V1beta1_MsgRevoke, Cosmos_Authz_V1beta1_MsgRevokeResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.authz.v1beta1.Msg/Revoke",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Authz_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'grant'.
  func makeGrantInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_MsgGrant, Cosmos_Authz_V1beta1_MsgGrantResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_MsgExec, Cosmos_Authz_V1beta1_MsgExecResponse>]

  /// - Returns: Interceptors to use when invoking 'revoke'.
  func makeRevokeInterceptors() -> [ClientInterceptor<Cosmos_Authz_V1beta1_MsgRevoke, Cosmos_Authz_V1beta1_MsgRevokeResponse>]
}

internal final class Cosmos_Authz_V1beta1_MsgClient: Cosmos_Authz_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Authz_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.authz.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Authz_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the authz Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Authz_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Cosmos_Authz_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// Grant grants the provided authorization to the grantee on the granter's
  /// account with the provided expiration time. If there is already a grant
  /// for the given (granter, grantee, Authorization) triple, then the grant
  /// will be overwritten.
  func grant(request: Cosmos_Authz_V1beta1_MsgGrant, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_MsgGrantResponse>

  /// Exec attempts to execute the provided messages using
  /// authorizations granted to the grantee. Each message should have only
  /// one signer corresponding to the granter of the authorization.
  func exec(request: Cosmos_Authz_V1beta1_MsgExec, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_MsgExecResponse>

  /// Revoke revokes any authorization corresponding to the provided method name on the
  /// granter's account that has been granted to the grantee.
  func revoke(request: Cosmos_Authz_V1beta1_MsgRevoke, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Authz_V1beta1_MsgRevokeResponse>
}

extension Cosmos_Authz_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "cosmos.authz.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Grant":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_MsgGrant>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_MsgGrantResponse>(),
        interceptors: self.interceptors?.makeGrantInterceptors() ?? [],
        userFunction: self.grant(request:context:)
      )

    case "Exec":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_MsgExec>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        userFunction: self.exec(request:context:)
      )

    case "Revoke":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Authz_V1beta1_MsgRevoke>(),
        responseSerializer: ProtobufSerializer<Cosmos_Authz_V1beta1_MsgRevokeResponse>(),
        interceptors: self.interceptors?.makeRevokeInterceptors() ?? [],
        userFunction: self.revoke(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Authz_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'grant'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGrantInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_MsgGrant, Cosmos_Authz_V1beta1_MsgGrantResponse>]

  /// - Returns: Interceptors to use when handling 'exec'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_MsgExec, Cosmos_Authz_V1beta1_MsgExecResponse>]

  /// - Returns: Interceptors to use when handling 'revoke'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeInterceptors() -> [ServerInterceptor<Cosmos_Authz_V1beta1_MsgRevoke, Cosmos_Authz_V1beta1_MsgRevokeResponse>]
}
