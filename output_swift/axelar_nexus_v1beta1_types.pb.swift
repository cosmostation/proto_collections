// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/nexus/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ChainState represents the state of a registered blockchain
struct Axelar_Nexus_V1beta1_ChainState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chain: Axelar_Nexus_Exported_V1beta1_Chain {
    get {return _chain ?? Axelar_Nexus_Exported_V1beta1_Chain()}
    set {_chain = newValue}
  }
  /// Returns true if `chain` has been explicitly set.
  var hasChain: Bool {return self._chain != nil}
  /// Clears the value of `chain`. Subsequent reads from it will return its default value.
  mutating func clearChain() {self._chain = nil}

  var maintainers: [Data] = []

  var activated: Bool = false

  var assets: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _chain: Axelar_Nexus_Exported_V1beta1_Chain? = nil
}

struct Axelar_Nexus_V1beta1_LinkedAddresses {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
    get {return _depositAddress ?? Axelar_Nexus_Exported_V1beta1_CrossChainAddress()}
    set {_depositAddress = newValue}
  }
  /// Returns true if `depositAddress` has been explicitly set.
  var hasDepositAddress: Bool {return self._depositAddress != nil}
  /// Clears the value of `depositAddress`. Subsequent reads from it will return its default value.
  mutating func clearDepositAddress() {self._depositAddress = nil}

  var recipientAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress {
    get {return _recipientAddress ?? Axelar_Nexus_Exported_V1beta1_CrossChainAddress()}
    set {_recipientAddress = newValue}
  }
  /// Returns true if `recipientAddress` has been explicitly set.
  var hasRecipientAddress: Bool {return self._recipientAddress != nil}
  /// Clears the value of `recipientAddress`. Subsequent reads from it will return its default value.
  mutating func clearRecipientAddress() {self._recipientAddress = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _depositAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress? = nil
  fileprivate var _recipientAddress: Axelar_Nexus_Exported_V1beta1_CrossChainAddress? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.nexus.v1beta1"

extension Axelar_Nexus_V1beta1_ChainState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ChainState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chain"),
    2: .same(proto: "maintainers"),
    3: .same(proto: "activated"),
    5: .same(proto: "assets"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._chain) }()
      case 2: try { try decoder.decodeRepeatedBytesField(value: &self.maintainers) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.activated) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.assets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._chain {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.maintainers.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.maintainers, fieldNumber: 2)
    }
    if self.activated != false {
      try visitor.visitSingularBoolField(value: self.activated, fieldNumber: 3)
    }
    if !self.assets.isEmpty {
      try visitor.visitRepeatedStringField(value: self.assets, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_ChainState, rhs: Axelar_Nexus_V1beta1_ChainState) -> Bool {
    if lhs._chain != rhs._chain {return false}
    if lhs.maintainers != rhs.maintainers {return false}
    if lhs.activated != rhs.activated {return false}
    if lhs.assets != rhs.assets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Nexus_V1beta1_LinkedAddresses: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LinkedAddresses"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deposit_address"),
    2: .standard(proto: "recipient_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._depositAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._recipientAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._depositAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._recipientAddress {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Nexus_V1beta1_LinkedAddresses, rhs: Axelar_Nexus_V1beta1_LinkedAddresses) -> Bool {
    if lhs._depositAddress != rhs._depositAddress {return false}
    if lhs._recipientAddress != rhs._recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
