// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/evm/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState represents the genesis state
struct Axelar_Evm_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chains: [Axelar_Evm_V1beta1_GenesisState.Chain] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Chain {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var params: Axelar_Evm_V1beta1_Params {
      get {return _storage._params ?? Axelar_Evm_V1beta1_Params()}
      set {_uniqueStorage()._params = newValue}
    }
    /// Returns true if `params` has been explicitly set.
    var hasParams: Bool {return _storage._params != nil}
    /// Clears the value of `params`. Subsequent reads from it will return its default value.
    mutating func clearParams() {_uniqueStorage()._params = nil}

    var burnerInfos: [Axelar_Evm_V1beta1_BurnerInfo] {
      get {return _storage._burnerInfos}
      set {_uniqueStorage()._burnerInfos = newValue}
    }

    var commandQueue: Dictionary<String,Axelar_Evm_V1beta1_Command> {
      get {return _storage._commandQueue}
      set {_uniqueStorage()._commandQueue = newValue}
    }

    var confirmedDeposits: [Axelar_Evm_V1beta1_ERC20Deposit] {
      get {return _storage._confirmedDeposits}
      set {_uniqueStorage()._confirmedDeposits = newValue}
    }

    var burnedDeposits: [Axelar_Evm_V1beta1_ERC20Deposit] {
      get {return _storage._burnedDeposits}
      set {_uniqueStorage()._burnedDeposits = newValue}
    }

    var commandBatches: [Axelar_Evm_V1beta1_CommandBatchMetadata] {
      get {return _storage._commandBatches}
      set {_uniqueStorage()._commandBatches = newValue}
    }

    var gateway: Axelar_Evm_V1beta1_Gateway {
      get {return _storage._gateway ?? Axelar_Evm_V1beta1_Gateway()}
      set {_uniqueStorage()._gateway = newValue}
    }
    /// Returns true if `gateway` has been explicitly set.
    var hasGateway: Bool {return _storage._gateway != nil}
    /// Clears the value of `gateway`. Subsequent reads from it will return its default value.
    mutating func clearGateway() {_uniqueStorage()._gateway = nil}

    var tokens: [Axelar_Evm_V1beta1_ERC20TokenMetadata] {
      get {return _storage._tokens}
      set {_uniqueStorage()._tokens = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.evm.v1beta1"

extension Axelar_Evm_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "chains"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.chains) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chains.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chains, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_GenesisState, rhs: Axelar_Evm_V1beta1_GenesisState) -> Bool {
    if lhs.chains != rhs.chains {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Evm_V1beta1_GenesisState.Chain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Evm_V1beta1_GenesisState.protoMessageName + ".Chain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "burner_infos"),
    3: .standard(proto: "command_queue"),
    4: .standard(proto: "confirmed_deposits"),
    5: .standard(proto: "burned_deposits"),
    8: .standard(proto: "command_batches"),
    9: .same(proto: "gateway"),
    10: .same(proto: "tokens"),
  ]

  fileprivate class _StorageClass {
    var _params: Axelar_Evm_V1beta1_Params? = nil
    var _burnerInfos: [Axelar_Evm_V1beta1_BurnerInfo] = []
    var _commandQueue: Dictionary<String,Axelar_Evm_V1beta1_Command> = [:]
    var _confirmedDeposits: [Axelar_Evm_V1beta1_ERC20Deposit] = []
    var _burnedDeposits: [Axelar_Evm_V1beta1_ERC20Deposit] = []
    var _commandBatches: [Axelar_Evm_V1beta1_CommandBatchMetadata] = []
    var _gateway: Axelar_Evm_V1beta1_Gateway? = nil
    var _tokens: [Axelar_Evm_V1beta1_ERC20TokenMetadata] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _burnerInfos = source._burnerInfos
      _commandQueue = source._commandQueue
      _confirmedDeposits = source._confirmedDeposits
      _burnedDeposits = source._burnedDeposits
      _commandBatches = source._commandBatches
      _gateway = source._gateway
      _tokens = source._tokens
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._burnerInfos) }()
        case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Axelar_Evm_V1beta1_Command>.self, value: &_storage._commandQueue) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._confirmedDeposits) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._burnedDeposits) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._commandBatches) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._gateway) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._tokens) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._burnerInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._burnerInfos, fieldNumber: 2)
      }
      if !_storage._commandQueue.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Axelar_Evm_V1beta1_Command>.self, value: _storage._commandQueue, fieldNumber: 3)
      }
      if !_storage._confirmedDeposits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._confirmedDeposits, fieldNumber: 4)
      }
      if !_storage._burnedDeposits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._burnedDeposits, fieldNumber: 5)
      }
      if !_storage._commandBatches.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commandBatches, fieldNumber: 8)
      }
      if let v = _storage._gateway {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._tokens.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tokens, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Evm_V1beta1_GenesisState.Chain, rhs: Axelar_Evm_V1beta1_GenesisState.Chain) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._burnerInfos != rhs_storage._burnerInfos {return false}
        if _storage._commandQueue != rhs_storage._commandQueue {return false}
        if _storage._confirmedDeposits != rhs_storage._confirmedDeposits {return false}
        if _storage._burnedDeposits != rhs_storage._burnedDeposits {return false}
        if _storage._commandBatches != rhs_storage._commandBatches {return false}
        if _storage._gateway != rhs_storage._gateway {return false}
        if _storage._tokens != rhs_storage._tokens {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
