// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: regen/ecocredit/v1alpha2/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventCreateClass is an event emitted when a credit class is created.
struct Regen_Ecocredit_V1alpha2_EventCreateClass {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// class_id is the unique ID of credit class.
  var classID: String = String()

  /// admin is the admin of the credit class.
  var admin: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventCreateProject is an event emitted when a project is created.
struct Regen_Ecocredit_V1alpha2_EventCreateProject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// project_id is the unique ID of the project.
  var projectID: String = String()

  /// class_id is the unique ID of credit class for this project.
  var classID: String = String()

  /// issuer is the issuer of the credit batches for this project.
  var issuer: String = String()

  /// project_location is the location of the project.
  /// Full documentation can be found in MsgCreateProject.project_location.
  var projectLocation: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventCreateBatch is an event emitted when a credit batch is created.
struct Regen_Ecocredit_V1alpha2_EventCreateBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// class_id is the unique ID of credit class.
  var classID: String = String()

  /// batch_denom is the unique ID of credit batch.
  var batchDenom: String = String()

  /// issuer is the account address of the issuer of the credit batch.
  var issuer: String = String()

  /// total_amount is the total number of credits in the credit batch.
  var totalAmount: String = String()

  /// start_date is the beginning of the period during which this credit batch
  /// was quantified and verified.
  var startDate: String = String()

  /// end_date is the end of the period during which this credit batch was
  /// quantified and verified.
  var endDate: String = String()

  /// project_location is the location of the project.
  /// Full documentation can be found in MsgCreateProject.project_location.
  var projectLocation: String = String()

  /// project_id is the unique ID of the project this batch belongs to.
  var projectID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventReceive is an event emitted when credits are received either upon
/// creation of a new batch or upon transfer. Each batch_denom created or
/// transferred will result in a separate EventReceive for easy indexing.
struct Regen_Ecocredit_V1alpha2_EventReceive {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// sender is the sender of the credits in the case that this event is the
  /// result of a transfer. It will not be set when credits are received at
  /// initial issuance.
  var sender: String = String()

  /// recipient is the recipient of the credits
  var recipient: String = String()

  /// batch_denom is the unique ID of credit batch.
  var batchDenom: String = String()

  /// tradable_amount is the decimal number of tradable credits received.
  var tradableAmount: String = String()

  /// retired_amount is the decimal number of retired credits received.
  var retiredAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRetire is an event emitted when credits are retired. When credits are
/// retired from multiple batches in the same transaction, a separate event is
/// emitted for each batch_denom. This allows for easier indexing.
struct Regen_Ecocredit_V1alpha2_EventRetire {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// retirer is the account which has done the "retiring". This will be the
  /// account receiving credits in the case that credits were retired upon
  /// issuance using Msg/CreateBatch or retired upon transfer using Msg/Send.
  var retirer: String = String()

  /// batch_denom is the unique ID of credit batch.
  var batchDenom: String = String()

  /// amount is the decimal number of credits that have been retired.
  var amount: String = String()

  /// location is the location of the beneficiary or buyer of the retired
  /// credits. It is a string of the form
  /// <country-code>[-<sub-national-code>[ <postal-code>]], with the first two
  /// fields conforming to ISO 3166-2, and postal-code being up to 64
  /// alphanumeric characters.
  var location: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventCancel is an event emitted when credits are cancelled. When credits are
/// cancelled from multiple batches in the same transaction, a separate event is
/// emitted for each batch_denom. This allows for easier indexing.
struct Regen_Ecocredit_V1alpha2_EventCancel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// canceller is the account which has cancelled the credits, which should be
  /// the holder of the credits.
  var canceller: String = String()

  /// batch_denom is the unique ID of credit batch.
  var batchDenom: String = String()

  /// amount is the decimal number of credits that have been cancelled.
  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventSell is an event emitted when a sell order is created.
struct Regen_Ecocredit_V1alpha2_EventSell {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// order_id is the unique ID of sell order.
  var orderID: UInt64 = 0

  /// batch_denom is the credit batch being sold.
  var batchDenom: String = String()

  /// quantity is the quantity of credits being sold.
  var quantity: String = String()

  /// ask_price is the price the seller is asking for each unit of the
  /// batch_denom. Each credit unit of the batch will be sold for at least the
  /// ask_price or more.
  var askPrice: Cosmos_Base_V1beta1_Coin {
    get {return _askPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_askPrice = newValue}
  }
  /// Returns true if `askPrice` has been explicitly set.
  var hasAskPrice: Bool {return self._askPrice != nil}
  /// Clears the value of `askPrice`. Subsequent reads from it will return its default value.
  mutating func clearAskPrice() {self._askPrice = nil}

  /// disable_auto_retire disables auto-retirement of credits which allows a
  /// buyer to disable auto-retirement in their buy order enabling them to
  /// resell the credits to another buyer.
  var disableAutoRetire: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _askPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventUpdateSellOrder is an event emitted when a sell order is updated.
struct Regen_Ecocredit_V1alpha2_EventUpdateSellOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// owner is the owner of the sell orders.
  var owner: String = String()

  ///  sell_order_id is the ID of an existing sell order.
  var sellOrderID: UInt64 = 0

  /// batch_denom is the credit batch being sold.
  var batchDenom: String = String()

  /// new_quantity is the updated quantity of credits available to sell, if it
  /// is set to zero then the order is cancelled.
  var newQuantity: String = String()

  /// new_ask_price is the new ask price for this sell order
  var newAskPrice: Cosmos_Base_V1beta1_Coin {
    get {return _newAskPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_newAskPrice = newValue}
  }
  /// Returns true if `newAskPrice` has been explicitly set.
  var hasNewAskPrice: Bool {return self._newAskPrice != nil}
  /// Clears the value of `newAskPrice`. Subsequent reads from it will return its default value.
  mutating func clearNewAskPrice() {self._newAskPrice = nil}

  /// disable_auto_retire updates the disable_auto_retire field in the sell order.
  var disableAutoRetire: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _newAskPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventBuyOrderCreated is an event emitted when a buy order is created.
struct Regen_Ecocredit_V1alpha2_EventBuyOrderCreated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// buy_order_id is the unique ID of buy order.
  var buyOrderID: UInt64 = 0

  /// sell_order_id is the sell order ID against which the buyer is trying to buy.
  var sellOrderID: UInt64 = 0

  /// quantity is the quantity of credits to buy. If the quantity of credits
  /// available is less than this amount the order will be partially filled
  /// unless disable_partial_fill is true.
  var quantity: String = String()

  /// bid price is the bid price for this buy order. A credit unit will be
  /// settled at a purchase price that is no more than the bid price. The
  /// buy order will fail if the buyer does not have enough funds available
  /// to complete the purchase.
  var bidPrice: Cosmos_Base_V1beta1_Coin {
    get {return _bidPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_bidPrice = newValue}
  }
  /// Returns true if `bidPrice` has been explicitly set.
  var hasBidPrice: Bool {return self._bidPrice != nil}
  /// Clears the value of `bidPrice`. Subsequent reads from it will return its default value.
  mutating func clearBidPrice() {self._bidPrice = nil}

  /// disable_auto_retire allows auto-retirement to be disabled. If it is set to true
  /// the credits will not auto-retire and can be resold assuming that the
  /// corresponding sell order has auto-retirement disabled. If the sell order
  /// hasn't disabled auto-retirement and the buy order tries to disable it,
  /// that buy order will fail.
  var disableAutoRetire: Bool = false

  /// disable_partial_fill disables the default behavior of partially filling
  /// buy orders if the requested quantity is not available.
  var disablePartialFill: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bidPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventBuyOrderFilled is an event emitted when a buy order is filled.
struct Regen_Ecocredit_V1alpha2_EventBuyOrderFilled {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// buy_order_id is the unique ID of the buy order.
  var buyOrderID: UInt64 = 0

  /// sell_order_id is the unique ID of the sell order.
  var sellOrderID: UInt64 = 0

  /// batch_denom is the credit batch ID of the purchased credits.
  var batchDenom: String = String()

  /// quantity is the quantity of the purchased credits.
  var quantity: String = String()

  /// total_price is the total price for the purchased credits.
  var totalPrice: Cosmos_Base_V1beta1_Coin {
    get {return _totalPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_totalPrice = newValue}
  }
  /// Returns true if `totalPrice` has been explicitly set.
  var hasTotalPrice: Bool {return self._totalPrice != nil}
  /// Clears the value of `totalPrice`. Subsequent reads from it will return its default value.
  mutating func clearTotalPrice() {self._totalPrice = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _totalPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// EventAllowAskDenom is an event emitted when an ask denom is added.
struct Regen_Ecocredit_V1alpha2_EventAllowAskDenom {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// denom is the denom to allow (ex. ibc/GLKHDSG423SGS)
  var denom: String = String()

  /// display_denom is the denom to display to the user and is informational
  var displayDenom: String = String()

  /// exponent is the exponent that relates the denom to the display_denom and is
  /// informational
  var exponent: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "regen.ecocredit.v1alpha2"

extension Regen_Ecocredit_V1alpha2_EventCreateClass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreateClass"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .same(proto: "admin"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.classID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 1)
    }
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventCreateClass, rhs: Regen_Ecocredit_V1alpha2_EventCreateClass) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs.admin != rhs.admin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventCreateProject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreateProject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "class_id"),
    3: .same(proto: "issuer"),
    4: .standard(proto: "project_location"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.classID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.projectLocation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 2)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 3)
    }
    if !self.projectLocation.isEmpty {
      try visitor.visitSingularStringField(value: self.projectLocation, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventCreateProject, rhs: Regen_Ecocredit_V1alpha2_EventCreateProject) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.classID != rhs.classID {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.projectLocation != rhs.projectLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventCreateBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreateBatch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "class_id"),
    2: .standard(proto: "batch_denom"),
    3: .same(proto: "issuer"),
    4: .standard(proto: "total_amount"),
    5: .standard(proto: "start_date"),
    6: .standard(proto: "end_date"),
    7: .standard(proto: "project_location"),
    8: .standard(proto: "project_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.classID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.issuer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.totalAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.startDate) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.endDate) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.projectLocation) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.classID.isEmpty {
      try visitor.visitSingularStringField(value: self.classID, fieldNumber: 1)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 2)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 3)
    }
    if !self.totalAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.totalAmount, fieldNumber: 4)
    }
    if !self.startDate.isEmpty {
      try visitor.visitSingularStringField(value: self.startDate, fieldNumber: 5)
    }
    if !self.endDate.isEmpty {
      try visitor.visitSingularStringField(value: self.endDate, fieldNumber: 6)
    }
    if !self.projectLocation.isEmpty {
      try visitor.visitSingularStringField(value: self.projectLocation, fieldNumber: 7)
    }
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventCreateBatch, rhs: Regen_Ecocredit_V1alpha2_EventCreateBatch) -> Bool {
    if lhs.classID != rhs.classID {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.totalAmount != rhs.totalAmount {return false}
    if lhs.startDate != rhs.startDate {return false}
    if lhs.endDate != rhs.endDate {return false}
    if lhs.projectLocation != rhs.projectLocation {return false}
    if lhs.projectID != rhs.projectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventReceive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventReceive"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "recipient"),
    3: .standard(proto: "batch_denom"),
    4: .standard(proto: "tradable_amount"),
    5: .standard(proto: "retired_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tradableAmount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.retiredAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 3)
    }
    if !self.tradableAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.tradableAmount, fieldNumber: 4)
    }
    if !self.retiredAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.retiredAmount, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventReceive, rhs: Regen_Ecocredit_V1alpha2_EventReceive) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.tradableAmount != rhs.tradableAmount {return false}
    if lhs.retiredAmount != rhs.retiredAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventRetire: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRetire"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "retirer"),
    2: .standard(proto: "batch_denom"),
    3: .same(proto: "amount"),
    4: .same(proto: "location"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.retirer) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.location) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.retirer.isEmpty {
      try visitor.visitSingularStringField(value: self.retirer, fieldNumber: 1)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventRetire, rhs: Regen_Ecocredit_V1alpha2_EventRetire) -> Bool {
    if lhs.retirer != rhs.retirer {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventCancel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCancel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "canceller"),
    2: .standard(proto: "batch_denom"),
    3: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.canceller) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.canceller.isEmpty {
      try visitor.visitSingularStringField(value: self.canceller, fieldNumber: 1)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventCancel, rhs: Regen_Ecocredit_V1alpha2_EventCancel) -> Bool {
    if lhs.canceller != rhs.canceller {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventSell: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventSell"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "batch_denom"),
    3: .same(proto: "quantity"),
    4: .standard(proto: "ask_price"),
    5: .standard(proto: "disable_auto_retire"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.quantity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._askPrice) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disableAutoRetire) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 2)
    }
    if !self.quantity.isEmpty {
      try visitor.visitSingularStringField(value: self.quantity, fieldNumber: 3)
    }
    if let v = self._askPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.disableAutoRetire != false {
      try visitor.visitSingularBoolField(value: self.disableAutoRetire, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventSell, rhs: Regen_Ecocredit_V1alpha2_EventSell) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs._askPrice != rhs._askPrice {return false}
    if lhs.disableAutoRetire != rhs.disableAutoRetire {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventUpdateSellOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdateSellOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "sell_order_id"),
    3: .standard(proto: "batch_denom"),
    4: .standard(proto: "new_quantity"),
    5: .standard(proto: "new_ask_price"),
    6: .standard(proto: "disable_auto_retire"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sellOrderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.newQuantity) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._newAskPrice) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.disableAutoRetire) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if self.sellOrderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sellOrderID, fieldNumber: 2)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 3)
    }
    if !self.newQuantity.isEmpty {
      try visitor.visitSingularStringField(value: self.newQuantity, fieldNumber: 4)
    }
    if let v = self._newAskPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if self.disableAutoRetire != false {
      try visitor.visitSingularBoolField(value: self.disableAutoRetire, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventUpdateSellOrder, rhs: Regen_Ecocredit_V1alpha2_EventUpdateSellOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.sellOrderID != rhs.sellOrderID {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.newQuantity != rhs.newQuantity {return false}
    if lhs._newAskPrice != rhs._newAskPrice {return false}
    if lhs.disableAutoRetire != rhs.disableAutoRetire {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventBuyOrderCreated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBuyOrderCreated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "buy_order_id"),
    2: .standard(proto: "sell_order_id"),
    3: .same(proto: "quantity"),
    4: .standard(proto: "bid_price"),
    5: .standard(proto: "disable_auto_retire"),
    6: .standard(proto: "disable_partial_fill"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.buyOrderID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sellOrderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.quantity) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bidPrice) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.disableAutoRetire) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.disablePartialFill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.buyOrderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.buyOrderID, fieldNumber: 1)
    }
    if self.sellOrderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sellOrderID, fieldNumber: 2)
    }
    if !self.quantity.isEmpty {
      try visitor.visitSingularStringField(value: self.quantity, fieldNumber: 3)
    }
    if let v = self._bidPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.disableAutoRetire != false {
      try visitor.visitSingularBoolField(value: self.disableAutoRetire, fieldNumber: 5)
    }
    if self.disablePartialFill != false {
      try visitor.visitSingularBoolField(value: self.disablePartialFill, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventBuyOrderCreated, rhs: Regen_Ecocredit_V1alpha2_EventBuyOrderCreated) -> Bool {
    if lhs.buyOrderID != rhs.buyOrderID {return false}
    if lhs.sellOrderID != rhs.sellOrderID {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs._bidPrice != rhs._bidPrice {return false}
    if lhs.disableAutoRetire != rhs.disableAutoRetire {return false}
    if lhs.disablePartialFill != rhs.disablePartialFill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventBuyOrderFilled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventBuyOrderFilled"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "buy_order_id"),
    2: .standard(proto: "sell_order_id"),
    3: .standard(proto: "batch_denom"),
    4: .same(proto: "quantity"),
    5: .standard(proto: "total_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.buyOrderID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sellOrderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.batchDenom) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.quantity) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._totalPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.buyOrderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.buyOrderID, fieldNumber: 1)
    }
    if self.sellOrderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.sellOrderID, fieldNumber: 2)
    }
    if !self.batchDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.batchDenom, fieldNumber: 3)
    }
    if !self.quantity.isEmpty {
      try visitor.visitSingularStringField(value: self.quantity, fieldNumber: 4)
    }
    if let v = self._totalPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventBuyOrderFilled, rhs: Regen_Ecocredit_V1alpha2_EventBuyOrderFilled) -> Bool {
    if lhs.buyOrderID != rhs.buyOrderID {return false}
    if lhs.sellOrderID != rhs.sellOrderID {return false}
    if lhs.batchDenom != rhs.batchDenom {return false}
    if lhs.quantity != rhs.quantity {return false}
    if lhs._totalPrice != rhs._totalPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Regen_Ecocredit_V1alpha2_EventAllowAskDenom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventAllowAskDenom"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "display_denom"),
    3: .same(proto: "exponent"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.displayDenom) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.exponent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.displayDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.displayDenom, fieldNumber: 2)
    }
    if self.exponent != 0 {
      try visitor.visitSingularUInt32Field(value: self.exponent, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Regen_Ecocredit_V1alpha2_EventAllowAskDenom, rhs: Regen_Ecocredit_V1alpha2_EventAllowAskDenom) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.displayDenom != rhs.displayDenom {return false}
    if lhs.exponent != rhs.exponent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
