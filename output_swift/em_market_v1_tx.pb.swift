// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: em/market/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Em_Market_V1_MsgAddLimitOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var clientOrderID: String = String()

  var timeInForce: Em_Market_V1_TimeInForce = .unspecified

  var source: Cosmos_Base_V1beta1_Coin {
    get {return _source ?? Cosmos_Base_V1beta1_Coin()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {self._source = nil}

  var destination: Cosmos_Base_V1beta1_Coin {
    get {return _destination ?? Cosmos_Base_V1beta1_Coin()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _source: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _destination: Cosmos_Base_V1beta1_Coin? = nil
}

struct Em_Market_V1_MsgAddLimitOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_MsgAddMarketOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var clientOrderID: String = String()

  var timeInForce: Em_Market_V1_TimeInForce = .unspecified

  var source: String = String()

  var destination: Cosmos_Base_V1beta1_Coin {
    get {return _destination ?? Cosmos_Base_V1beta1_Coin()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var maximumSlippage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _destination: Cosmos_Base_V1beta1_Coin? = nil
}

struct Em_Market_V1_MsgAddMarketOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_MsgCancelOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var clientOrderID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_MsgCancelOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_MsgCancelReplaceLimitOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var originalClientOrderID: String = String()

  var newClientOrderID: String = String()

  var timeInForce: Em_Market_V1_TimeInForce = .unspecified

  var source: Cosmos_Base_V1beta1_Coin {
    get {return _source ?? Cosmos_Base_V1beta1_Coin()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {self._source = nil}

  var destination: Cosmos_Base_V1beta1_Coin {
    get {return _destination ?? Cosmos_Base_V1beta1_Coin()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _source: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _destination: Cosmos_Base_V1beta1_Coin? = nil
}

struct Em_Market_V1_MsgCancelReplaceLimitOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_MsgCancelReplaceMarketOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var originalClientOrderID: String = String()

  var newClientOrderID: String = String()

  var timeInForce: Em_Market_V1_TimeInForce = .unspecified

  var source: String = String()

  var destination: Cosmos_Base_V1beta1_Coin {
    get {return _destination ?? Cosmos_Base_V1beta1_Coin()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var maximumSlippage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _destination: Cosmos_Base_V1beta1_Coin? = nil
}

struct Em_Market_V1_MsgCancelReplaceMarketOrderResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "em.market.v1"

extension Em_Market_V1_MsgAddLimitOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddLimitOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "client_order_id"),
    3: .standard(proto: "time_in_force"),
    4: .same(proto: "source"),
    5: .same(proto: "destination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientOrderID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.timeInForce) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.clientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientOrderID, fieldNumber: 2)
    }
    if self.timeInForce != .unspecified {
      try visitor.visitSingularEnumField(value: self.timeInForce, fieldNumber: 3)
    }
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgAddLimitOrder, rhs: Em_Market_V1_MsgAddLimitOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.clientOrderID != rhs.clientOrderID {return false}
    if lhs.timeInForce != rhs.timeInForce {return false}
    if lhs._source != rhs._source {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgAddLimitOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddLimitOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgAddLimitOrderResponse, rhs: Em_Market_V1_MsgAddLimitOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgAddMarketOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddMarketOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "client_order_id"),
    3: .standard(proto: "time_in_force"),
    4: .same(proto: "source"),
    5: .same(proto: "destination"),
    6: .standard(proto: "maximum_slippage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientOrderID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.timeInForce) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.maximumSlippage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.clientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientOrderID, fieldNumber: 2)
    }
    if self.timeInForce != .unspecified {
      try visitor.visitSingularEnumField(value: self.timeInForce, fieldNumber: 3)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 4)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.maximumSlippage.isEmpty {
      try visitor.visitSingularStringField(value: self.maximumSlippage, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgAddMarketOrder, rhs: Em_Market_V1_MsgAddMarketOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.clientOrderID != rhs.clientOrderID {return false}
    if lhs.timeInForce != rhs.timeInForce {return false}
    if lhs.source != rhs.source {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.maximumSlippage != rhs.maximumSlippage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgAddMarketOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddMarketOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgAddMarketOrderResponse, rhs: Em_Market_V1_MsgAddMarketOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "client_order_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientOrderID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.clientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientOrderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelOrder, rhs: Em_Market_V1_MsgCancelOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.clientOrderID != rhs.clientOrderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelOrderResponse, rhs: Em_Market_V1_MsgCancelOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelReplaceLimitOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelReplaceLimitOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "original_client_order_id"),
    3: .standard(proto: "new_client_order_id"),
    4: .standard(proto: "time_in_force"),
    5: .same(proto: "source"),
    6: .same(proto: "destination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.originalClientOrderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newClientOrderID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.timeInForce) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.originalClientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.originalClientOrderID, fieldNumber: 2)
    }
    if !self.newClientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.newClientOrderID, fieldNumber: 3)
    }
    if self.timeInForce != .unspecified {
      try visitor.visitSingularEnumField(value: self.timeInForce, fieldNumber: 4)
    }
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelReplaceLimitOrder, rhs: Em_Market_V1_MsgCancelReplaceLimitOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.originalClientOrderID != rhs.originalClientOrderID {return false}
    if lhs.newClientOrderID != rhs.newClientOrderID {return false}
    if lhs.timeInForce != rhs.timeInForce {return false}
    if lhs._source != rhs._source {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelReplaceLimitOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelReplaceLimitOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelReplaceLimitOrderResponse, rhs: Em_Market_V1_MsgCancelReplaceLimitOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelReplaceMarketOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelReplaceMarketOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "original_client_order_id"),
    3: .standard(proto: "new_client_order_id"),
    4: .standard(proto: "time_in_force"),
    5: .same(proto: "source"),
    6: .same(proto: "destination"),
    7: .standard(proto: "maximum_slippage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.originalClientOrderID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.newClientOrderID) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.timeInForce) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.maximumSlippage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.originalClientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.originalClientOrderID, fieldNumber: 2)
    }
    if !self.newClientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.newClientOrderID, fieldNumber: 3)
    }
    if self.timeInForce != .unspecified {
      try visitor.visitSingularEnumField(value: self.timeInForce, fieldNumber: 4)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 5)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.maximumSlippage.isEmpty {
      try visitor.visitSingularStringField(value: self.maximumSlippage, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelReplaceMarketOrder, rhs: Em_Market_V1_MsgCancelReplaceMarketOrder) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.originalClientOrderID != rhs.originalClientOrderID {return false}
    if lhs.newClientOrderID != rhs.newClientOrderID {return false}
    if lhs.timeInForce != rhs.timeInForce {return false}
    if lhs.source != rhs.source {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.maximumSlippage != rhs.maximumSlippage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MsgCancelReplaceMarketOrderResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCancelReplaceMarketOrderResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MsgCancelReplaceMarketOrderResponse, rhs: Em_Market_V1_MsgCancelReplaceMarketOrderResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
