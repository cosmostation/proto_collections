// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: em/market/v1/market.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Em_Market_V1_TimeInForce: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case goodTillCancel // = 1
  case immediateOrCancel // = 2
  case fillOrKill // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .goodTillCancel
    case 2: self = .immediateOrCancel
    case 3: self = .fillOrKill
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .goodTillCancel: return 1
    case .immediateOrCancel: return 2
    case .fillOrKill: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Em_Market_V1_TimeInForce: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Em_Market_V1_TimeInForce] = [
    .unspecified,
    .goodTillCancel,
    .immediateOrCancel,
    .fillOrKill,
  ]
}

#endif  // swift(>=4.2)

struct Em_Market_V1_Instrument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var source: String = String()

  var destination: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Em_Market_V1_Order {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var orderID: UInt64 = 0

  var timeInForce: Em_Market_V1_TimeInForce = .unspecified

  var owner: String = String()

  var clientOrderID: String = String()

  var source: Cosmos_Base_V1beta1_Coin {
    get {return _source ?? Cosmos_Base_V1beta1_Coin()}
    set {_source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  var hasSource: Bool {return self._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  mutating func clearSource() {self._source = nil}

  var sourceRemaining: String = String()

  var sourceFilled: String = String()

  var destination: Cosmos_Base_V1beta1_Coin {
    get {return _destination ?? Cosmos_Base_V1beta1_Coin()}
    set {_destination = newValue}
  }
  /// Returns true if `destination` has been explicitly set.
  var hasDestination: Bool {return self._destination != nil}
  /// Clears the value of `destination`. Subsequent reads from it will return its default value.
  mutating func clearDestination() {self._destination = nil}

  var destinationFilled: String = String()

  var created: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _created ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_created = newValue}
  }
  /// Returns true if `created` has been explicitly set.
  var hasCreated: Bool {return self._created != nil}
  /// Clears the value of `created`. Subsequent reads from it will return its default value.
  mutating func clearCreated() {self._created = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _source: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _destination: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _created: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Em_Market_V1_ExecutionPlan {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var price: String {
    get {return _storage._price}
    set {_uniqueStorage()._price = newValue}
  }

  var firstOrder: Em_Market_V1_Order {
    get {return _storage._firstOrder ?? Em_Market_V1_Order()}
    set {_uniqueStorage()._firstOrder = newValue}
  }
  /// Returns true if `firstOrder` has been explicitly set.
  var hasFirstOrder: Bool {return _storage._firstOrder != nil}
  /// Clears the value of `firstOrder`. Subsequent reads from it will return its default value.
  mutating func clearFirstOrder() {_uniqueStorage()._firstOrder = nil}

  var secondOrder: Em_Market_V1_Order {
    get {return _storage._secondOrder ?? Em_Market_V1_Order()}
    set {_uniqueStorage()._secondOrder = newValue}
  }
  /// Returns true if `secondOrder` has been explicitly set.
  var hasSecondOrder: Bool {return _storage._secondOrder != nil}
  /// Clears the value of `secondOrder`. Subsequent reads from it will return its default value.
  mutating func clearSecondOrder() {_uniqueStorage()._secondOrder = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Em_Market_V1_MarketData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var source: String = String()

  var destination: String = String()

  var lastPrice: String = String()

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "em.market.v1"

extension Em_Market_V1_TimeInForce: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIME_IN_FORCE_UNSPECIFIED"),
    1: .same(proto: "TIME_IN_FORCE_GOOD_TILL_CANCEL"),
    2: .same(proto: "TIME_IN_FORCE_IMMEDIATE_OR_CANCEL"),
    3: .same(proto: "TIME_IN_FORCE_FILL_OR_KILL"),
  ]
}

extension Em_Market_V1_Instrument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Instrument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "destination"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.destination) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_Instrument, rhs: Em_Market_V1_Instrument) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.destination != rhs.destination {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_Order: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Order"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .standard(proto: "time_in_force"),
    3: .same(proto: "owner"),
    4: .standard(proto: "client_order_id"),
    5: .same(proto: "source"),
    6: .standard(proto: "source_remaining"),
    7: .standard(proto: "source_filled"),
    8: .same(proto: "destination"),
    9: .standard(proto: "destination_filled"),
    10: .same(proto: "created"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.orderID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.timeInForce) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.clientOrderID) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._source) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sourceRemaining) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.sourceFilled) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._destination) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.destinationFilled) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._created) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.orderID != 0 {
      try visitor.visitSingularUInt64Field(value: self.orderID, fieldNumber: 1)
    }
    if self.timeInForce != .unspecified {
      try visitor.visitSingularEnumField(value: self.timeInForce, fieldNumber: 2)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 3)
    }
    if !self.clientOrderID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientOrderID, fieldNumber: 4)
    }
    if let v = self._source {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.sourceRemaining.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceRemaining, fieldNumber: 6)
    }
    if !self.sourceFilled.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceFilled, fieldNumber: 7)
    }
    if let v = self._destination {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.destinationFilled.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationFilled, fieldNumber: 9)
    }
    if let v = self._created {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_Order, rhs: Em_Market_V1_Order) -> Bool {
    if lhs.orderID != rhs.orderID {return false}
    if lhs.timeInForce != rhs.timeInForce {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.clientOrderID != rhs.clientOrderID {return false}
    if lhs._source != rhs._source {return false}
    if lhs.sourceRemaining != rhs.sourceRemaining {return false}
    if lhs.sourceFilled != rhs.sourceFilled {return false}
    if lhs._destination != rhs._destination {return false}
    if lhs.destinationFilled != rhs.destinationFilled {return false}
    if lhs._created != rhs._created {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_ExecutionPlan: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecutionPlan"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "price"),
    2: .standard(proto: "first_order"),
    3: .standard(proto: "second_order"),
  ]

  fileprivate class _StorageClass {
    var _price: String = String()
    var _firstOrder: Em_Market_V1_Order? = nil
    var _secondOrder: Em_Market_V1_Order? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _price = source._price
      _firstOrder = source._firstOrder
      _secondOrder = source._secondOrder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._price) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._firstOrder) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._secondOrder) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._price.isEmpty {
        try visitor.visitSingularStringField(value: _storage._price, fieldNumber: 1)
      }
      if let v = _storage._firstOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._secondOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_ExecutionPlan, rhs: Em_Market_V1_ExecutionPlan) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._price != rhs_storage._price {return false}
        if _storage._firstOrder != rhs_storage._firstOrder {return false}
        if _storage._secondOrder != rhs_storage._secondOrder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Em_Market_V1_MarketData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MarketData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "destination"),
    3: .standard(proto: "last_price"),
    4: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.source) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.destination) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.lastPrice) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 2)
    }
    if !self.lastPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.lastPrice, fieldNumber: 3)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Em_Market_V1_MarketData, rhs: Em_Market_V1_MarketData) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.destination != rhs.destination {return false}
    if lhs.lastPrice != rhs.lastPrice {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
