// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: confio/twasm/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Confio_Twasm_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Params sdk type Params for wasmd
  var params: Cosmwasm_Wasm_V1_Params {
    get {return _params ?? Cosmwasm_Wasm_V1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// Codes has all stored wasm codes and metadata
  var codes: [Cosmwasm_Wasm_V1_Code] = []

  /// Contracts contains all instantiated contracts, state and metadata
  var contracts: [Confio_Twasm_V1beta1_Contract] = []

  /// Sequences names and values
  var sequences: [Cosmwasm_Wasm_V1_Sequence] = []

  /// GenMsgs has wasmd sdk type messages to execute in the genesis phase
  var genMsgs: [Cosmwasm_Wasm_V1_GenesisState.GenMsgs] = []

  /// PrivilegedContractAddresses is a list of contract addresses that can have
  /// special permissions
  var privilegedContractAddresses: [String] = []

  /// PinnedCodeIDs has codeInfo ids for wasm codes that are pinned in cache
  var pinnedCodeIds: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Cosmwasm_Wasm_V1_Params? = nil
}

/// Contract struct encompasses ContractAddress, ContractInfo, and ContractState
struct Confio_Twasm_V1beta1_Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractAddress: String = String()

  var contractInfo: Cosmwasm_Wasm_V1_ContractInfo {
    get {return _contractInfo ?? Cosmwasm_Wasm_V1_ContractInfo()}
    set {_contractInfo = newValue}
  }
  /// Returns true if `contractInfo` has been explicitly set.
  var hasContractInfo: Bool {return self._contractInfo != nil}
  /// Clears the value of `contractInfo`. Subsequent reads from it will return its default value.
  mutating func clearContractInfo() {self._contractInfo = nil}

  /// ContractSate is one of default wasmd Model or custom state model
  var contractState: Confio_Twasm_V1beta1_Contract.OneOf_ContractState? = nil

  var kvModel: Confio_Twasm_V1beta1_KVModel {
    get {
      if case .kvModel(let v)? = contractState {return v}
      return Confio_Twasm_V1beta1_KVModel()
    }
    set {contractState = .kvModel(newValue)}
  }

  var customModel: Confio_Twasm_V1beta1_CustomModel {
    get {
      if case .customModel(let v)? = contractState {return v}
      return Confio_Twasm_V1beta1_CustomModel()
    }
    set {contractState = .customModel(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// ContractSate is one of default wasmd Model or custom state model
  enum OneOf_ContractState: Equatable {
    case kvModel(Confio_Twasm_V1beta1_KVModel)
    case customModel(Confio_Twasm_V1beta1_CustomModel)

  #if !swift(>=4.1)
    static func ==(lhs: Confio_Twasm_V1beta1_Contract.OneOf_ContractState, rhs: Confio_Twasm_V1beta1_Contract.OneOf_ContractState) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.kvModel, .kvModel): return {
        guard case .kvModel(let l) = lhs, case .kvModel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.customModel, .customModel): return {
        guard case .customModel(let l) = lhs, case .customModel(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _contractInfo: Cosmwasm_Wasm_V1_ContractInfo? = nil
}

/// KVModel is a wrapper around the wasmd default key value model.
struct Confio_Twasm_V1beta1_KVModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var models: [Cosmwasm_Wasm_V1_Model] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CustomModel contains the raw json data for a contract to seed its state on
/// import
struct Confio_Twasm_V1beta1_CustomModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Msg json encoded message to be passed to the contract on import
  var msg: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "confio.twasm.v1beta1"

extension Confio_Twasm_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "codes"),
    3: .same(proto: "contracts"),
    4: .same(proto: "sequences"),
    5: .standard(proto: "gen_msgs"),
    6: .standard(proto: "privileged_contract_addresses"),
    7: .standard(proto: "pinned_code_ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.codes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.contracts) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.sequences) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.genMsgs) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.privilegedContractAddresses) }()
      case 7: try { try decoder.decodeRepeatedUInt64Field(value: &self.pinnedCodeIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.codes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.codes, fieldNumber: 2)
    }
    if !self.contracts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contracts, fieldNumber: 3)
    }
    if !self.sequences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sequences, fieldNumber: 4)
    }
    if !self.genMsgs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.genMsgs, fieldNumber: 5)
    }
    if !self.privilegedContractAddresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.privilegedContractAddresses, fieldNumber: 6)
    }
    if !self.pinnedCodeIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.pinnedCodeIds, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Twasm_V1beta1_GenesisState, rhs: Confio_Twasm_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.codes != rhs.codes {return false}
    if lhs.contracts != rhs.contracts {return false}
    if lhs.sequences != rhs.sequences {return false}
    if lhs.genMsgs != rhs.genMsgs {return false}
    if lhs.privilegedContractAddresses != rhs.privilegedContractAddresses {return false}
    if lhs.pinnedCodeIds != rhs.pinnedCodeIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Twasm_V1beta1_Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contract"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "contract_info"),
    3: .standard(proto: "kv_model"),
    4: .standard(proto: "custom_model"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._contractInfo) }()
      case 3: try {
        var v: Confio_Twasm_V1beta1_KVModel?
        var hadOneofValue = false
        if let current = self.contractState {
          hadOneofValue = true
          if case .kvModel(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractState = .kvModel(v)
        }
      }()
      case 4: try {
        var v: Confio_Twasm_V1beta1_CustomModel?
        var hadOneofValue = false
        if let current = self.contractState {
          hadOneofValue = true
          if case .customModel(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractState = .customModel(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if let v = self._contractInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.contractState {
    case .kvModel?: try {
      guard case .kvModel(let v)? = self.contractState else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .customModel?: try {
      guard case .customModel(let v)? = self.contractState else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Twasm_V1beta1_Contract, rhs: Confio_Twasm_V1beta1_Contract) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs._contractInfo != rhs._contractInfo {return false}
    if lhs.contractState != rhs.contractState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Twasm_V1beta1_KVModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KVModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "models"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.models) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.models.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.models, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Twasm_V1beta1_KVModel, rhs: Confio_Twasm_V1beta1_KVModel) -> Bool {
    if lhs.models != rhs.models {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Twasm_V1beta1_CustomModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "msg"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 5: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Twasm_V1beta1_CustomModel, rhs: Confio_Twasm_V1beta1_CustomModel) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
