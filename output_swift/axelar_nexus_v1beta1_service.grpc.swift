//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/nexus/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the nexus Msg service.
///
/// Usage: instantiate `Axelar_Nexus_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Nexus_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func registerChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>

  func deregisterChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>

  func activateChain(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>

  func deactivateChain(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>
}

extension Axelar_Nexus_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.nexus.v1beta1.MsgService"
  }

  /// Unary call to RegisterChainMaintainer
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterChainMaintainer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.MsgService/RegisterChainMaintainer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? []
    )
  }

  /// Unary call to DeregisterChainMaintainer
  ///
  /// - Parameters:
  ///   - request: Request to send to DeregisterChainMaintainer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deregisterChainMaintainer(
    _ request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.MsgService/DeregisterChainMaintainer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? []
    )
  }

  /// Unary call to ActivateChain
  ///
  /// - Parameters:
  ///   - request: Request to send to ActivateChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func activateChain(
    _ request: Axelar_Nexus_V1beta1_ActivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.MsgService/ActivateChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivateChainInterceptors() ?? []
    )
  }

  /// Unary call to DeactivateChain
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateChain(
    _ request: Axelar_Nexus_V1beta1_DeactivateChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.MsgService/DeactivateChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerChainMaintainer'.
  func makeRegisterChainMaintainerInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when invoking 'deregisterChainMaintainer'.
  func makeDeregisterChainMaintainerInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when invoking 'activateChain'.
  func makeActivateChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateChain'.
  func makeDeactivateChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>]
}

internal final class Axelar_Nexus_V1beta1_MsgServiceClient: Axelar_Nexus_V1beta1_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.nexus.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryService defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Nexus_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Nexus_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func latestDepositAddress(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>

  func transfersForChain(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>
}

extension Axelar_Nexus_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.nexus.v1beta1.QueryService"
  }

  /// LatestDepositAddress queries the a deposit address by recipient
  ///
  /// - Parameters:
  ///   - request: Request to send to LatestDepositAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func latestDepositAddress(
    _ request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.QueryService/LatestDepositAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? []
    )
  }

  /// TransfersForChain queries transfers by chain
  ///
  /// - Parameters:
  ///   - request: Request to send to TransfersForChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transfersForChain(
    _ request: Axelar_Nexus_V1beta1_TransfersForChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.nexus.v1beta1.QueryService/TransfersForChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'latestDepositAddress'.
  func makeLatestDepositAddressInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'transfersForChain'.
  func makeTransfersForChainInterceptors() -> [ClientInterceptor<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>]
}

internal final class Axelar_Nexus_V1beta1_QueryServiceClient: Axelar_Nexus_V1beta1_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.nexus.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Nexus_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the nexus Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Nexus_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func registerChainMaintainer(request: Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>

  func deregisterChainMaintainer(request: Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>

  func activateChain(request: Axelar_Nexus_V1beta1_ActivateChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_ActivateChainResponse>

  func deactivateChain(request: Axelar_Nexus_V1beta1_DeactivateChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_DeactivateChainResponse>
}

extension Axelar_Nexus_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring { return "axelar.nexus.v1beta1.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterChainMaintainer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeRegisterChainMaintainerInterceptors() ?? [],
        userFunction: self.registerChainMaintainer(request:context:)
      )

    case "DeregisterChainMaintainer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>(),
        interceptors: self.interceptors?.makeDeregisterChainMaintainerInterceptors() ?? [],
        userFunction: self.deregisterChainMaintainer(request:context:)
      )

    case "ActivateChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_ActivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_ActivateChainResponse>(),
        interceptors: self.interceptors?.makeActivateChainInterceptors() ?? [],
        userFunction: self.activateChain(request:context:)
      )

    case "DeactivateChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_DeactivateChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_DeactivateChainResponse>(),
        interceptors: self.interceptors?.makeDeactivateChainInterceptors() ?? [],
        userFunction: self.deactivateChain(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Nexus_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerChainMaintainer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterChainMaintainerInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_RegisterChainMaintainerRequest, Axelar_Nexus_V1beta1_RegisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when handling 'deregisterChainMaintainer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeregisterChainMaintainerInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_DeregisterChainMaintainerRequest, Axelar_Nexus_V1beta1_DeregisterChainMaintainerResponse>]

  /// - Returns: Interceptors to use when handling 'activateChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivateChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_ActivateChainRequest, Axelar_Nexus_V1beta1_ActivateChainResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_DeactivateChainRequest, Axelar_Nexus_V1beta1_DeactivateChainResponse>]
}
/// QueryService defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Nexus_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// LatestDepositAddress queries the a deposit address by recipient
  func latestDepositAddress(request: Axelar_Nexus_V1beta1_LatestDepositAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_LatestDepositAddressResponse>

  /// TransfersForChain queries transfers by chain
  func transfersForChain(request: Axelar_Nexus_V1beta1_TransfersForChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Nexus_V1beta1_TransfersForChainResponse>
}

extension Axelar_Nexus_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring { return "axelar.nexus.v1beta1.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "LatestDepositAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_LatestDepositAddressRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_LatestDepositAddressResponse>(),
        interceptors: self.interceptors?.makeLatestDepositAddressInterceptors() ?? [],
        userFunction: self.latestDepositAddress(request:context:)
      )

    case "TransfersForChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Nexus_V1beta1_TransfersForChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Nexus_V1beta1_TransfersForChainResponse>(),
        interceptors: self.interceptors?.makeTransfersForChainInterceptors() ?? [],
        userFunction: self.transfersForChain(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Nexus_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'latestDepositAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLatestDepositAddressInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_LatestDepositAddressRequest, Axelar_Nexus_V1beta1_LatestDepositAddressResponse>]

  /// - Returns: Interceptors to use when handling 'transfersForChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransfersForChainInterceptors() -> [ServerInterceptor<Axelar_Nexus_V1beta1_TransfersForChainRequest, Axelar_Nexus_V1beta1_TransfersForChainResponse>]
}
