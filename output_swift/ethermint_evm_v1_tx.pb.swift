// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ethermint/evm/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
struct Ethermint_Evm_V1_MsgEthereumTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// inner transaction data
  var data: Google_Protobuf2_Any {
    get {return _data ?? Google_Protobuf2_Any()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  /// encoded storage size of the transaction
  var size: Double = 0

  /// transaction hash in hex format
  var hash: String = String()

  /// ethereum signer address in hex format. This address value is checked
  /// against the address derived from the signature (V, R, S) using the
  /// secp256k1 elliptic curve
  var from: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: Google_Protobuf2_Any? = nil
}

/// LegacyTx is the transaction data of regular Ethereum transactions.
struct Ethermint_Evm_V1_LegacyTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// nonce corresponds to the account nonce (transaction sequence).
  var nonce: UInt64 = 0

  /// gas price defines the value for each gas unit
  var gasPrice: String = String()

  /// gas defines the gas limit defined for the transaction.
  var gas: UInt64 = 0

  /// hex formatted address of the recipient
  var to: String = String()

  /// value defines the unsigned integer value of the transaction amount.
  var value: String = String()

  /// input defines the data payload bytes of the transaction.
  var data: Data = Data()

  /// v defines the signature value
  var v: Data = Data()

  /// r defines the signature value
  var r: Data = Data()

  /// s define the signature value
  var s: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AccessListTx is the data of EIP-2930 access list transactions.
struct Ethermint_Evm_V1_AccessListTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// destination EVM chain ID
  var chainID: String = String()

  /// nonce corresponds to the account nonce (transaction sequence).
  var nonce: UInt64 = 0

  /// gas price defines the value for each gas unit
  var gasPrice: String = String()

  /// gas defines the gas limit defined for the transaction.
  var gas: UInt64 = 0

  /// hex formatted address of the recipient
  var to: String = String()

  /// value defines the unsigned integer value of the transaction amount.
  var value: String = String()

  /// input defines the data payload bytes of the transaction.
  var data: Data = Data()

  var accesses: [Ethermint_Evm_V1_AccessTuple] = []

  /// v defines the signature value
  var v: Data = Data()

  /// r defines the signature value
  var r: Data = Data()

  /// s define the signature value
  var s: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DynamicFeeTx is the data of EIP-1559 dinamic fee transactions.
struct Ethermint_Evm_V1_DynamicFeeTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// destination EVM chain ID
  var chainID: String = String()

  /// nonce corresponds to the account nonce (transaction sequence).
  var nonce: UInt64 = 0

  /// gas tip cap defines the max value for the gas tip
  var gasTipCap: String = String()

  /// gas fee cap defines the max value for the gas fee
  var gasFeeCap: String = String()

  /// gas defines the gas limit defined for the transaction.
  var gas: UInt64 = 0

  /// hex formatted address of the recipient
  var to: String = String()

  /// value defines the the transaction amount.
  var value: String = String()

  /// input defines the data payload bytes of the transaction.
  var data: Data = Data()

  var accesses: [Ethermint_Evm_V1_AccessTuple] = []

  /// v defines the signature value
  var v: Data = Data()

  /// r defines the signature value
  var r: Data = Data()

  /// s define the signature value
  var s: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ethermint_Evm_V1_ExtensionOptionsEthereumTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEthereumTxResponse defines the Msg/EthereumTx response type.
struct Ethermint_Evm_V1_MsgEthereumTxResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ethereum transaction hash in hex format. This hash differs from the
  /// Tendermint sha256 hash of the transaction bytes. See
  /// https://github.com/tendermint/tendermint/issues/6539 for reference
  var hash: String = String()

  /// logs contains the transaction hash and the proto-compatible ethereum
  /// logs.
  var logs: [Ethermint_Evm_V1_Log] = []

  /// returned data from evm function (result or data supplied with revert
  /// opcode)
  var ret: Data = Data()

  /// vm error is the error returned by vm execution
  var vmError: String = String()

  /// gas consumed by the transaction
  var gasUsed: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ethermint.evm.v1"

extension Ethermint_Evm_V1_MsgEthereumTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEthereumTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "size"),
    3: .same(proto: "hash"),
    4: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.size) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.size != 0 {
      try visitor.visitSingularDoubleField(value: self.size, fieldNumber: 2)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 3)
    }
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_MsgEthereumTx, rhs: Ethermint_Evm_V1_MsgEthereumTx) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.size != rhs.size {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.from != rhs.from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_LegacyTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LegacyTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
    2: .standard(proto: "gas_price"),
    3: .same(proto: "gas"),
    4: .same(proto: "to"),
    5: .same(proto: "value"),
    6: .same(proto: "data"),
    7: .same(proto: "v"),
    8: .same(proto: "r"),
    9: .same(proto: "s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.gas) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.v) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.r) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.s) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 1)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 2)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 3)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 4)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 5)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 6)
    }
    if !self.v.isEmpty {
      try visitor.visitSingularBytesField(value: self.v, fieldNumber: 7)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 8)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_LegacyTx, rhs: Ethermint_Evm_V1_LegacyTx) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.to != rhs.to {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.v != rhs.v {return false}
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_AccessListTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccessListTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "nonce"),
    3: .standard(proto: "gas_price"),
    4: .same(proto: "gas"),
    5: .same(proto: "to"),
    6: .same(proto: "value"),
    7: .same(proto: "data"),
    8: .same(proto: "accesses"),
    9: .same(proto: "v"),
    10: .same(proto: "r"),
    11: .same(proto: "s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.gas) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.accesses) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.v) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.r) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.s) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 2)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 3)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 4)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 5)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 6)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 7)
    }
    if !self.accesses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accesses, fieldNumber: 8)
    }
    if !self.v.isEmpty {
      try visitor.visitSingularBytesField(value: self.v, fieldNumber: 9)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 10)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_AccessListTx, rhs: Ethermint_Evm_V1_AccessListTx) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.to != rhs.to {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.accesses != rhs.accesses {return false}
    if lhs.v != rhs.v {return false}
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_DynamicFeeTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DynamicFeeTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "nonce"),
    3: .standard(proto: "gas_tip_cap"),
    4: .standard(proto: "gas_fee_cap"),
    5: .same(proto: "gas"),
    6: .same(proto: "to"),
    7: .same(proto: "value"),
    8: .same(proto: "data"),
    9: .same(proto: "accesses"),
    10: .same(proto: "v"),
    11: .same(proto: "r"),
    12: .same(proto: "s"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.gasTipCap) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.gasFeeCap) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.gas) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.accesses) }()
      case 10: try { try decoder.decodeSingularBytesField(value: &self.v) }()
      case 11: try { try decoder.decodeSingularBytesField(value: &self.r) }()
      case 12: try { try decoder.decodeSingularBytesField(value: &self.s) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 1)
    }
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 2)
    }
    if !self.gasTipCap.isEmpty {
      try visitor.visitSingularStringField(value: self.gasTipCap, fieldNumber: 3)
    }
    if !self.gasFeeCap.isEmpty {
      try visitor.visitSingularStringField(value: self.gasFeeCap, fieldNumber: 4)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 5)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 6)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 7)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 8)
    }
    if !self.accesses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.accesses, fieldNumber: 9)
    }
    if !self.v.isEmpty {
      try visitor.visitSingularBytesField(value: self.v, fieldNumber: 10)
    }
    if !self.r.isEmpty {
      try visitor.visitSingularBytesField(value: self.r, fieldNumber: 11)
    }
    if !self.s.isEmpty {
      try visitor.visitSingularBytesField(value: self.s, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_DynamicFeeTx, rhs: Ethermint_Evm_V1_DynamicFeeTx) -> Bool {
    if lhs.chainID != rhs.chainID {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.gasTipCap != rhs.gasTipCap {return false}
    if lhs.gasFeeCap != rhs.gasFeeCap {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.to != rhs.to {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.accesses != rhs.accesses {return false}
    if lhs.v != rhs.v {return false}
    if lhs.r != rhs.r {return false}
    if lhs.s != rhs.s {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_ExtensionOptionsEthereumTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExtensionOptionsEthereumTx"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_ExtensionOptionsEthereumTx, rhs: Ethermint_Evm_V1_ExtensionOptionsEthereumTx) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ethermint_Evm_V1_MsgEthereumTxResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEthereumTxResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "logs"),
    3: .same(proto: "ret"),
    4: .standard(proto: "vm_error"),
    5: .standard(proto: "gas_used"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.ret) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.vmError) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.gasUsed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 1)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 2)
    }
    if !self.ret.isEmpty {
      try visitor.visitSingularBytesField(value: self.ret, fieldNumber: 3)
    }
    if !self.vmError.isEmpty {
      try visitor.visitSingularStringField(value: self.vmError, fieldNumber: 4)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasUsed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ethermint_Evm_V1_MsgEthereumTxResponse, rhs: Ethermint_Evm_V1_MsgEthereumTxResponse) -> Bool {
    if lhs.hash != rhs.hash {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs.ret != rhs.ret {return false}
    if lhs.vmError != rhs.vmError {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
