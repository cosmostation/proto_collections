// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: confio/poe/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateValidator defines a PoE message for creating a new validator.
/// Based on the SDK staking.MsgCreateValidator
struct Confio_Poe_V1beta1_MsgCreateValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Description meta data
  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  /// OperatorAddress is the bech32 address string
  var operatorAddress: String = String()

  /// Pubkey public key
  var pubkey: Google_Protobuf2_Any {
    get {return _pubkey ?? Google_Protobuf2_Any()}
    set {_pubkey = newValue}
  }
  /// Returns true if `pubkey` has been explicitly set.
  var hasPubkey: Bool {return self._pubkey != nil}
  /// Clears the value of `pubkey`. Subsequent reads from it will return its default value.
  mutating func clearPubkey() {self._pubkey = nil}

  /// Amount defines the initial staking amount from a liquid balance
  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  /// VestingAmount defines the initial staking amount from a vesting account
  /// balance
  var vestingAmount: Cosmos_Base_V1beta1_Coin {
    get {return _vestingAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_vestingAmount = newValue}
  }
  /// Returns true if `vestingAmount` has been explicitly set.
  var hasVestingAmount: Bool {return self._vestingAmount != nil}
  /// Clears the value of `vestingAmount`. Subsequent reads from it will return its default value.
  mutating func clearVestingAmount() {self._vestingAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Cosmos_Staking_V1beta1_Description? = nil
  fileprivate var _pubkey: Google_Protobuf2_Any? = nil
  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _vestingAmount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgCreateValidatorResponse defines the MsgCreateValidator response type.
struct Confio_Poe_V1beta1_MsgCreateValidatorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateValidator defines a PoE message for updating validator metadata
struct Confio_Poe_V1beta1_MsgUpdateValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// New Description meta data
  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  /// OperatorAddress is the bech32 address string
  /// Also know as "signer" in other messages
  var operatorAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _description_p: Cosmos_Staking_V1beta1_Description? = nil
}

/// MsgUpdateValidatorResponse defines the MsgUpdateValidator response type.
struct Confio_Poe_V1beta1_MsgUpdateValidatorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDelegate defines a SDK message for performing a self delegation of coins
/// by a node operator
struct Confio_Poe_V1beta1_MsgDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var vestingAmount: Cosmos_Base_V1beta1_Coin {
    get {return _vestingAmount ?? Cosmos_Base_V1beta1_Coin()}
    set {_vestingAmount = newValue}
  }
  /// Returns true if `vestingAmount` has been explicitly set.
  var hasVestingAmount: Bool {return self._vestingAmount != nil}
  /// Clears the value of `vestingAmount`. Subsequent reads from it will return its default value.
  mutating func clearVestingAmount() {self._vestingAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _vestingAmount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgDelegateResponse defines the Msg/Delegate response type.
struct Confio_Poe_V1beta1_MsgDelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUndelegate defines a SDK message for performing an undelegation from a
/// node operator
struct Confio_Poe_V1beta1_MsgUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgUndelegateResponse defines the Msg/Undelegate response type.
struct Confio_Poe_V1beta1_MsgUndelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return self._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {self._completionTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "confio.poe.v1beta1"

extension Confio_Poe_V1beta1_MsgCreateValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    4: .standard(proto: "operator_address"),
    6: .same(proto: "pubkey"),
    7: .same(proto: "amount"),
    8: .standard(proto: "vesting_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._pubkey) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._vestingAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 4)
    }
    if let v = self._pubkey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if let v = self._vestingAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgCreateValidator, rhs: Confio_Poe_V1beta1_MsgCreateValidator) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs._pubkey != rhs._pubkey {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._vestingAmount != rhs._vestingAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgCreateValidatorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateValidatorResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgCreateValidatorResponse, rhs: Confio_Poe_V1beta1_MsgCreateValidatorResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgUpdateValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .standard(proto: "operator_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgUpdateValidator, rhs: Confio_Poe_V1beta1_MsgUpdateValidator) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgUpdateValidatorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateValidatorResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgUpdateValidatorResponse, rhs: Confio_Poe_V1beta1_MsgUpdateValidatorResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operator_address"),
    2: .same(proto: "amount"),
    3: .standard(proto: "vesting_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._vestingAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._vestingAmount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgDelegate, rhs: Confio_Poe_V1beta1_MsgDelegate) -> Bool {
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._vestingAmount != rhs._vestingAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgDelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgDelegateResponse, rhs: Confio_Poe_V1beta1_MsgDelegateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgUndelegate, rhs: Confio_Poe_V1beta1_MsgUndelegate) -> Bool {
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Confio_Poe_V1beta1_MsgUndelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "completion_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._completionTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._completionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_MsgUndelegateResponse, rhs: Confio_Poe_V1beta1_MsgUndelegateResponse) -> Bool {
    if lhs._completionTime != rhs._completionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
