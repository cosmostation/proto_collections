// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/cdp/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateCDP defines a message to create a new CDP.
struct Kava_Cdp_V1beta1_MsgCreateCDP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var collateral: Cosmos_Base_V1beta1_Coin {
    get {return _collateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_collateral = newValue}
  }
  /// Returns true if `collateral` has been explicitly set.
  var hasCollateral: Bool {return self._collateral != nil}
  /// Clears the value of `collateral`. Subsequent reads from it will return its default value.
  mutating func clearCollateral() {self._collateral = nil}

  var principal: Cosmos_Base_V1beta1_Coin {
    get {return _principal ?? Cosmos_Base_V1beta1_Coin()}
    set {_principal = newValue}
  }
  /// Returns true if `principal` has been explicitly set.
  var hasPrincipal: Bool {return self._principal != nil}
  /// Clears the value of `principal`. Subsequent reads from it will return its default value.
  mutating func clearPrincipal() {self._principal = nil}

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collateral: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _principal: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgCreateCDPResponse defines the Msg/CreateCDP response type.
struct Kava_Cdp_V1beta1_MsgCreateCDPResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cdpID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeposit defines a message to deposit to a CDP.
struct Kava_Cdp_V1beta1_MsgDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositor: String = String()

  var owner: String = String()

  var collateral: Cosmos_Base_V1beta1_Coin {
    get {return _collateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_collateral = newValue}
  }
  /// Returns true if `collateral` has been explicitly set.
  var hasCollateral: Bool {return self._collateral != nil}
  /// Clears the value of `collateral`. Subsequent reads from it will return its default value.
  mutating func clearCollateral() {self._collateral = nil}

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collateral: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgDepositResponse defines the Msg/Deposit response type.
struct Kava_Cdp_V1beta1_MsgDepositResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdraw defines a message to withdraw collateral from a CDP.
struct Kava_Cdp_V1beta1_MsgWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositor: String = String()

  var owner: String = String()

  var collateral: Cosmos_Base_V1beta1_Coin {
    get {return _collateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_collateral = newValue}
  }
  /// Returns true if `collateral` has been explicitly set.
  var hasCollateral: Bool {return self._collateral != nil}
  /// Clears the value of `collateral`. Subsequent reads from it will return its default value.
  mutating func clearCollateral() {self._collateral = nil}

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collateral: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgWithdrawResponse defines the Msg/Withdraw response type.
struct Kava_Cdp_V1beta1_MsgWithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDrawDebt defines a message to draw debt from a CDP.
struct Kava_Cdp_V1beta1_MsgDrawDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var collateralType: String = String()

  var principal: Cosmos_Base_V1beta1_Coin {
    get {return _principal ?? Cosmos_Base_V1beta1_Coin()}
    set {_principal = newValue}
  }
  /// Returns true if `principal` has been explicitly set.
  var hasPrincipal: Bool {return self._principal != nil}
  /// Clears the value of `principal`. Subsequent reads from it will return its default value.
  mutating func clearPrincipal() {self._principal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _principal: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgDrawDebtResponse defines the Msg/DrawDebt response type.
struct Kava_Cdp_V1beta1_MsgDrawDebtResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRepayDebt defines a message to repay debt from a CDP.
struct Kava_Cdp_V1beta1_MsgRepayDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var collateralType: String = String()

  var payment: Cosmos_Base_V1beta1_Coin {
    get {return _payment ?? Cosmos_Base_V1beta1_Coin()}
    set {_payment = newValue}
  }
  /// Returns true if `payment` has been explicitly set.
  var hasPayment: Bool {return self._payment != nil}
  /// Clears the value of `payment`. Subsequent reads from it will return its default value.
  mutating func clearPayment() {self._payment = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _payment: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgRepayDebtResponse defines the Msg/RepayDebt response type.
struct Kava_Cdp_V1beta1_MsgRepayDebtResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgLiquidate defines a message to attempt to liquidate a CDP whos
/// collateralization ratio is under its liquidation ratio.
struct Kava_Cdp_V1beta1_MsgLiquidate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keeper: String = String()

  var borrower: String = String()

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgLiquidateResponse defines the Msg/Liquidate response type.
struct Kava_Cdp_V1beta1_MsgLiquidateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.cdp.v1beta1"

extension Kava_Cdp_V1beta1_MsgCreateCDP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateCDP"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "collateral"),
    3: .same(proto: "principal"),
    4: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._collateral) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._principal) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if let v = self._collateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._principal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgCreateCDP, rhs: Kava_Cdp_V1beta1_MsgCreateCDP) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs._collateral != rhs._collateral {return false}
    if lhs._principal != rhs._principal {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgCreateCDPResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateCDPResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cdp_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.cdpID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cdpID != 0 {
      try visitor.visitSingularUInt64Field(value: self.cdpID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgCreateCDPResponse, rhs: Kava_Cdp_V1beta1_MsgCreateCDPResponse) -> Bool {
    if lhs.cdpID != rhs.cdpID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .same(proto: "owner"),
    3: .same(proto: "collateral"),
    4: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._collateral) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 2)
    }
    if let v = self._collateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgDeposit, rhs: Kava_Cdp_V1beta1_MsgDeposit) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs._collateral != rhs._collateral {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgDepositResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDepositResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgDepositResponse, rhs: Kava_Cdp_V1beta1_MsgDepositResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .same(proto: "owner"),
    3: .same(proto: "collateral"),
    4: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._collateral) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 2)
    }
    if let v = self._collateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgWithdraw, rhs: Kava_Cdp_V1beta1_MsgWithdraw) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs._collateral != rhs._collateral {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgWithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgWithdrawResponse, rhs: Kava_Cdp_V1beta1_MsgWithdrawResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgDrawDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDrawDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "principal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._principal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._principal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgDrawDebt, rhs: Kava_Cdp_V1beta1_MsgDrawDebt) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._principal != rhs._principal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgDrawDebtResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDrawDebtResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgDrawDebtResponse, rhs: Kava_Cdp_V1beta1_MsgDrawDebtResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgRepayDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRepayDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "payment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._payment) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgRepayDebt, rhs: Kava_Cdp_V1beta1_MsgRepayDebt) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._payment != rhs._payment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgRepayDebtResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRepayDebtResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgRepayDebtResponse, rhs: Kava_Cdp_V1beta1_MsgRepayDebtResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgLiquidate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keeper"),
    2: .same(proto: "borrower"),
    3: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keeper) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keeper.isEmpty {
      try visitor.visitSingularStringField(value: self.keeper, fieldNumber: 1)
    }
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 2)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgLiquidate, rhs: Kava_Cdp_V1beta1_MsgLiquidate) -> Bool {
    if lhs.keeper != rhs.keeper {return false}
    if lhs.borrower != rhs.borrower {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_MsgLiquidateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_MsgLiquidateResponse, rhs: Kava_Cdp_V1beta1_MsgLiquidateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
