//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: iov/escrow/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Starnamed_X_Escrow_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Starnamed_X_Escrow_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Starnamed_X_Escrow_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func escrow(
    _ request: Starnamed_X_Escrow_V1beta1_QueryEscrowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Escrow_V1beta1_QueryEscrowRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowResponse>

  func escrows(
    _ request: Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse>
}

extension Starnamed_X_Escrow_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "starnamed.x.escrow.v1beta1.Query"
  }

  /// Escrow queries the escrow by the specified id
  ///
  /// - Parameters:
  ///   - request: Request to send to Escrow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func escrow(
    _ request: Starnamed_X_Escrow_V1beta1_QueryEscrowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Escrow_V1beta1_QueryEscrowRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.escrow.v1beta1.Query/Escrow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowInterceptors() ?? []
    )
  }

  /// Escrows queries escrows by the specified key-value pairs
  ///
  /// - Parameters:
  ///   - request: Request to send to Escrows.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func escrows(
    _ request: Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.escrow.v1beta1.Query/Escrows",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowsInterceptors() ?? []
    )
  }
}

internal protocol Starnamed_X_Escrow_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'escrow'.
  func makeEscrowInterceptors() -> [ClientInterceptor<Starnamed_X_Escrow_V1beta1_QueryEscrowRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowResponse>]

  /// - Returns: Interceptors to use when invoking 'escrows'.
  func makeEscrowsInterceptors() -> [ClientInterceptor<Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse>]
}

internal final class Starnamed_X_Escrow_V1beta1_QueryClient: Starnamed_X_Escrow_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Starnamed_X_Escrow_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the starnamed.x.escrow.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Starnamed_X_Escrow_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Starnamed_X_Escrow_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Starnamed_X_Escrow_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Escrow queries the escrow by the specified id
  func escrow(request: Starnamed_X_Escrow_V1beta1_QueryEscrowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Escrow_V1beta1_QueryEscrowResponse>

  /// Escrows queries escrows by the specified key-value pairs
  func escrows(request: Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse>
}

extension Starnamed_X_Escrow_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "starnamed.x.escrow.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Escrow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Escrow_V1beta1_QueryEscrowRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Escrow_V1beta1_QueryEscrowResponse>(),
        interceptors: self.interceptors?.makeEscrowInterceptors() ?? [],
        userFunction: self.escrow(request:context:)
      )

    case "Escrows":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse>(),
        interceptors: self.interceptors?.makeEscrowsInterceptors() ?? [],
        userFunction: self.escrows(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Starnamed_X_Escrow_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'escrow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEscrowInterceptors() -> [ServerInterceptor<Starnamed_X_Escrow_V1beta1_QueryEscrowRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowResponse>]

  /// - Returns: Interceptors to use when handling 'escrows'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEscrowsInterceptors() -> [ServerInterceptor<Starnamed_X_Escrow_V1beta1_QueryEscrowsRequest, Starnamed_X_Escrow_V1beta1_QueryEscrowsResponse>]
}
