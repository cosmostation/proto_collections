//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bitsong/fantoken/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the oracle Msg service
///
/// Usage: instantiate `Bitsong_Fantoken_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Bitsong_Fantoken_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? { get }

  func issueFanToken(
    _ request: Bitsong_Fantoken_MsgIssueFanToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgIssueFanToken, Bitsong_Fantoken_MsgIssueFanTokenResponse>

  func editFanToken(
    _ request: Bitsong_Fantoken_MsgEditFanToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgEditFanToken, Bitsong_Fantoken_MsgEditFanTokenResponse>

  func mintFanToken(
    _ request: Bitsong_Fantoken_MsgMintFanToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgMintFanToken, Bitsong_Fantoken_MsgMintFanTokenResponse>

  func burnFanToken(
    _ request: Bitsong_Fantoken_MsgBurnFanToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgBurnFanToken, Bitsong_Fantoken_MsgBurnFanTokenResponse>

  func transferFanTokenOwner(
    _ request: Bitsong_Fantoken_MsgTransferFanTokenOwner,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgTransferFanTokenOwner, Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse>
}

extension Bitsong_Fantoken_MsgClientProtocol {
  internal var serviceName: String {
    return "bitsong.fantoken.Msg"
  }

  /// IssueFanToken defines a method for issuing a new fan token
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueFanToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueFanToken(
    _ request: Bitsong_Fantoken_MsgIssueFanToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgIssueFanToken, Bitsong_Fantoken_MsgIssueFanTokenResponse> {
    return self.makeUnaryCall(
      path: "/bitsong.fantoken.Msg/IssueFanToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueFanTokenInterceptors() ?? []
    )
  }

  /// EditFanToken defines a method for editing a fantoken
  ///
  /// - Parameters:
  ///   - request: Request to send to EditFanToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editFanToken(
    _ request: Bitsong_Fantoken_MsgEditFanToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgEditFanToken, Bitsong_Fantoken_MsgEditFanTokenResponse> {
    return self.makeUnaryCall(
      path: "/bitsong.fantoken.Msg/EditFanToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditFanTokenInterceptors() ?? []
    )
  }

  /// MintFanToken defines a method for minting some fan tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to MintFanToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintFanToken(
    _ request: Bitsong_Fantoken_MsgMintFanToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgMintFanToken, Bitsong_Fantoken_MsgMintFanTokenResponse> {
    return self.makeUnaryCall(
      path: "/bitsong.fantoken.Msg/MintFanToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintFanTokenInterceptors() ?? []
    )
  }

  /// BurnFanToken defines a method for burning some fan tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnFanToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnFanToken(
    _ request: Bitsong_Fantoken_MsgBurnFanToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgBurnFanToken, Bitsong_Fantoken_MsgBurnFanTokenResponse> {
    return self.makeUnaryCall(
      path: "/bitsong.fantoken.Msg/BurnFanToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnFanTokenInterceptors() ?? []
    )
  }

  /// TransferFanTokenOwner defines a method for minting some fan tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferFanTokenOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferFanTokenOwner(
    _ request: Bitsong_Fantoken_MsgTransferFanTokenOwner,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgTransferFanTokenOwner, Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse> {
    return self.makeUnaryCall(
      path: "/bitsong.fantoken.Msg/TransferFanTokenOwner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTransferFanTokenOwnerInterceptors() ?? []
    )
  }
}

internal protocol Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'issueFanToken'.
  func makeIssueFanTokenInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgIssueFanToken, Bitsong_Fantoken_MsgIssueFanTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'editFanToken'.
  func makeEditFanTokenInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgEditFanToken, Bitsong_Fantoken_MsgEditFanTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'mintFanToken'.
  func makeMintFanTokenInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgMintFanToken, Bitsong_Fantoken_MsgMintFanTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'burnFanToken'.
  func makeBurnFanTokenInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgBurnFanToken, Bitsong_Fantoken_MsgBurnFanTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'transferFanTokenOwner'.
  func makeTransferFanTokenOwnerInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgTransferFanTokenOwner, Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse>]
}

internal final class Bitsong_Fantoken_MsgClient: Bitsong_Fantoken_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the bitsong.fantoken.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the oracle Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bitsong_Fantoken_MsgProvider: CallHandlerProvider {
  var interceptors: Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol? { get }

  /// IssueFanToken defines a method for issuing a new fan token
  func issueFanToken(request: Bitsong_Fantoken_MsgIssueFanToken, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgIssueFanTokenResponse>

  /// EditFanToken defines a method for editing a fantoken
  func editFanToken(request: Bitsong_Fantoken_MsgEditFanToken, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgEditFanTokenResponse>

  /// MintFanToken defines a method for minting some fan tokens
  func mintFanToken(request: Bitsong_Fantoken_MsgMintFanToken, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgMintFanTokenResponse>

  /// BurnFanToken defines a method for burning some fan tokens
  func burnFanToken(request: Bitsong_Fantoken_MsgBurnFanToken, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgBurnFanTokenResponse>

  /// TransferFanTokenOwner defines a method for minting some fan tokens
  func transferFanTokenOwner(request: Bitsong_Fantoken_MsgTransferFanTokenOwner, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse>
}

extension Bitsong_Fantoken_MsgProvider {
  internal var serviceName: Substring { return "bitsong.fantoken.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "IssueFanToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgIssueFanToken>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgIssueFanTokenResponse>(),
        interceptors: self.interceptors?.makeIssueFanTokenInterceptors() ?? [],
        userFunction: self.issueFanToken(request:context:)
      )

    case "EditFanToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgEditFanToken>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgEditFanTokenResponse>(),
        interceptors: self.interceptors?.makeEditFanTokenInterceptors() ?? [],
        userFunction: self.editFanToken(request:context:)
      )

    case "MintFanToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgMintFanToken>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgMintFanTokenResponse>(),
        interceptors: self.interceptors?.makeMintFanTokenInterceptors() ?? [],
        userFunction: self.mintFanToken(request:context:)
      )

    case "BurnFanToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgBurnFanToken>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgBurnFanTokenResponse>(),
        interceptors: self.interceptors?.makeBurnFanTokenInterceptors() ?? [],
        userFunction: self.burnFanToken(request:context:)
      )

    case "TransferFanTokenOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgTransferFanTokenOwner>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse>(),
        interceptors: self.interceptors?.makeTransferFanTokenOwnerInterceptors() ?? [],
        userFunction: self.transferFanTokenOwner(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'issueFanToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueFanTokenInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgIssueFanToken, Bitsong_Fantoken_MsgIssueFanTokenResponse>]

  /// - Returns: Interceptors to use when handling 'editFanToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditFanTokenInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgEditFanToken, Bitsong_Fantoken_MsgEditFanTokenResponse>]

  /// - Returns: Interceptors to use when handling 'mintFanToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintFanTokenInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgMintFanToken, Bitsong_Fantoken_MsgMintFanTokenResponse>]

  /// - Returns: Interceptors to use when handling 'burnFanToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnFanTokenInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgBurnFanToken, Bitsong_Fantoken_MsgBurnFanTokenResponse>]

  /// - Returns: Interceptors to use when handling 'transferFanTokenOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTransferFanTokenOwnerInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgTransferFanTokenOwner, Bitsong_Fantoken_MsgTransferFanTokenOwnerResponse>]
}
