// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sifnode/ethbridge/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Claim type enum
enum Sifnode_Ethbridge_V1_ClaimType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Unspecified claim type
  case unspecified // = 0

  /// Burn claim type
  case burn // = 1

  /// Lock claim type
  case lock // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .burn
    case 2: self = .lock
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .burn: return 1
    case .lock: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sifnode_Ethbridge_V1_ClaimType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sifnode_Ethbridge_V1_ClaimType] = [
    .unspecified,
    .burn,
    .lock,
  ]
}

#endif  // swift(>=4.2)

/// EthBridgeClaim is a structure that contains all the data for a particular
/// bridge claim
struct Sifnode_Ethbridge_V1_EthBridgeClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ethereumChainID: Int64 = 0

  /// bridge_contract_address is an EthereumAddress
  var bridgeContractAddress: String = String()

  var nonce: Int64 = 0

  var symbol: String = String()

  /// token_contract_address is an EthereumAddress
  var tokenContractAddress: String = String()

  /// ethereum_sender is an EthereumAddress
  var ethereumSender: String = String()

  /// cosmos_receiver is an sdk.AccAddress
  var cosmosReceiver: String = String()

  /// validator_address is an sdk.ValAddress
  var validatorAddress: String = String()

  var amount: String = String()

  var claimType: Sifnode_Ethbridge_V1_ClaimType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_PeggyTokens {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tokens: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// GenesisState for ethbridge
struct Sifnode_Ethbridge_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cethReceiveAccount: String = String()

  var peggyTokens: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sifnode.ethbridge.v1"

extension Sifnode_Ethbridge_V1_ClaimType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLAIM_TYPE_UNSPECIFIED"),
    1: .same(proto: "CLAIM_TYPE_BURN"),
    2: .same(proto: "CLAIM_TYPE_LOCK"),
  ]
}

extension Sifnode_Ethbridge_V1_EthBridgeClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EthBridgeClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ethereum_chain_id"),
    2: .standard(proto: "bridge_contract_address"),
    3: .same(proto: "nonce"),
    4: .same(proto: "symbol"),
    5: .standard(proto: "token_contract_address"),
    6: .standard(proto: "ethereum_sender"),
    7: .standard(proto: "cosmos_receiver"),
    8: .standard(proto: "validator_address"),
    9: .same(proto: "amount"),
    10: .standard(proto: "claim_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.ethereumChainID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bridgeContractAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.nonce) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.tokenContractAddress) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.ethereumSender) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.cosmosReceiver) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.claimType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ethereumChainID != 0 {
      try visitor.visitSingularInt64Field(value: self.ethereumChainID, fieldNumber: 1)
    }
    if !self.bridgeContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.bridgeContractAddress, fieldNumber: 2)
    }
    if self.nonce != 0 {
      try visitor.visitSingularInt64Field(value: self.nonce, fieldNumber: 3)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 4)
    }
    if !self.tokenContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenContractAddress, fieldNumber: 5)
    }
    if !self.ethereumSender.isEmpty {
      try visitor.visitSingularStringField(value: self.ethereumSender, fieldNumber: 6)
    }
    if !self.cosmosReceiver.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosReceiver, fieldNumber: 7)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 8)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 9)
    }
    if self.claimType != .unspecified {
      try visitor.visitSingularEnumField(value: self.claimType, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_EthBridgeClaim, rhs: Sifnode_Ethbridge_V1_EthBridgeClaim) -> Bool {
    if lhs.ethereumChainID != rhs.ethereumChainID {return false}
    if lhs.bridgeContractAddress != rhs.bridgeContractAddress {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.tokenContractAddress != rhs.tokenContractAddress {return false}
    if lhs.ethereumSender != rhs.ethereumSender {return false}
    if lhs.cosmosReceiver != rhs.cosmosReceiver {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.claimType != rhs.claimType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_PeggyTokens: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeggyTokens"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tokens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.tokens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tokens, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_PeggyTokens, rhs: Sifnode_Ethbridge_V1_PeggyTokens) -> Bool {
    if lhs.tokens != rhs.tokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ceth_receive_account"),
    2: .standard(proto: "peggy_tokens"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cethReceiveAccount) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.peggyTokens) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cethReceiveAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.cethReceiveAccount, fieldNumber: 1)
    }
    if !self.peggyTokens.isEmpty {
      try visitor.visitRepeatedStringField(value: self.peggyTokens, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_GenesisState, rhs: Sifnode_Ethbridge_V1_GenesisState) -> Bool {
    if lhs.cethReceiveAccount != rhs.cethReceiveAccount {return false}
    if lhs.peggyTokens != rhs.peggyTokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
