//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: sifnode/clp/v1/querier.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Sifnode_Clp_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Sifnode_Clp_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Sifnode_Clp_V1_QueryClientInterceptorFactoryProtocol? { get }

  func getPool(
    _ request: Sifnode_Clp_V1_PoolReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_PoolReq, Sifnode_Clp_V1_PoolRes>

  func getPools(
    _ request: Sifnode_Clp_V1_PoolsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_PoolsReq, Sifnode_Clp_V1_PoolsRes>

  func getLiquidityProvider(
    _ request: Sifnode_Clp_V1_LiquidityProviderReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderReq, Sifnode_Clp_V1_LiquidityProviderRes>

  func getLiquidityProviderData(
    _ request: Sifnode_Clp_V1_LiquidityProviderDataReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderDataReq, Sifnode_Clp_V1_LiquidityProviderDataRes>

  func getAssetList(
    _ request: Sifnode_Clp_V1_AssetListReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_AssetListReq, Sifnode_Clp_V1_AssetListRes>

  func getLiquidityProviders(
    _ request: Sifnode_Clp_V1_LiquidityProvidersReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProvidersReq, Sifnode_Clp_V1_LiquidityProvidersRes>

  func getLiquidityProviderList(
    _ request: Sifnode_Clp_V1_LiquidityProviderListReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderListReq, Sifnode_Clp_V1_LiquidityProviderListRes>

  func getParams(
    _ request: Sifnode_Clp_V1_ParamsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_ParamsReq, Sifnode_Clp_V1_ParamsRes>

  func getRewardParams(
    _ request: Sifnode_Clp_V1_RewardParamsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_RewardParamsReq, Sifnode_Clp_V1_RewardParamsRes>

  func getPmtpParams(
    _ request: Sifnode_Clp_V1_PmtpParamsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Sifnode_Clp_V1_PmtpParamsReq, Sifnode_Clp_V1_PmtpParamsRes>
}

extension Sifnode_Clp_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "sifnode.clp.v1.Query"
  }

  /// Unary call to GetPool
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPool(
    _ request: Sifnode_Clp_V1_PoolReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_PoolReq, Sifnode_Clp_V1_PoolRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolInterceptors() ?? []
    )
  }

  /// Unary call to GetPools
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPools(
    _ request: Sifnode_Clp_V1_PoolsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_PoolsReq, Sifnode_Clp_V1_PoolsRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetPools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPoolsInterceptors() ?? []
    )
  }

  /// Unary call to GetLiquidityProvider
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLiquidityProvider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLiquidityProvider(
    _ request: Sifnode_Clp_V1_LiquidityProviderReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderReq, Sifnode_Clp_V1_LiquidityProviderRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetLiquidityProvider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiquidityProviderInterceptors() ?? []
    )
  }

  /// Unary call to GetLiquidityProviderData
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLiquidityProviderData.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLiquidityProviderData(
    _ request: Sifnode_Clp_V1_LiquidityProviderDataReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderDataReq, Sifnode_Clp_V1_LiquidityProviderDataRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetLiquidityProviderData",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiquidityProviderDataInterceptors() ?? []
    )
  }

  /// Unary call to GetAssetList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAssetList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAssetList(
    _ request: Sifnode_Clp_V1_AssetListReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_AssetListReq, Sifnode_Clp_V1_AssetListRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetAssetList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAssetListInterceptors() ?? []
    )
  }

  /// Unary call to GetLiquidityProviders
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLiquidityProviders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLiquidityProviders(
    _ request: Sifnode_Clp_V1_LiquidityProvidersReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProvidersReq, Sifnode_Clp_V1_LiquidityProvidersRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetLiquidityProviders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiquidityProvidersInterceptors() ?? []
    )
  }

  /// Unary call to GetLiquidityProviderList
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLiquidityProviderList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLiquidityProviderList(
    _ request: Sifnode_Clp_V1_LiquidityProviderListReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_LiquidityProviderListReq, Sifnode_Clp_V1_LiquidityProviderListRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetLiquidityProviderList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLiquidityProviderListInterceptors() ?? []
    )
  }

  /// Unary call to GetParams
  ///
  /// - Parameters:
  ///   - request: Request to send to GetParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getParams(
    _ request: Sifnode_Clp_V1_ParamsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_ParamsReq, Sifnode_Clp_V1_ParamsRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetParamsInterceptors() ?? []
    )
  }

  /// Unary call to GetRewardParams
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRewardParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRewardParams(
    _ request: Sifnode_Clp_V1_RewardParamsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_RewardParamsReq, Sifnode_Clp_V1_RewardParamsRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetRewardParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRewardParamsInterceptors() ?? []
    )
  }

  /// Unary call to GetPmtpParams
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPmtpParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPmtpParams(
    _ request: Sifnode_Clp_V1_PmtpParamsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Sifnode_Clp_V1_PmtpParamsReq, Sifnode_Clp_V1_PmtpParamsRes> {
    return self.makeUnaryCall(
      path: "/sifnode.clp.v1.Query/GetPmtpParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPmtpParamsInterceptors() ?? []
    )
  }
}

internal protocol Sifnode_Clp_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'getPool'.
  func makeGetPoolInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_PoolReq, Sifnode_Clp_V1_PoolRes>]

  /// - Returns: Interceptors to use when invoking 'getPools'.
  func makeGetPoolsInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_PoolsReq, Sifnode_Clp_V1_PoolsRes>]

  /// - Returns: Interceptors to use when invoking 'getLiquidityProvider'.
  func makeGetLiquidityProviderInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_LiquidityProviderReq, Sifnode_Clp_V1_LiquidityProviderRes>]

  /// - Returns: Interceptors to use when invoking 'getLiquidityProviderData'.
  func makeGetLiquidityProviderDataInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_LiquidityProviderDataReq, Sifnode_Clp_V1_LiquidityProviderDataRes>]

  /// - Returns: Interceptors to use when invoking 'getAssetList'.
  func makeGetAssetListInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_AssetListReq, Sifnode_Clp_V1_AssetListRes>]

  /// - Returns: Interceptors to use when invoking 'getLiquidityProviders'.
  func makeGetLiquidityProvidersInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_LiquidityProvidersReq, Sifnode_Clp_V1_LiquidityProvidersRes>]

  /// - Returns: Interceptors to use when invoking 'getLiquidityProviderList'.
  func makeGetLiquidityProviderListInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_LiquidityProviderListReq, Sifnode_Clp_V1_LiquidityProviderListRes>]

  /// - Returns: Interceptors to use when invoking 'getParams'.
  func makeGetParamsInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_ParamsReq, Sifnode_Clp_V1_ParamsRes>]

  /// - Returns: Interceptors to use when invoking 'getRewardParams'.
  func makeGetRewardParamsInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_RewardParamsReq, Sifnode_Clp_V1_RewardParamsRes>]

  /// - Returns: Interceptors to use when invoking 'getPmtpParams'.
  func makeGetPmtpParamsInterceptors() -> [ClientInterceptor<Sifnode_Clp_V1_PmtpParamsReq, Sifnode_Clp_V1_PmtpParamsRes>]
}

internal final class Sifnode_Clp_V1_QueryClient: Sifnode_Clp_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Sifnode_Clp_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the sifnode.clp.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Sifnode_Clp_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Sifnode_Clp_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Sifnode_Clp_V1_QueryServerInterceptorFactoryProtocol? { get }

  func getPool(request: Sifnode_Clp_V1_PoolReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_PoolRes>

  func getPools(request: Sifnode_Clp_V1_PoolsReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_PoolsRes>

  func getLiquidityProvider(request: Sifnode_Clp_V1_LiquidityProviderReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_LiquidityProviderRes>

  func getLiquidityProviderData(request: Sifnode_Clp_V1_LiquidityProviderDataReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_LiquidityProviderDataRes>

  func getAssetList(request: Sifnode_Clp_V1_AssetListReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_AssetListRes>

  func getLiquidityProviders(request: Sifnode_Clp_V1_LiquidityProvidersReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_LiquidityProvidersRes>

  func getLiquidityProviderList(request: Sifnode_Clp_V1_LiquidityProviderListReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_LiquidityProviderListRes>

  func getParams(request: Sifnode_Clp_V1_ParamsReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_ParamsRes>

  func getRewardParams(request: Sifnode_Clp_V1_RewardParamsReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_RewardParamsRes>

  func getPmtpParams(request: Sifnode_Clp_V1_PmtpParamsReq, context: StatusOnlyCallContext) -> EventLoopFuture<Sifnode_Clp_V1_PmtpParamsRes>
}

extension Sifnode_Clp_V1_QueryProvider {
  internal var serviceName: Substring { return "sifnode.clp.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_PoolReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_PoolRes>(),
        interceptors: self.interceptors?.makeGetPoolInterceptors() ?? [],
        userFunction: self.getPool(request:context:)
      )

    case "GetPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_PoolsReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_PoolsRes>(),
        interceptors: self.interceptors?.makeGetPoolsInterceptors() ?? [],
        userFunction: self.getPools(request:context:)
      )

    case "GetLiquidityProvider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_LiquidityProviderReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_LiquidityProviderRes>(),
        interceptors: self.interceptors?.makeGetLiquidityProviderInterceptors() ?? [],
        userFunction: self.getLiquidityProvider(request:context:)
      )

    case "GetLiquidityProviderData":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_LiquidityProviderDataReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_LiquidityProviderDataRes>(),
        interceptors: self.interceptors?.makeGetLiquidityProviderDataInterceptors() ?? [],
        userFunction: self.getLiquidityProviderData(request:context:)
      )

    case "GetAssetList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_AssetListReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_AssetListRes>(),
        interceptors: self.interceptors?.makeGetAssetListInterceptors() ?? [],
        userFunction: self.getAssetList(request:context:)
      )

    case "GetLiquidityProviders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_LiquidityProvidersReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_LiquidityProvidersRes>(),
        interceptors: self.interceptors?.makeGetLiquidityProvidersInterceptors() ?? [],
        userFunction: self.getLiquidityProviders(request:context:)
      )

    case "GetLiquidityProviderList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_LiquidityProviderListReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_LiquidityProviderListRes>(),
        interceptors: self.interceptors?.makeGetLiquidityProviderListInterceptors() ?? [],
        userFunction: self.getLiquidityProviderList(request:context:)
      )

    case "GetParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_ParamsReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_ParamsRes>(),
        interceptors: self.interceptors?.makeGetParamsInterceptors() ?? [],
        userFunction: self.getParams(request:context:)
      )

    case "GetRewardParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_RewardParamsReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_RewardParamsRes>(),
        interceptors: self.interceptors?.makeGetRewardParamsInterceptors() ?? [],
        userFunction: self.getRewardParams(request:context:)
      )

    case "GetPmtpParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Sifnode_Clp_V1_PmtpParamsReq>(),
        responseSerializer: ProtobufSerializer<Sifnode_Clp_V1_PmtpParamsRes>(),
        interceptors: self.interceptors?.makeGetPmtpParamsInterceptors() ?? [],
        userFunction: self.getPmtpParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Sifnode_Clp_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'getPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPoolInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_PoolReq, Sifnode_Clp_V1_PoolRes>]

  /// - Returns: Interceptors to use when handling 'getPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPoolsInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_PoolsReq, Sifnode_Clp_V1_PoolsRes>]

  /// - Returns: Interceptors to use when handling 'getLiquidityProvider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLiquidityProviderInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_LiquidityProviderReq, Sifnode_Clp_V1_LiquidityProviderRes>]

  /// - Returns: Interceptors to use when handling 'getLiquidityProviderData'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLiquidityProviderDataInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_LiquidityProviderDataReq, Sifnode_Clp_V1_LiquidityProviderDataRes>]

  /// - Returns: Interceptors to use when handling 'getAssetList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAssetListInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_AssetListReq, Sifnode_Clp_V1_AssetListRes>]

  /// - Returns: Interceptors to use when handling 'getLiquidityProviders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLiquidityProvidersInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_LiquidityProvidersReq, Sifnode_Clp_V1_LiquidityProvidersRes>]

  /// - Returns: Interceptors to use when handling 'getLiquidityProviderList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLiquidityProviderListInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_LiquidityProviderListReq, Sifnode_Clp_V1_LiquidityProviderListRes>]

  /// - Returns: Interceptors to use when handling 'getParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetParamsInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_ParamsReq, Sifnode_Clp_V1_ParamsRes>]

  /// - Returns: Interceptors to use when handling 'getRewardParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRewardParamsInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_RewardParamsReq, Sifnode_Clp_V1_RewardParamsRes>]

  /// - Returns: Interceptors to use when handling 'getPmtpParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPmtpParamsInterceptors() -> [ServerInterceptor<Sifnode_Clp_V1_PmtpParamsReq, Sifnode_Clp_V1_PmtpParamsRes>]
}
