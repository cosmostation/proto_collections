//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: farm/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Irismod_Farm_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Irismod_Farm_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Irismod_Farm_QueryClientInterceptorFactoryProtocol? { get }

  func farmPools(
    _ request: Irismod_Farm_QueryFarmPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Farm_QueryFarmPoolsRequest, Irismod_Farm_QueryFarmPoolsResponse>

  func farmPool(
    _ request: Irismod_Farm_QueryFarmPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Farm_QueryFarmPoolRequest, Irismod_Farm_QueryFarmPoolResponse>

  func farmer(
    _ request: Irismod_Farm_QueryFarmerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Farm_QueryFarmerRequest, Irismod_Farm_QueryFarmerResponse>

  func params(
    _ request: Irismod_Farm_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Farm_QueryParamsRequest, Irismod_Farm_QueryParamsResponse>
}

extension Irismod_Farm_QueryClientProtocol {
  internal var serviceName: String {
    return "irismod.farm.Query"
  }

  /// Unary call to FarmPools
  ///
  /// - Parameters:
  ///   - request: Request to send to FarmPools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farmPools(
    _ request: Irismod_Farm_QueryFarmPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Farm_QueryFarmPoolsRequest, Irismod_Farm_QueryFarmPoolsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.farm.Query/FarmPools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmPoolsInterceptors() ?? []
    )
  }

  /// Unary call to FarmPool
  ///
  /// - Parameters:
  ///   - request: Request to send to FarmPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farmPool(
    _ request: Irismod_Farm_QueryFarmPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Farm_QueryFarmPoolRequest, Irismod_Farm_QueryFarmPoolResponse> {
    return self.makeUnaryCall(
      path: "/irismod.farm.Query/FarmPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmPoolInterceptors() ?? []
    )
  }

  /// Unary call to Farmer
  ///
  /// - Parameters:
  ///   - request: Request to send to Farmer.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func farmer(
    _ request: Irismod_Farm_QueryFarmerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Farm_QueryFarmerRequest, Irismod_Farm_QueryFarmerResponse> {
    return self.makeUnaryCall(
      path: "/irismod.farm.Query/Farmer",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFarmerInterceptors() ?? []
    )
  }

  /// Params queries the htlc parameters
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Irismod_Farm_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Farm_QueryParamsRequest, Irismod_Farm_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.farm.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Irismod_Farm_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'farmPools'.
  func makeFarmPoolsInterceptors() -> [ClientInterceptor<Irismod_Farm_QueryFarmPoolsRequest, Irismod_Farm_QueryFarmPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'farmPool'.
  func makeFarmPoolInterceptors() -> [ClientInterceptor<Irismod_Farm_QueryFarmPoolRequest, Irismod_Farm_QueryFarmPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'farmer'.
  func makeFarmerInterceptors() -> [ClientInterceptor<Irismod_Farm_QueryFarmerRequest, Irismod_Farm_QueryFarmerResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Irismod_Farm_QueryParamsRequest, Irismod_Farm_QueryParamsResponse>]
}

internal final class Irismod_Farm_QueryClient: Irismod_Farm_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Irismod_Farm_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the irismod.farm.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Irismod_Farm_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Farm_QueryProvider: CallHandlerProvider {
  var interceptors: Irismod_Farm_QueryServerInterceptorFactoryProtocol? { get }

  func farmPools(request: Irismod_Farm_QueryFarmPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Farm_QueryFarmPoolsResponse>

  func farmPool(request: Irismod_Farm_QueryFarmPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Farm_QueryFarmPoolResponse>

  func farmer(request: Irismod_Farm_QueryFarmerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Farm_QueryFarmerResponse>

  /// Params queries the htlc parameters
  func params(request: Irismod_Farm_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Farm_QueryParamsResponse>
}

extension Irismod_Farm_QueryProvider {
  internal var serviceName: Substring { return "irismod.farm.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FarmPools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Farm_QueryFarmPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Farm_QueryFarmPoolsResponse>(),
        interceptors: self.interceptors?.makeFarmPoolsInterceptors() ?? [],
        userFunction: self.farmPools(request:context:)
      )

    case "FarmPool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Farm_QueryFarmPoolRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Farm_QueryFarmPoolResponse>(),
        interceptors: self.interceptors?.makeFarmPoolInterceptors() ?? [],
        userFunction: self.farmPool(request:context:)
      )

    case "Farmer":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Farm_QueryFarmerRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Farm_QueryFarmerResponse>(),
        interceptors: self.interceptors?.makeFarmerInterceptors() ?? [],
        userFunction: self.farmer(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Irismod_Farm_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Irismod_Farm_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Irismod_Farm_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'farmPools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmPoolsInterceptors() -> [ServerInterceptor<Irismod_Farm_QueryFarmPoolsRequest, Irismod_Farm_QueryFarmPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'farmPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmPoolInterceptors() -> [ServerInterceptor<Irismod_Farm_QueryFarmPoolRequest, Irismod_Farm_QueryFarmPoolResponse>]

  /// - Returns: Interceptors to use when handling 'farmer'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFarmerInterceptors() -> [ServerInterceptor<Irismod_Farm_QueryFarmerRequest, Irismod_Farm_QueryFarmerResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Irismod_Farm_QueryParamsRequest, Irismod_Farm_QueryParamsResponse>]
}
