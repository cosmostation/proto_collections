// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/claim/v1beta1/claim.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ConditionType defines the type of condition that a recipient must execute in order to receive a claimable amount.
enum Crescent_Claim_V1beta1_ConditionType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// CONDITION_TYPE_UNSPECIFIED specifies an unknown condition type
  case unspecified // = 0

  /// CONDITION_TYPE_DEPOSIT specifies deposit condition type
  case deposit // = 1

  /// CONDITION_TYPE_SWAP specifies swap condition type
  case swap // = 2

  /// CONDITION_TYPE_LIQUIDSTAKE specifies liquid stake condition type
  case liquidstake // = 3

  /// CONDITION_TYPE_VOTE specifies governance vote condition type
  case vote // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .deposit
    case 2: self = .swap
    case 3: self = .liquidstake
    case 4: self = .vote
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .deposit: return 1
    case .swap: return 2
    case .liquidstake: return 3
    case .vote: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Crescent_Claim_V1beta1_ConditionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Crescent_Claim_V1beta1_ConditionType] = [
    .unspecified,
    .deposit,
    .swap,
    .liquidstake,
    .vote,
  ]
}

#endif  // swift(>=4.2)

/// Airdrop defines airdrop information.
struct Crescent_Claim_V1beta1_Airdrop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// id specifies index of the airdrop
  var id: UInt64 = 0

  /// source_address defines the bech32-encoded source address
  /// where the source of coins from
  var sourceAddress: String = String()

  /// conditions specifies a list of conditions
  var conditions: [Crescent_Claim_V1beta1_ConditionType] = []

  /// start_time specifies the start time of the airdrop
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// end_time specifies the start time of the airdrop
  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ClaimRecord defines claim record that corresponds to the airdrop.
struct Crescent_Claim_V1beta1_ClaimRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// airdrop_id specifies airdrop id
  var airdropID: UInt64 = 0

  /// recipient specifies the bech32-encoded address that is eligible to claim airdrop
  var recipient: String = String()

  /// initial_claimable_coins specifies the initial claimable coins
  var initialClaimableCoins: [Cosmos_Base_V1beta1_Coin] = []

  /// claimable_coins specifies the unclaimed claimable coins
  var claimableCoins: [Cosmos_Base_V1beta1_Coin] = []

  /// claimed_conditions specifies a list of condition types
  /// initial values are empty and each condition type gets appended when claim is successfully executed
  var claimedConditions: [Crescent_Claim_V1beta1_ConditionType] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.claim.v1beta1"

extension Crescent_Claim_V1beta1_ConditionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONDITION_TYPE_UNSPECIFIED"),
    1: .same(proto: "CONDITION_TYPE_DEPOSIT"),
    2: .same(proto: "CONDITION_TYPE_SWAP"),
    3: .same(proto: "CONDITION_TYPE_LIQUIDSTAKE"),
    4: .same(proto: "CONDITION_TYPE_VOTE"),
  ]
}

extension Crescent_Claim_V1beta1_Airdrop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Airdrop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_address"),
    3: .same(proto: "conditions"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceAddress) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.conditions) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.sourceAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceAddress, fieldNumber: 2)
    }
    if !self.conditions.isEmpty {
      try visitor.visitPackedEnumField(value: self.conditions, fieldNumber: 3)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Claim_V1beta1_Airdrop, rhs: Crescent_Claim_V1beta1_Airdrop) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.sourceAddress != rhs.sourceAddress {return false}
    if lhs.conditions != rhs.conditions {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Claim_V1beta1_ClaimRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClaimRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "airdrop_id"),
    2: .same(proto: "recipient"),
    3: .standard(proto: "initial_claimable_coins"),
    4: .standard(proto: "claimable_coins"),
    5: .standard(proto: "claimed_conditions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.airdropID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.initialClaimableCoins) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.claimableCoins) }()
      case 5: try { try decoder.decodeRepeatedEnumField(value: &self.claimedConditions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.airdropID != 0 {
      try visitor.visitSingularUInt64Field(value: self.airdropID, fieldNumber: 1)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 2)
    }
    if !self.initialClaimableCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.initialClaimableCoins, fieldNumber: 3)
    }
    if !self.claimableCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimableCoins, fieldNumber: 4)
    }
    if !self.claimedConditions.isEmpty {
      try visitor.visitPackedEnumField(value: self.claimedConditions, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Claim_V1beta1_ClaimRecord, rhs: Crescent_Claim_V1beta1_ClaimRecord) -> Bool {
    if lhs.airdropID != rhs.airdropID {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.initialClaimableCoins != rhs.initialClaimableCoins {return false}
    if lhs.claimableCoins != rhs.claimableCoins {return false}
    if lhs.claimedConditions != rhs.claimedConditions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
