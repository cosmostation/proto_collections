//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/subspaces/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Desmos_Subspaces_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Subspaces_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Subspaces_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func subspace(
    _ request: Desmos_Subspaces_V1beta1_QuerySubspaceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QuerySubspaceRequest, Desmos_Subspaces_V1beta1_QuerySubspaceResponse>

  func admins(
    _ request: Desmos_Subspaces_V1beta1_QueryAdminsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryAdminsRequest, Desmos_Subspaces_V1beta1_QueryAdminsResponse>

  func registeredUsers(
    _ request: Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest, Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse>

  func bannedUsers(
    _ request: Desmos_Subspaces_V1beta1_QueryBannedUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryBannedUsersRequest, Desmos_Subspaces_V1beta1_QueryBannedUsersResponse>

  func subspaces(
    _ request: Desmos_Subspaces_V1beta1_QuerySubspacesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QuerySubspacesRequest, Desmos_Subspaces_V1beta1_QuerySubspacesResponse>
}

extension Desmos_Subspaces_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "desmos.subspaces.v1beta1.Query"
  }

  /// Subspace queries all the information about the subspace with the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to Subspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subspace(
    _ request: Desmos_Subspaces_V1beta1_QuerySubspaceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QuerySubspaceRequest, Desmos_Subspaces_V1beta1_QuerySubspaceResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Query/Subspace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspaceInterceptors() ?? []
    )
  }

  /// Admins queries all the admins of the subspace having the given id
  ///
  /// - Parameters:
  ///   - request: Request to send to Admins.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func admins(
    _ request: Desmos_Subspaces_V1beta1_QueryAdminsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryAdminsRequest, Desmos_Subspaces_V1beta1_QueryAdminsResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Query/Admins",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdminsInterceptors() ?? []
    )
  }

  /// RegisteredUsers queries all the registered users of the subspace having the
  /// given id
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisteredUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registeredUsers(
    _ request: Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest, Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Query/RegisteredUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisteredUsersInterceptors() ?? []
    )
  }

  /// BannedUsers queries all the banned users of the subspace having the given
  /// id
  ///
  /// - Parameters:
  ///   - request: Request to send to BannedUsers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bannedUsers(
    _ request: Desmos_Subspaces_V1beta1_QueryBannedUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QueryBannedUsersRequest, Desmos_Subspaces_V1beta1_QueryBannedUsersResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Query/BannedUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBannedUsersInterceptors() ?? []
    )
  }

  /// Subspaces queries all the subspaces inside Desmos
  ///
  /// - Parameters:
  ///   - request: Request to send to Subspaces.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subspaces(
    _ request: Desmos_Subspaces_V1beta1_QuerySubspacesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Subspaces_V1beta1_QuerySubspacesRequest, Desmos_Subspaces_V1beta1_QuerySubspacesResponse> {
    return self.makeUnaryCall(
      path: "/desmos.subspaces.v1beta1.Query/Subspaces",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubspacesInterceptors() ?? []
    )
  }
}

internal protocol Desmos_Subspaces_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'subspace'.
  func makeSubspaceInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_QuerySubspaceRequest, Desmos_Subspaces_V1beta1_QuerySubspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'admins'.
  func makeAdminsInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_QueryAdminsRequest, Desmos_Subspaces_V1beta1_QueryAdminsResponse>]

  /// - Returns: Interceptors to use when invoking 'registeredUsers'.
  func makeRegisteredUsersInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest, Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'bannedUsers'.
  func makeBannedUsersInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_QueryBannedUsersRequest, Desmos_Subspaces_V1beta1_QueryBannedUsersResponse>]

  /// - Returns: Interceptors to use when invoking 'subspaces'.
  func makeSubspacesInterceptors() -> [ClientInterceptor<Desmos_Subspaces_V1beta1_QuerySubspacesRequest, Desmos_Subspaces_V1beta1_QuerySubspacesResponse>]
}

internal final class Desmos_Subspaces_V1beta1_QueryClient: Desmos_Subspaces_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Subspaces_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.subspaces.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Subspaces_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Subspaces_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Desmos_Subspaces_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Subspace queries all the information about the subspace with the given id
  func subspace(request: Desmos_Subspaces_V1beta1_QuerySubspaceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_QuerySubspaceResponse>

  /// Admins queries all the admins of the subspace having the given id
  func admins(request: Desmos_Subspaces_V1beta1_QueryAdminsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_QueryAdminsResponse>

  /// RegisteredUsers queries all the registered users of the subspace having the
  /// given id
  func registeredUsers(request: Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse>

  /// BannedUsers queries all the banned users of the subspace having the given
  /// id
  func bannedUsers(request: Desmos_Subspaces_V1beta1_QueryBannedUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_QueryBannedUsersResponse>

  /// Subspaces queries all the subspaces inside Desmos
  func subspaces(request: Desmos_Subspaces_V1beta1_QuerySubspacesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Subspaces_V1beta1_QuerySubspacesResponse>
}

extension Desmos_Subspaces_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "desmos.subspaces.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Subspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_QuerySubspaceRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_QuerySubspaceResponse>(),
        interceptors: self.interceptors?.makeSubspaceInterceptors() ?? [],
        userFunction: self.subspace(request:context:)
      )

    case "Admins":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_QueryAdminsRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_QueryAdminsResponse>(),
        interceptors: self.interceptors?.makeAdminsInterceptors() ?? [],
        userFunction: self.admins(request:context:)
      )

    case "RegisteredUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse>(),
        interceptors: self.interceptors?.makeRegisteredUsersInterceptors() ?? [],
        userFunction: self.registeredUsers(request:context:)
      )

    case "BannedUsers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_QueryBannedUsersRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_QueryBannedUsersResponse>(),
        interceptors: self.interceptors?.makeBannedUsersInterceptors() ?? [],
        userFunction: self.bannedUsers(request:context:)
      )

    case "Subspaces":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Subspaces_V1beta1_QuerySubspacesRequest>(),
        responseSerializer: ProtobufSerializer<Desmos_Subspaces_V1beta1_QuerySubspacesResponse>(),
        interceptors: self.interceptors?.makeSubspacesInterceptors() ?? [],
        userFunction: self.subspaces(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Subspaces_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'subspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubspaceInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_QuerySubspaceRequest, Desmos_Subspaces_V1beta1_QuerySubspaceResponse>]

  /// - Returns: Interceptors to use when handling 'admins'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdminsInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_QueryAdminsRequest, Desmos_Subspaces_V1beta1_QueryAdminsResponse>]

  /// - Returns: Interceptors to use when handling 'registeredUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisteredUsersInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_QueryRegisteredUsersRequest, Desmos_Subspaces_V1beta1_QueryRegisteredUsersResponse>]

  /// - Returns: Interceptors to use when handling 'bannedUsers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBannedUsersInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_QueryBannedUsersRequest, Desmos_Subspaces_V1beta1_QueryBannedUsersResponse>]

  /// - Returns: Interceptors to use when handling 'subspaces'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubspacesInterceptors() -> [ServerInterceptor<Desmos_Subspaces_V1beta1_QuerySubspacesRequest, Desmos_Subspaces_V1beta1_QuerySubspacesResponse>]
}
