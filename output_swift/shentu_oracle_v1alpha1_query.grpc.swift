//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/oracle/v1alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for oracle module.
///
/// Usage: instantiate `Shentu_Oracle_V1alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Oracle_V1alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func operator(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>

  func operators(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>

  func withdraws(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>

  func task(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>

  func response(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>
}

extension Shentu_Oracle_V1alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "shentu.oracle.v1alpha1.Query"
  }

  /// Unary call to Operator
  ///
  /// - Parameters:
  ///   - request: Request to send to Operator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func operator(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse> {
    return self.makeUnaryCall(
      path: "/shentu.oracle.v1alpha1.Query/Operator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorInterceptors() ?? []
    )
  }

  /// Unary call to Operators
  ///
  /// - Parameters:
  ///   - request: Request to send to Operators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func operators(
    _ request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.oracle.v1alpha1.Query/Operators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOperatorsInterceptors() ?? []
    )
  }

  /// Unary call to Withdraws
  ///
  /// - Parameters:
  ///   - request: Request to send to Withdraws.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdraws(
    _ request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.oracle.v1alpha1.Query/Withdraws",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? []
    )
  }

  /// Unary call to Task
  ///
  /// - Parameters:
  ///   - request: Request to send to Task.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func task(
    _ request: Shentu_Oracle_V1alpha1_QueryTaskRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse> {
    return self.makeUnaryCall(
      path: "/shentu.oracle.v1alpha1.Query/Task",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskInterceptors() ?? []
    )
  }

  /// Unary call to Response
  ///
  /// - Parameters:
  ///   - request: Request to send to Response.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func response(
    _ request: Shentu_Oracle_V1alpha1_QueryResponseRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse> {
    return self.makeUnaryCall(
      path: "/shentu.oracle.v1alpha1.Query/Response",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResponseInterceptors() ?? []
    )
  }
}

internal protocol Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'operator'.
  func makeOperatorInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>]

  /// - Returns: Interceptors to use when invoking 'operators'.
  func makeOperatorsInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdraws'.
  func makeWithdrawsInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>]

  /// - Returns: Interceptors to use when invoking 'task'.
  func makeTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'response'.
  func makeResponseInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>]
}

internal final class Shentu_Oracle_V1alpha1_QueryClient: Shentu_Oracle_V1alpha1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.oracle.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for oracle module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Oracle_V1alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  func operator(request: Shentu_Oracle_V1alpha1_QueryOperatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryOperatorResponse>

  func operators(request: Shentu_Oracle_V1alpha1_QueryOperatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryOperatorsResponse>

  func withdraws(request: Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>

  func task(request: Shentu_Oracle_V1alpha1_QueryTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryTaskResponse>

  func response(request: Shentu_Oracle_V1alpha1_QueryResponseRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_QueryResponseResponse>
}

extension Shentu_Oracle_V1alpha1_QueryProvider {
  internal var serviceName: Substring { return "shentu.oracle.v1alpha1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Operator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorResponse>(),
        interceptors: self.interceptors?.makeOperatorInterceptors() ?? [],
        userFunction: self.operator(request:context:)
      )

    case "Operators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryOperatorsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryOperatorsResponse>(),
        interceptors: self.interceptors?.makeOperatorsInterceptors() ?? [],
        userFunction: self.operators(request:context:)
      )

    case "Withdraws":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>(),
        interceptors: self.interceptors?.makeWithdrawsInterceptors() ?? [],
        userFunction: self.withdraws(request:context:)
      )

    case "Task":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryTaskRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryTaskResponse>(),
        interceptors: self.interceptors?.makeTaskInterceptors() ?? [],
        userFunction: self.task(request:context:)
      )

    case "Response":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_QueryResponseRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_QueryResponseResponse>(),
        interceptors: self.interceptors?.makeResponseInterceptors() ?? [],
        userFunction: self.response(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Oracle_V1alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'operator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOperatorInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorRequest, Shentu_Oracle_V1alpha1_QueryOperatorResponse>]

  /// - Returns: Interceptors to use when handling 'operators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOperatorsInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryOperatorsRequest, Shentu_Oracle_V1alpha1_QueryOperatorsResponse>]

  /// - Returns: Interceptors to use when handling 'withdraws'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawsInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryWithdrawsRequest, Shentu_Oracle_V1alpha1_QueryWithdrawsResponse>]

  /// - Returns: Interceptors to use when handling 'task'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryTaskRequest, Shentu_Oracle_V1alpha1_QueryTaskResponse>]

  /// - Returns: Interceptors to use when handling 'response'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResponseInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_QueryResponseRequest, Shentu_Oracle_V1alpha1_QueryResponseResponse>]
}
