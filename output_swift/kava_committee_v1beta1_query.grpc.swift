//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kava/committee/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for committee module
///
/// Usage: instantiate `Kava_Committee_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Kava_Committee_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kava_Committee_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func committees(
    _ request: Kava_Committee_V1beta1_QueryCommitteesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryCommitteesRequest, Kava_Committee_V1beta1_QueryCommitteesResponse>

  func committee(
    _ request: Kava_Committee_V1beta1_QueryCommitteeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryCommitteeRequest, Kava_Committee_V1beta1_QueryCommitteeResponse>

  func proposals(
    _ request: Kava_Committee_V1beta1_QueryProposalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryProposalsRequest, Kava_Committee_V1beta1_QueryProposalsResponse>

  func proposal(
    _ request: Kava_Committee_V1beta1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryProposalRequest, Kava_Committee_V1beta1_QueryProposalResponse>

  func nextProposalID(
    _ request: Kava_Committee_V1beta1_QueryNextProposalIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryNextProposalIDRequest, Kava_Committee_V1beta1_QueryNextProposalIDResponse>

  func votes(
    _ request: Kava_Committee_V1beta1_QueryVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryVotesRequest, Kava_Committee_V1beta1_QueryVotesResponse>

  func vote(
    _ request: Kava_Committee_V1beta1_QueryVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryVoteRequest, Kava_Committee_V1beta1_QueryVoteResponse>

  func tally(
    _ request: Kava_Committee_V1beta1_QueryTallyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryTallyRequest, Kava_Committee_V1beta1_QueryTallyResponse>

  func rawParams(
    _ request: Kava_Committee_V1beta1_QueryRawParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryRawParamsRequest, Kava_Committee_V1beta1_QueryRawParamsResponse>
}

extension Kava_Committee_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "kava.committee.v1beta1.Query"
  }

  /// Committees queries all committess of the committee module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Committees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func committees(
    _ request: Kava_Committee_V1beta1_QueryCommitteesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryCommitteesRequest, Kava_Committee_V1beta1_QueryCommitteesResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Committees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitteesInterceptors() ?? []
    )
  }

  /// Committee queries a committee based on committee ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Committee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func committee(
    _ request: Kava_Committee_V1beta1_QueryCommitteeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryCommitteeRequest, Kava_Committee_V1beta1_QueryCommitteeResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Committee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommitteeInterceptors() ?? []
    )
  }

  /// Proposals queries proposals based on committee ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposals(
    _ request: Kava_Committee_V1beta1_QueryProposalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryProposalsRequest, Kava_Committee_V1beta1_QueryProposalsResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Proposals",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsInterceptors() ?? []
    )
  }

  /// Deposits queries a proposal based on proposal ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Kava_Committee_V1beta1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryProposalRequest, Kava_Committee_V1beta1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Proposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// NextProposalID queries the next proposal ID of the committee module.
  ///
  /// - Parameters:
  ///   - request: Request to send to NextProposalID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nextProposalID(
    _ request: Kava_Committee_V1beta1_QueryNextProposalIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryNextProposalIDRequest, Kava_Committee_V1beta1_QueryNextProposalIDResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/NextProposalID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNextProposalIDInterceptors() ?? []
    )
  }

  /// Votes queries all votes for a single proposal ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Votes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votes(
    _ request: Kava_Committee_V1beta1_QueryVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryVotesRequest, Kava_Committee_V1beta1_QueryVotesResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Votes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesInterceptors() ?? []
    )
  }

  /// Vote queries the vote of a single voter for a single proposal ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Kava_Committee_V1beta1_QueryVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryVoteRequest, Kava_Committee_V1beta1_QueryVoteResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Vote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Tally queries the tally of a single proposal ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to Tally.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tally(
    _ request: Kava_Committee_V1beta1_QueryTallyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryTallyRequest, Kava_Committee_V1beta1_QueryTallyResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/Tally",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyInterceptors() ?? []
    )
  }

  /// RawParams queries the raw params data of any subspace and key.
  ///
  /// - Parameters:
  ///   - request: Request to send to RawParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rawParams(
    _ request: Kava_Committee_V1beta1_QueryRawParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Committee_V1beta1_QueryRawParamsRequest, Kava_Committee_V1beta1_QueryRawParamsResponse> {
    return self.makeUnaryCall(
      path: "/kava.committee.v1beta1.Query/RawParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRawParamsInterceptors() ?? []
    )
  }
}

internal protocol Kava_Committee_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'committees'.
  func makeCommitteesInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryCommitteesRequest, Kava_Committee_V1beta1_QueryCommitteesResponse>]

  /// - Returns: Interceptors to use when invoking 'committee'.
  func makeCommitteeInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryCommitteeRequest, Kava_Committee_V1beta1_QueryCommitteeResponse>]

  /// - Returns: Interceptors to use when invoking 'proposals'.
  func makeProposalsInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryProposalsRequest, Kava_Committee_V1beta1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryProposalRequest, Kava_Committee_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'nextProposalID'.
  func makeNextProposalIDInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryNextProposalIDRequest, Kava_Committee_V1beta1_QueryNextProposalIDResponse>]

  /// - Returns: Interceptors to use when invoking 'votes'.
  func makeVotesInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryVotesRequest, Kava_Committee_V1beta1_QueryVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryVoteRequest, Kava_Committee_V1beta1_QueryVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'tally'.
  func makeTallyInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryTallyRequest, Kava_Committee_V1beta1_QueryTallyResponse>]

  /// - Returns: Interceptors to use when invoking 'rawParams'.
  func makeRawParamsInterceptors() -> [ClientInterceptor<Kava_Committee_V1beta1_QueryRawParamsRequest, Kava_Committee_V1beta1_QueryRawParamsResponse>]
}

internal final class Kava_Committee_V1beta1_QueryClient: Kava_Committee_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Committee_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the kava.committee.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Committee_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for committee module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kava_Committee_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Kava_Committee_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Committees queries all committess of the committee module.
  func committees(request: Kava_Committee_V1beta1_QueryCommitteesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryCommitteesResponse>

  /// Committee queries a committee based on committee ID.
  func committee(request: Kava_Committee_V1beta1_QueryCommitteeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryCommitteeResponse>

  /// Proposals queries proposals based on committee ID.
  func proposals(request: Kava_Committee_V1beta1_QueryProposalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryProposalsResponse>

  /// Deposits queries a proposal based on proposal ID.
  func proposal(request: Kava_Committee_V1beta1_QueryProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryProposalResponse>

  /// NextProposalID queries the next proposal ID of the committee module.
  func nextProposalID(request: Kava_Committee_V1beta1_QueryNextProposalIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryNextProposalIDResponse>

  /// Votes queries all votes for a single proposal ID.
  func votes(request: Kava_Committee_V1beta1_QueryVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryVotesResponse>

  /// Vote queries the vote of a single voter for a single proposal ID.
  func vote(request: Kava_Committee_V1beta1_QueryVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryVoteResponse>

  /// Tally queries the tally of a single proposal ID.
  func tally(request: Kava_Committee_V1beta1_QueryTallyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryTallyResponse>

  /// RawParams queries the raw params data of any subspace and key.
  func rawParams(request: Kava_Committee_V1beta1_QueryRawParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Committee_V1beta1_QueryRawParamsResponse>
}

extension Kava_Committee_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "kava.committee.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Committees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryCommitteesRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryCommitteesResponse>(),
        interceptors: self.interceptors?.makeCommitteesInterceptors() ?? [],
        userFunction: self.committees(request:context:)
      )

    case "Committee":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryCommitteeRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryCommitteeResponse>(),
        interceptors: self.interceptors?.makeCommitteeInterceptors() ?? [],
        userFunction: self.committee(request:context:)
      )

    case "Proposals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryProposalsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryProposalsResponse>(),
        interceptors: self.interceptors?.makeProposalsInterceptors() ?? [],
        userFunction: self.proposals(request:context:)
      )

    case "Proposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryProposalRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryProposalResponse>(),
        interceptors: self.interceptors?.makeProposalInterceptors() ?? [],
        userFunction: self.proposal(request:context:)
      )

    case "NextProposalID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryNextProposalIDRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryNextProposalIDResponse>(),
        interceptors: self.interceptors?.makeNextProposalIDInterceptors() ?? [],
        userFunction: self.nextProposalID(request:context:)
      )

    case "Votes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryVotesRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryVotesResponse>(),
        interceptors: self.interceptors?.makeVotesInterceptors() ?? [],
        userFunction: self.votes(request:context:)
      )

    case "Vote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryVoteRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        userFunction: self.vote(request:context:)
      )

    case "Tally":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryTallyRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryTallyResponse>(),
        interceptors: self.interceptors?.makeTallyInterceptors() ?? [],
        userFunction: self.tally(request:context:)
      )

    case "RawParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Committee_V1beta1_QueryRawParamsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Committee_V1beta1_QueryRawParamsResponse>(),
        interceptors: self.interceptors?.makeRawParamsInterceptors() ?? [],
        userFunction: self.rawParams(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kava_Committee_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'committees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommitteesInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryCommitteesRequest, Kava_Committee_V1beta1_QueryCommitteesResponse>]

  /// - Returns: Interceptors to use when handling 'committee'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommitteeInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryCommitteeRequest, Kava_Committee_V1beta1_QueryCommitteeResponse>]

  /// - Returns: Interceptors to use when handling 'proposals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalsInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryProposalsRequest, Kava_Committee_V1beta1_QueryProposalsResponse>]

  /// - Returns: Interceptors to use when handling 'proposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposalInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryProposalRequest, Kava_Committee_V1beta1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when handling 'nextProposalID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNextProposalIDInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryNextProposalIDRequest, Kava_Committee_V1beta1_QueryNextProposalIDResponse>]

  /// - Returns: Interceptors to use when handling 'votes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotesInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryVotesRequest, Kava_Committee_V1beta1_QueryVotesResponse>]

  /// - Returns: Interceptors to use when handling 'vote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryVoteRequest, Kava_Committee_V1beta1_QueryVoteResponse>]

  /// - Returns: Interceptors to use when handling 'tally'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTallyInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryTallyRequest, Kava_Committee_V1beta1_QueryTallyResponse>]

  /// - Returns: Interceptors to use when handling 'rawParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRawParamsInterceptors() -> [ServerInterceptor<Kava_Committee_V1beta1_QueryRawParamsRequest, Kava_Committee_V1beta1_QueryRawParamsResponse>]
}
