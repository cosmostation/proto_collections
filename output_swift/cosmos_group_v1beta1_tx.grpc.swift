//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg is the cosmos.group.v1beta1 Msg service.
///
/// Usage: instantiate `Cosmos_Group_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createGroup(
    _ request: Cosmos_Group_V1beta1_MsgCreateGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateGroupRequest, Cosmos_Group_V1beta1_MsgCreateGroupResponse>

  func updateGroupMembers(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse>

  func updateGroupAdmin(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse>

  func updateGroupMetadata(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse>

  func createGroupAccount(
    _ request: Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest, Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse>

  func updateGroupAccountAdmin(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse>

  func updateGroupAccountDecisionPolicy(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse>

  func updateGroupAccountMetadata(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse>

  func createProposal(
    _ request: Cosmos_Group_V1beta1_MsgCreateProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateProposalRequest, Cosmos_Group_V1beta1_MsgCreateProposalResponse>

  func vote(
    _ request: Cosmos_Group_V1beta1_MsgVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgVoteRequest, Cosmos_Group_V1beta1_MsgVoteResponse>

  func exec(
    _ request: Cosmos_Group_V1beta1_MsgExecRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgExecRequest, Cosmos_Group_V1beta1_MsgExecResponse>
}

extension Cosmos_Group_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1beta1.Msg"
  }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Cosmos_Group_V1beta1_MsgCreateGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateGroupRequest, Cosmos_Group_V1beta1_MsgCreateGroupResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/CreateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMembers(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupMembers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAdmin(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMetadata(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  /// CreateGroupAccount creates a new group account using given DecisionPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupAccount(
    _ request: Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest, Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/CreateGroupAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountAdmin updates a group account admin.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountAdmin(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupAccountAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountDecisionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountDecisionPolicy(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupAccountDecisionPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupAccountMetadata updates a group account metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAccountMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAccountMetadata(
    _ request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/UpdateGroupAccountMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? []
    )
  }

  /// CreateProposal submits a new proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createProposal(
    _ request: Cosmos_Group_V1beta1_MsgCreateProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgCreateProposalRequest, Cosmos_Group_V1beta1_MsgCreateProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/CreateProposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? []
    )
  }

  /// Vote allows a voter to vote on a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Cosmos_Group_V1beta1_MsgVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgVoteRequest, Cosmos_Group_V1beta1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/Vote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Exec executes a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exec(
    _ request: Cosmos_Group_V1beta1_MsgExecRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1beta1_MsgExecRequest, Cosmos_Group_V1beta1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1beta1.Msg/Exec",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Group_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgCreateGroupRequest, Cosmos_Group_V1beta1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMembers'.
  func makeUpdateGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAdmin'.
  func makeUpdateGroupAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMetadata'.
  func makeUpdateGroupMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupAccount'.
  func makeCreateGroupAccountInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest, Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountAdmin'.
  func makeUpdateGroupAccountAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountDecisionPolicy'.
  func makeUpdateGroupAccountDecisionPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAccountMetadata'.
  func makeUpdateGroupAccountMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createProposal'.
  func makeCreateProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgCreateProposalRequest, Cosmos_Group_V1beta1_MsgCreateProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgVoteRequest, Cosmos_Group_V1beta1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Cosmos_Group_V1beta1_MsgExecRequest, Cosmos_Group_V1beta1_MsgExecResponse>]
}

internal final class Cosmos_Group_V1beta1_MsgClient: Cosmos_Group_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg is the cosmos.group.v1beta1 Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Group_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Cosmos_Group_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  func createGroup(request: Cosmos_Group_V1beta1_MsgCreateGroupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgCreateGroupResponse>

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  func updateGroupMembers(request: Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse>

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  func updateGroupAdmin(request: Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse>

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  func updateGroupMetadata(request: Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse>

  /// CreateGroupAccount creates a new group account using given DecisionPolicy.
  func createGroupAccount(request: Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse>

  /// UpdateGroupAccountAdmin updates a group account admin.
  func updateGroupAccountAdmin(request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse>

  /// UpdateGroupAccountDecisionPolicy allows a group account decision policy to be updated.
  func updateGroupAccountDecisionPolicy(request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse>

  /// UpdateGroupAccountMetadata updates a group account metadata.
  func updateGroupAccountMetadata(request: Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse>

  /// CreateProposal submits a new proposal.
  func createProposal(request: Cosmos_Group_V1beta1_MsgCreateProposalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgCreateProposalResponse>

  /// Vote allows a voter to vote on a proposal.
  func vote(request: Cosmos_Group_V1beta1_MsgVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgVoteResponse>

  /// Exec executes a proposal.
  func exec(request: Cosmos_Group_V1beta1_MsgExecRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Group_V1beta1_MsgExecResponse>
}

extension Cosmos_Group_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "cosmos.group.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGroup":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgCreateGroupRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgCreateGroupResponse>(),
        interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? [],
        userFunction: self.createGroup(request:context:)
      )

    case "UpdateGroupMembers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? [],
        userFunction: self.updateGroupMembers(request:context:)
      )

    case "UpdateGroupAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? [],
        userFunction: self.updateGroupAdmin(request:context:)
      )

    case "UpdateGroupMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? [],
        userFunction: self.updateGroupMetadata(request:context:)
      )

    case "CreateGroupAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse>(),
        interceptors: self.interceptors?.makeCreateGroupAccountInterceptors() ?? [],
        userFunction: self.createGroupAccount(request:context:)
      )

    case "UpdateGroupAccountAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountAdminInterceptors() ?? [],
        userFunction: self.updateGroupAccountAdmin(request:context:)
      )

    case "UpdateGroupAccountDecisionPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountDecisionPolicyInterceptors() ?? [],
        userFunction: self.updateGroupAccountDecisionPolicy(request:context:)
      )

    case "UpdateGroupAccountMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse>(),
        interceptors: self.interceptors?.makeUpdateGroupAccountMetadataInterceptors() ?? [],
        userFunction: self.updateGroupAccountMetadata(request:context:)
      )

    case "CreateProposal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgCreateProposalRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgCreateProposalResponse>(),
        interceptors: self.interceptors?.makeCreateProposalInterceptors() ?? [],
        userFunction: self.createProposal(request:context:)
      )

    case "Vote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgVoteRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgVoteResponse>(),
        interceptors: self.interceptors?.makeVoteInterceptors() ?? [],
        userFunction: self.vote(request:context:)
      )

    case "Exec":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Group_V1beta1_MsgExecRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Group_V1beta1_MsgExecResponse>(),
        interceptors: self.interceptors?.makeExecInterceptors() ?? [],
        userFunction: self.exec(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Group_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createGroup'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgCreateGroupRequest, Cosmos_Group_V1beta1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMembers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMembersInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupMembersRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupMetadataInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'createGroupAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGroupAccountInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgCreateGroupAccountRequest, Cosmos_Group_V1beta1_MsgCreateGroupAccountResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountAdminInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountDecisionPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountDecisionPolicyInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'updateGroupAccountMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateGroupAccountMetadataInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataRequest, Cosmos_Group_V1beta1_MsgUpdateGroupAccountMetadataResponse>]

  /// - Returns: Interceptors to use when handling 'createProposal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateProposalInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgCreateProposalRequest, Cosmos_Group_V1beta1_MsgCreateProposalResponse>]

  /// - Returns: Interceptors to use when handling 'vote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgVoteRequest, Cosmos_Group_V1beta1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when handling 'exec'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExecInterceptors() -> [ServerInterceptor<Cosmos_Group_V1beta1_MsgExecRequest, Cosmos_Group_V1beta1_MsgExecResponse>]
}
