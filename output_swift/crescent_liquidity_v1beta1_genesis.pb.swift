// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/liquidity/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the liquidity module's genesis state.
struct Crescent_Liquidity_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Crescent_Liquidity_V1beta1_Params {
    get {return _storage._params ?? Crescent_Liquidity_V1beta1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var lastPairID: UInt64 {
    get {return _storage._lastPairID}
    set {_uniqueStorage()._lastPairID = newValue}
  }

  var lastPoolID: UInt64 {
    get {return _storage._lastPoolID}
    set {_uniqueStorage()._lastPoolID = newValue}
  }

  var pairs: [Crescent_Liquidity_V1beta1_Pair] {
    get {return _storage._pairs}
    set {_uniqueStorage()._pairs = newValue}
  }

  var pools: [Crescent_Liquidity_V1beta1_Pool] {
    get {return _storage._pools}
    set {_uniqueStorage()._pools = newValue}
  }

  var depositRequests: [Crescent_Liquidity_V1beta1_DepositRequest] {
    get {return _storage._depositRequests}
    set {_uniqueStorage()._depositRequests = newValue}
  }

  var withdrawRequests: [Crescent_Liquidity_V1beta1_WithdrawRequest] {
    get {return _storage._withdrawRequests}
    set {_uniqueStorage()._withdrawRequests = newValue}
  }

  var orders: [Crescent_Liquidity_V1beta1_Order] {
    get {return _storage._orders}
    set {_uniqueStorage()._orders = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.liquidity.v1beta1"

extension Crescent_Liquidity_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "last_pair_id"),
    3: .standard(proto: "last_pool_id"),
    4: .same(proto: "pairs"),
    5: .same(proto: "pools"),
    6: .standard(proto: "deposit_requests"),
    7: .standard(proto: "withdraw_requests"),
    8: .same(proto: "orders"),
  ]

  fileprivate class _StorageClass {
    var _params: Crescent_Liquidity_V1beta1_Params? = nil
    var _lastPairID: UInt64 = 0
    var _lastPoolID: UInt64 = 0
    var _pairs: [Crescent_Liquidity_V1beta1_Pair] = []
    var _pools: [Crescent_Liquidity_V1beta1_Pool] = []
    var _depositRequests: [Crescent_Liquidity_V1beta1_DepositRequest] = []
    var _withdrawRequests: [Crescent_Liquidity_V1beta1_WithdrawRequest] = []
    var _orders: [Crescent_Liquidity_V1beta1_Order] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _lastPairID = source._lastPairID
      _lastPoolID = source._lastPoolID
      _pairs = source._pairs
      _pools = source._pools
      _depositRequests = source._depositRequests
      _withdrawRequests = source._withdrawRequests
      _orders = source._orders
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._lastPairID) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._lastPoolID) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._pairs) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._pools) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._depositRequests) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._withdrawRequests) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._orders) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._lastPairID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._lastPairID, fieldNumber: 2)
      }
      if _storage._lastPoolID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._lastPoolID, fieldNumber: 3)
      }
      if !_storage._pairs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pairs, fieldNumber: 4)
      }
      if !_storage._pools.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pools, fieldNumber: 5)
      }
      if !_storage._depositRequests.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._depositRequests, fieldNumber: 6)
      }
      if !_storage._withdrawRequests.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._withdrawRequests, fieldNumber: 7)
      }
      if !_storage._orders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._orders, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Liquidity_V1beta1_GenesisState, rhs: Crescent_Liquidity_V1beta1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._lastPairID != rhs_storage._lastPairID {return false}
        if _storage._lastPoolID != rhs_storage._lastPoolID {return false}
        if _storage._pairs != rhs_storage._pairs {return false}
        if _storage._pools != rhs_storage._pools {return false}
        if _storage._depositRequests != rhs_storage._depositRequests {return false}
        if _storage._withdrawRequests != rhs_storage._withdrawRequests {return false}
        if _storage._orders != rhs_storage._orders {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
