// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sifnode/oracle/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// StatusText is an enum used to represent the status of the prophecy
enum Sifnode_Oracle_V1_StatusText: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Default value
  case unspecified // = 0

  /// Pending status
  case pending // = 1

  /// Success status
  case success // = 2

  /// Failed status
  case failed // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .success
    case 3: self = .failed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .success: return 2
    case .failed: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sifnode_Oracle_V1_StatusText: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Sifnode_Oracle_V1_StatusText] = [
    .unspecified,
    .pending,
    .success,
    .failed,
  ]
}

#endif  // swift(>=4.2)

struct Sifnode_Oracle_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var addressWhitelist: [String] = []

  var adminAddress: String = String()

  var prophecies: [Sifnode_Oracle_V1_DBProphecy] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Claim contains an arbitrary claim with arbitrary content made by a given
/// validator
struct Sifnode_Oracle_V1_Claim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var validatorAddress: String = String()

  var content: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DBProphecy is what the prophecy becomes when being saved to the database.
///  Tendermint/Amino does not support maps so we must serialize those variables
///  into bytes.
struct Sifnode_Oracle_V1_DBProphecy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var status: Sifnode_Oracle_V1_Status {
    get {return _status ?? Sifnode_Oracle_V1_Status()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var claimValidators: Data = Data()

  var validatorClaims: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _status: Sifnode_Oracle_V1_Status? = nil
}

/// Status is a struct that contains the status of a given prophecy
struct Sifnode_Oracle_V1_Status {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: Sifnode_Oracle_V1_StatusText = .unspecified

  var finalClaim: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sifnode.oracle.v1"

extension Sifnode_Oracle_V1_StatusText: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_TEXT_UNSPECIFIED"),
    1: .same(proto: "STATUS_TEXT_PENDING"),
    2: .same(proto: "STATUS_TEXT_SUCCESS"),
    3: .same(proto: "STATUS_TEXT_FAILED"),
  ]
}

extension Sifnode_Oracle_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "address_whitelist"),
    2: .standard(proto: "admin_address"),
    3: .same(proto: "prophecies"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.addressWhitelist) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.adminAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.prophecies) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.addressWhitelist.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addressWhitelist, fieldNumber: 1)
    }
    if !self.adminAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.adminAddress, fieldNumber: 2)
    }
    if !self.prophecies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.prophecies, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Oracle_V1_GenesisState, rhs: Sifnode_Oracle_V1_GenesisState) -> Bool {
    if lhs.addressWhitelist != rhs.addressWhitelist {return false}
    if lhs.adminAddress != rhs.adminAddress {return false}
    if lhs.prophecies != rhs.prophecies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Oracle_V1_Claim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Claim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "content"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Oracle_V1_Claim, rhs: Sifnode_Oracle_V1_Claim) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Oracle_V1_DBProphecy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DBProphecy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
    3: .standard(proto: "claim_validators"),
    4: .standard(proto: "validator_claims"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._status) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.claimValidators) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.validatorClaims) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.claimValidators.isEmpty {
      try visitor.visitSingularBytesField(value: self.claimValidators, fieldNumber: 3)
    }
    if !self.validatorClaims.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorClaims, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Oracle_V1_DBProphecy, rhs: Sifnode_Oracle_V1_DBProphecy) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._status != rhs._status {return false}
    if lhs.claimValidators != rhs.claimValidators {return false}
    if lhs.validatorClaims != rhs.validatorClaims {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Oracle_V1_Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "final_claim"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.text) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.finalClaim) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.text != .unspecified {
      try visitor.visitSingularEnumField(value: self.text, fieldNumber: 1)
    }
    if !self.finalClaim.isEmpty {
      try visitor.visitSingularStringField(value: self.finalClaim, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Oracle_V1_Status, rhs: Sifnode_Oracle_V1_Status) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.finalClaim != rhs.finalClaim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
