// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/tss/v1beta1/params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params is the parameter set for this module
struct Axelar_Tss_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// KeyRequirements defines the requirement for each key role
  var keyRequirements: [Axelar_Tss_Exported_V1beta1_KeyRequirement] = []

  /// SuspendDurationInBlocks defines the number of blocks a
  /// validator is disallowed to participate in any TSS ceremony after
  /// committing a malicious behaviour during signing
  var suspendDurationInBlocks: Int64 = 0

  /// HeartBeatPeriodInBlocks defines the time period in blocks for tss to
  /// emit the event asking validators to send their heartbeats
  var heartbeatPeriodInBlocks: Int64 = 0

  var maxMissedBlocksPerWindow: Axelar_Utils_V1beta1_Threshold {
    get {return _maxMissedBlocksPerWindow ?? Axelar_Utils_V1beta1_Threshold()}
    set {_maxMissedBlocksPerWindow = newValue}
  }
  /// Returns true if `maxMissedBlocksPerWindow` has been explicitly set.
  var hasMaxMissedBlocksPerWindow: Bool {return self._maxMissedBlocksPerWindow != nil}
  /// Clears the value of `maxMissedBlocksPerWindow`. Subsequent reads from it will return its default value.
  mutating func clearMaxMissedBlocksPerWindow() {self._maxMissedBlocksPerWindow = nil}

  var unbondingLockingKeyRotationCount: Int64 = 0

  var externalMultisigThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _externalMultisigThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_externalMultisigThreshold = newValue}
  }
  /// Returns true if `externalMultisigThreshold` has been explicitly set.
  var hasExternalMultisigThreshold: Bool {return self._externalMultisigThreshold != nil}
  /// Clears the value of `externalMultisigThreshold`. Subsequent reads from it will return its default value.
  mutating func clearExternalMultisigThreshold() {self._externalMultisigThreshold = nil}

  var maxSignQueueSize: Int64 = 0

  var maxSimultaneousSignShares: Int64 = 0

  var tssSignedBlocksWindow: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxMissedBlocksPerWindow: Axelar_Utils_V1beta1_Threshold? = nil
  fileprivate var _externalMultisigThreshold: Axelar_Utils_V1beta1_Threshold? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.tss.v1beta1"

extension Axelar_Tss_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_requirements"),
    2: .standard(proto: "suspend_duration_in_blocks"),
    3: .standard(proto: "heartbeat_period_in_blocks"),
    4: .standard(proto: "max_missed_blocks_per_window"),
    5: .standard(proto: "unbonding_locking_key_rotation_count"),
    6: .standard(proto: "external_multisig_threshold"),
    7: .standard(proto: "max_sign_queue_size"),
    8: .standard(proto: "max_simultaneous_sign_shares"),
    9: .standard(proto: "tss_signed_blocks_window"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.keyRequirements) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.suspendDurationInBlocks) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.heartbeatPeriodInBlocks) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._maxMissedBlocksPerWindow) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.unbondingLockingKeyRotationCount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._externalMultisigThreshold) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.maxSignQueueSize) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.maxSimultaneousSignShares) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.tssSignedBlocksWindow) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyRequirements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyRequirements, fieldNumber: 1)
    }
    if self.suspendDurationInBlocks != 0 {
      try visitor.visitSingularInt64Field(value: self.suspendDurationInBlocks, fieldNumber: 2)
    }
    if self.heartbeatPeriodInBlocks != 0 {
      try visitor.visitSingularInt64Field(value: self.heartbeatPeriodInBlocks, fieldNumber: 3)
    }
    if let v = self._maxMissedBlocksPerWindow {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.unbondingLockingKeyRotationCount != 0 {
      try visitor.visitSingularInt64Field(value: self.unbondingLockingKeyRotationCount, fieldNumber: 5)
    }
    if let v = self._externalMultisigThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.maxSignQueueSize != 0 {
      try visitor.visitSingularInt64Field(value: self.maxSignQueueSize, fieldNumber: 7)
    }
    if self.maxSimultaneousSignShares != 0 {
      try visitor.visitSingularInt64Field(value: self.maxSimultaneousSignShares, fieldNumber: 8)
    }
    if self.tssSignedBlocksWindow != 0 {
      try visitor.visitSingularInt64Field(value: self.tssSignedBlocksWindow, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_V1beta1_Params, rhs: Axelar_Tss_V1beta1_Params) -> Bool {
    if lhs.keyRequirements != rhs.keyRequirements {return false}
    if lhs.suspendDurationInBlocks != rhs.suspendDurationInBlocks {return false}
    if lhs.heartbeatPeriodInBlocks != rhs.heartbeatPeriodInBlocks {return false}
    if lhs._maxMissedBlocksPerWindow != rhs._maxMissedBlocksPerWindow {return false}
    if lhs.unbondingLockingKeyRotationCount != rhs.unbondingLockingKeyRotationCount {return false}
    if lhs._externalMultisigThreshold != rhs._externalMultisigThreshold {return false}
    if lhs.maxSignQueueSize != rhs.maxSignQueueSize {return false}
    if lhs.maxSimultaneousSignShares != rhs.maxSimultaneousSignShares {return false}
    if lhs.tssSignedBlocksWindow != rhs.tssSignedBlocksWindow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
