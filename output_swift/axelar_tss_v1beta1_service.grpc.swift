//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/tss/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the tss Msg service.
///
/// Usage: instantiate `Axelar_Tss_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Tss_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Tss_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func registerExternalKeys(
    _ request: Axelar_Tss_V1beta1_RegisterExternalKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_RegisterExternalKeysRequest, Axelar_Tss_V1beta1_RegisterExternalKeysResponse>

  func heartBeat(
    _ request: Axelar_Tss_V1beta1_HeartBeatRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_HeartBeatRequest, Axelar_Tss_V1beta1_HeartBeatResponse>

  func startKeygen(
    _ request: Axelar_Tss_V1beta1_StartKeygenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_StartKeygenRequest, Axelar_Tss_V1beta1_StartKeygenResponse>

  func processKeygenTraffic(
    _ request: Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest, Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse>

  func rotateKey(
    _ request: Axelar_Tss_V1beta1_RotateKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_RotateKeyRequest, Axelar_Tss_V1beta1_RotateKeyResponse>

  func votePubKey(
    _ request: Axelar_Tss_V1beta1_VotePubKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_VotePubKeyRequest, Axelar_Tss_V1beta1_VotePubKeyResponse>

  func processSignTraffic(
    _ request: Axelar_Tss_V1beta1_ProcessSignTrafficRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_ProcessSignTrafficRequest, Axelar_Tss_V1beta1_ProcessSignTrafficResponse>

  func voteSig(
    _ request: Axelar_Tss_V1beta1_VoteSigRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_VoteSigRequest, Axelar_Tss_V1beta1_VoteSigResponse>

  func submitMultisigPubKeys(
    _ request: Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest, Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse>

  func submitMultisigSignatures(
    _ request: Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest, Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse>
}

extension Axelar_Tss_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.tss.v1beta1.MsgService"
  }

  /// Unary call to RegisterExternalKeys
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterExternalKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerExternalKeys(
    _ request: Axelar_Tss_V1beta1_RegisterExternalKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_RegisterExternalKeysRequest, Axelar_Tss_V1beta1_RegisterExternalKeysResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/RegisterExternalKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterExternalKeysInterceptors() ?? []
    )
  }

  /// Unary call to HeartBeat
  ///
  /// - Parameters:
  ///   - request: Request to send to HeartBeat.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func heartBeat(
    _ request: Axelar_Tss_V1beta1_HeartBeatRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_HeartBeatRequest, Axelar_Tss_V1beta1_HeartBeatResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/HeartBeat",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHeartBeatInterceptors() ?? []
    )
  }

  /// Unary call to StartKeygen
  ///
  /// - Parameters:
  ///   - request: Request to send to StartKeygen.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func startKeygen(
    _ request: Axelar_Tss_V1beta1_StartKeygenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_StartKeygenRequest, Axelar_Tss_V1beta1_StartKeygenResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/StartKeygen",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? []
    )
  }

  /// Unary call to ProcessKeygenTraffic
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessKeygenTraffic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func processKeygenTraffic(
    _ request: Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest, Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/ProcessKeygenTraffic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessKeygenTrafficInterceptors() ?? []
    )
  }

  /// Unary call to RotateKey
  ///
  /// - Parameters:
  ///   - request: Request to send to RotateKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rotateKey(
    _ request: Axelar_Tss_V1beta1_RotateKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_RotateKeyRequest, Axelar_Tss_V1beta1_RotateKeyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/RotateKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? []
    )
  }

  /// Unary call to VotePubKey
  ///
  /// - Parameters:
  ///   - request: Request to send to VotePubKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votePubKey(
    _ request: Axelar_Tss_V1beta1_VotePubKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_VotePubKeyRequest, Axelar_Tss_V1beta1_VotePubKeyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/VotePubKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotePubKeyInterceptors() ?? []
    )
  }

  /// Unary call to ProcessSignTraffic
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessSignTraffic.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func processSignTraffic(
    _ request: Axelar_Tss_V1beta1_ProcessSignTrafficRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_ProcessSignTrafficRequest, Axelar_Tss_V1beta1_ProcessSignTrafficResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/ProcessSignTraffic",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessSignTrafficInterceptors() ?? []
    )
  }

  /// Unary call to VoteSig
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteSig.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteSig(
    _ request: Axelar_Tss_V1beta1_VoteSigRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_VoteSigRequest, Axelar_Tss_V1beta1_VoteSigResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/VoteSig",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteSigInterceptors() ?? []
    )
  }

  /// Unary call to SubmitMultisigPubKeys
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitMultisigPubKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitMultisigPubKeys(
    _ request: Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest, Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/SubmitMultisigPubKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitMultisigPubKeysInterceptors() ?? []
    )
  }

  /// Unary call to SubmitMultisigSignatures
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitMultisigSignatures.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitMultisigSignatures(
    _ request: Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest, Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse> {
    return self.makeUnaryCall(
      path: "/axelar.tss.v1beta1.MsgService/SubmitMultisigSignatures",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitMultisigSignaturesInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Tss_V1beta1_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerExternalKeys'.
  func makeRegisterExternalKeysInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_RegisterExternalKeysRequest, Axelar_Tss_V1beta1_RegisterExternalKeysResponse>]

  /// - Returns: Interceptors to use when invoking 'heartBeat'.
  func makeHeartBeatInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_HeartBeatRequest, Axelar_Tss_V1beta1_HeartBeatResponse>]

  /// - Returns: Interceptors to use when invoking 'startKeygen'.
  func makeStartKeygenInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_StartKeygenRequest, Axelar_Tss_V1beta1_StartKeygenResponse>]

  /// - Returns: Interceptors to use when invoking 'processKeygenTraffic'.
  func makeProcessKeygenTrafficInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest, Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse>]

  /// - Returns: Interceptors to use when invoking 'rotateKey'.
  func makeRotateKeyInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_RotateKeyRequest, Axelar_Tss_V1beta1_RotateKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'votePubKey'.
  func makeVotePubKeyInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_VotePubKeyRequest, Axelar_Tss_V1beta1_VotePubKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'processSignTraffic'.
  func makeProcessSignTrafficInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_ProcessSignTrafficRequest, Axelar_Tss_V1beta1_ProcessSignTrafficResponse>]

  /// - Returns: Interceptors to use when invoking 'voteSig'.
  func makeVoteSigInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_VoteSigRequest, Axelar_Tss_V1beta1_VoteSigResponse>]

  /// - Returns: Interceptors to use when invoking 'submitMultisigPubKeys'.
  func makeSubmitMultisigPubKeysInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest, Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse>]

  /// - Returns: Interceptors to use when invoking 'submitMultisigSignatures'.
  func makeSubmitMultisigSignaturesInterceptors() -> [ClientInterceptor<Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest, Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse>]
}

internal final class Axelar_Tss_V1beta1_MsgServiceClient: Axelar_Tss_V1beta1_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Tss_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.tss.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Tss_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Tss_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Tss_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Tss_V1beta1_QueryClientInterceptorFactoryProtocol? { get }
}

extension Axelar_Tss_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "axelar.tss.v1beta1.Query"
  }
}

internal protocol Axelar_Tss_V1beta1_QueryClientInterceptorFactoryProtocol {
}

internal final class Axelar_Tss_V1beta1_QueryClient: Axelar_Tss_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Tss_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.tss.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Tss_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the tss Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Tss_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Tss_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func registerExternalKeys(request: Axelar_Tss_V1beta1_RegisterExternalKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_RegisterExternalKeysResponse>

  func heartBeat(request: Axelar_Tss_V1beta1_HeartBeatRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_HeartBeatResponse>

  func startKeygen(request: Axelar_Tss_V1beta1_StartKeygenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_StartKeygenResponse>

  func processKeygenTraffic(request: Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse>

  func rotateKey(request: Axelar_Tss_V1beta1_RotateKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_RotateKeyResponse>

  func votePubKey(request: Axelar_Tss_V1beta1_VotePubKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_VotePubKeyResponse>

  func processSignTraffic(request: Axelar_Tss_V1beta1_ProcessSignTrafficRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_ProcessSignTrafficResponse>

  func voteSig(request: Axelar_Tss_V1beta1_VoteSigRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_VoteSigResponse>

  func submitMultisigPubKeys(request: Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse>

  func submitMultisigSignatures(request: Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse>
}

extension Axelar_Tss_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring { return "axelar.tss.v1beta1.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterExternalKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_RegisterExternalKeysRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_RegisterExternalKeysResponse>(),
        interceptors: self.interceptors?.makeRegisterExternalKeysInterceptors() ?? [],
        userFunction: self.registerExternalKeys(request:context:)
      )

    case "HeartBeat":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_HeartBeatRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_HeartBeatResponse>(),
        interceptors: self.interceptors?.makeHeartBeatInterceptors() ?? [],
        userFunction: self.heartBeat(request:context:)
      )

    case "StartKeygen":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_StartKeygenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_StartKeygenResponse>(),
        interceptors: self.interceptors?.makeStartKeygenInterceptors() ?? [],
        userFunction: self.startKeygen(request:context:)
      )

    case "ProcessKeygenTraffic":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse>(),
        interceptors: self.interceptors?.makeProcessKeygenTrafficInterceptors() ?? [],
        userFunction: self.processKeygenTraffic(request:context:)
      )

    case "RotateKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_RotateKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_RotateKeyResponse>(),
        interceptors: self.interceptors?.makeRotateKeyInterceptors() ?? [],
        userFunction: self.rotateKey(request:context:)
      )

    case "VotePubKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_VotePubKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_VotePubKeyResponse>(),
        interceptors: self.interceptors?.makeVotePubKeyInterceptors() ?? [],
        userFunction: self.votePubKey(request:context:)
      )

    case "ProcessSignTraffic":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_ProcessSignTrafficRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_ProcessSignTrafficResponse>(),
        interceptors: self.interceptors?.makeProcessSignTrafficInterceptors() ?? [],
        userFunction: self.processSignTraffic(request:context:)
      )

    case "VoteSig":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_VoteSigRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_VoteSigResponse>(),
        interceptors: self.interceptors?.makeVoteSigInterceptors() ?? [],
        userFunction: self.voteSig(request:context:)
      )

    case "SubmitMultisigPubKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse>(),
        interceptors: self.interceptors?.makeSubmitMultisigPubKeysInterceptors() ?? [],
        userFunction: self.submitMultisigPubKeys(request:context:)
      )

    case "SubmitMultisigSignatures":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse>(),
        interceptors: self.interceptors?.makeSubmitMultisigSignaturesInterceptors() ?? [],
        userFunction: self.submitMultisigSignatures(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Tss_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerExternalKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterExternalKeysInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_RegisterExternalKeysRequest, Axelar_Tss_V1beta1_RegisterExternalKeysResponse>]

  /// - Returns: Interceptors to use when handling 'heartBeat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHeartBeatInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_HeartBeatRequest, Axelar_Tss_V1beta1_HeartBeatResponse>]

  /// - Returns: Interceptors to use when handling 'startKeygen'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStartKeygenInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_StartKeygenRequest, Axelar_Tss_V1beta1_StartKeygenResponse>]

  /// - Returns: Interceptors to use when handling 'processKeygenTraffic'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessKeygenTrafficInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_ProcessKeygenTrafficRequest, Axelar_Tss_V1beta1_ProcessKeygenTrafficResponse>]

  /// - Returns: Interceptors to use when handling 'rotateKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRotateKeyInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_RotateKeyRequest, Axelar_Tss_V1beta1_RotateKeyResponse>]

  /// - Returns: Interceptors to use when handling 'votePubKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVotePubKeyInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_VotePubKeyRequest, Axelar_Tss_V1beta1_VotePubKeyResponse>]

  /// - Returns: Interceptors to use when handling 'processSignTraffic'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessSignTrafficInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_ProcessSignTrafficRequest, Axelar_Tss_V1beta1_ProcessSignTrafficResponse>]

  /// - Returns: Interceptors to use when handling 'voteSig'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteSigInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_VoteSigRequest, Axelar_Tss_V1beta1_VoteSigResponse>]

  /// - Returns: Interceptors to use when handling 'submitMultisigPubKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitMultisigPubKeysInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_SubmitMultisigPubKeysRequest, Axelar_Tss_V1beta1_SubmitMultisigPubKeysResponse>]

  /// - Returns: Interceptors to use when handling 'submitMultisigSignatures'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitMultisigSignaturesInterceptors() -> [ServerInterceptor<Axelar_Tss_V1beta1_SubmitMultisigSignaturesRequest, Axelar_Tss_V1beta1_SubmitMultisigSignaturesResponse>]
}
/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Tss_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Axelar_Tss_V1beta1_QueryServerInterceptorFactoryProtocol? { get }
}

extension Axelar_Tss_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "axelar.tss.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    default:
      return nil
    }
  }
}

internal protocol Axelar_Tss_V1beta1_QueryServerInterceptorFactoryProtocol {
}
