//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gravity/v1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the state transitions possible within gravity
///
/// Usage: instantiate `Gravity_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Gravity_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? { get }

  func sendToEthereum(
    _ request: Gravity_V1_MsgSendToEthereum,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSendToEthereum, Gravity_V1_MsgSendToEthereumResponse>

  func cancelSendToEthereum(
    _ request: Gravity_V1_MsgCancelSendToEthereum,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEthereum, Gravity_V1_MsgCancelSendToEthereumResponse>

  func requestBatchTx(
    _ request: Gravity_V1_MsgRequestBatchTx,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgRequestBatchTx, Gravity_V1_MsgRequestBatchTxResponse>

  func submitEthereumTxConfirmation(
    _ request: Gravity_V1_MsgSubmitEthereumTxConfirmation,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSubmitEthereumTxConfirmation, Gravity_V1_MsgSubmitEthereumTxConfirmationResponse>

  func submitEthereumEvent(
    _ request: Gravity_V1_MsgSubmitEthereumEvent,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgSubmitEthereumEvent, Gravity_V1_MsgSubmitEthereumEventResponse>

  func setDelegateKeys(
    _ request: Gravity_V1_MsgDelegateKeys,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_MsgDelegateKeys, Gravity_V1_MsgDelegateKeysResponse>
}

extension Gravity_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "gravity.v1.Msg"
  }

  /// option (google.api.http).post = "/gravity/v1/send_to_ethereum";
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToEthereum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sendToEthereum(
    _ request: Gravity_V1_MsgSendToEthereum,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSendToEthereum, Gravity_V1_MsgSendToEthereumResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SendToEthereum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendToEthereumInterceptors() ?? []
    )
  }

  /// option (google.api.http).post = "/gravity/v1/send_to_ethereum/cancel";
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelSendToEthereum.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelSendToEthereum(
    _ request: Gravity_V1_MsgCancelSendToEthereum,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgCancelSendToEthereum, Gravity_V1_MsgCancelSendToEthereumResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/CancelSendToEthereum",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelSendToEthereumInterceptors() ?? []
    )
  }

  /// option (google.api.http).post = "/gravity/v1/batchtx/request";
  ///
  /// - Parameters:
  ///   - request: Request to send to RequestBatchTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func requestBatchTx(
    _ request: Gravity_V1_MsgRequestBatchTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgRequestBatchTx, Gravity_V1_MsgRequestBatchTxResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/RequestBatchTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRequestBatchTxInterceptors() ?? []
    )
  }

  /// option (google.api.http).post = "/gravity/v1/ethereum_signature";
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitEthereumTxConfirmation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitEthereumTxConfirmation(
    _ request: Gravity_V1_MsgSubmitEthereumTxConfirmation,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSubmitEthereumTxConfirmation, Gravity_V1_MsgSubmitEthereumTxConfirmationResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SubmitEthereumTxConfirmation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitEthereumTxConfirmationInterceptors() ?? []
    )
  }

  /// option (google.api.http).post = "/gravity/v1/ethereum_event";
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitEthereumEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitEthereumEvent(
    _ request: Gravity_V1_MsgSubmitEthereumEvent,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgSubmitEthereumEvent, Gravity_V1_MsgSubmitEthereumEventResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SubmitEthereumEvent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitEthereumEventInterceptors() ?? []
    )
  }

  /// option (google.api.http).post = "/gravity/v1/delegate_keys";
  ///
  /// - Parameters:
  ///   - request: Request to send to SetDelegateKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setDelegateKeys(
    _ request: Gravity_V1_MsgDelegateKeys,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_MsgDelegateKeys, Gravity_V1_MsgDelegateKeysResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Msg/SetDelegateKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetDelegateKeysInterceptors() ?? []
    )
  }
}

internal protocol Gravity_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sendToEthereum'.
  func makeSendToEthereumInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSendToEthereum, Gravity_V1_MsgSendToEthereumResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelSendToEthereum'.
  func makeCancelSendToEthereumInterceptors() -> [ClientInterceptor<Gravity_V1_MsgCancelSendToEthereum, Gravity_V1_MsgCancelSendToEthereumResponse>]

  /// - Returns: Interceptors to use when invoking 'requestBatchTx'.
  func makeRequestBatchTxInterceptors() -> [ClientInterceptor<Gravity_V1_MsgRequestBatchTx, Gravity_V1_MsgRequestBatchTxResponse>]

  /// - Returns: Interceptors to use when invoking 'submitEthereumTxConfirmation'.
  func makeSubmitEthereumTxConfirmationInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSubmitEthereumTxConfirmation, Gravity_V1_MsgSubmitEthereumTxConfirmationResponse>]

  /// - Returns: Interceptors to use when invoking 'submitEthereumEvent'.
  func makeSubmitEthereumEventInterceptors() -> [ClientInterceptor<Gravity_V1_MsgSubmitEthereumEvent, Gravity_V1_MsgSubmitEthereumEventResponse>]

  /// - Returns: Interceptors to use when invoking 'setDelegateKeys'.
  func makeSetDelegateKeysInterceptors() -> [ClientInterceptor<Gravity_V1_MsgDelegateKeys, Gravity_V1_MsgDelegateKeysResponse>]
}

internal final class Gravity_V1_MsgClient: Gravity_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the gravity.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the state transitions possible within gravity
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gravity_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Gravity_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// option (google.api.http).post = "/gravity/v1/send_to_ethereum";
  func sendToEthereum(request: Gravity_V1_MsgSendToEthereum, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSendToEthereumResponse>

  /// option (google.api.http).post = "/gravity/v1/send_to_ethereum/cancel";
  func cancelSendToEthereum(request: Gravity_V1_MsgCancelSendToEthereum, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgCancelSendToEthereumResponse>

  /// option (google.api.http).post = "/gravity/v1/batchtx/request";
  func requestBatchTx(request: Gravity_V1_MsgRequestBatchTx, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgRequestBatchTxResponse>

  /// option (google.api.http).post = "/gravity/v1/ethereum_signature";
  func submitEthereumTxConfirmation(request: Gravity_V1_MsgSubmitEthereumTxConfirmation, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSubmitEthereumTxConfirmationResponse>

  /// option (google.api.http).post = "/gravity/v1/ethereum_event";
  func submitEthereumEvent(request: Gravity_V1_MsgSubmitEthereumEvent, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgSubmitEthereumEventResponse>

  /// option (google.api.http).post = "/gravity/v1/delegate_keys";
  func setDelegateKeys(request: Gravity_V1_MsgDelegateKeys, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_MsgDelegateKeysResponse>
}

extension Gravity_V1_MsgProvider {
  internal var serviceName: Substring { return "gravity.v1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendToEthereum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSendToEthereum>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSendToEthereumResponse>(),
        interceptors: self.interceptors?.makeSendToEthereumInterceptors() ?? [],
        userFunction: self.sendToEthereum(request:context:)
      )

    case "CancelSendToEthereum":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgCancelSendToEthereum>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgCancelSendToEthereumResponse>(),
        interceptors: self.interceptors?.makeCancelSendToEthereumInterceptors() ?? [],
        userFunction: self.cancelSendToEthereum(request:context:)
      )

    case "RequestBatchTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgRequestBatchTx>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgRequestBatchTxResponse>(),
        interceptors: self.interceptors?.makeRequestBatchTxInterceptors() ?? [],
        userFunction: self.requestBatchTx(request:context:)
      )

    case "SubmitEthereumTxConfirmation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSubmitEthereumTxConfirmation>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSubmitEthereumTxConfirmationResponse>(),
        interceptors: self.interceptors?.makeSubmitEthereumTxConfirmationInterceptors() ?? [],
        userFunction: self.submitEthereumTxConfirmation(request:context:)
      )

    case "SubmitEthereumEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgSubmitEthereumEvent>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgSubmitEthereumEventResponse>(),
        interceptors: self.interceptors?.makeSubmitEthereumEventInterceptors() ?? [],
        userFunction: self.submitEthereumEvent(request:context:)
      )

    case "SetDelegateKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_MsgDelegateKeys>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_MsgDelegateKeysResponse>(),
        interceptors: self.interceptors?.makeSetDelegateKeysInterceptors() ?? [],
        userFunction: self.setDelegateKeys(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Gravity_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sendToEthereum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendToEthereumInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSendToEthereum, Gravity_V1_MsgSendToEthereumResponse>]

  /// - Returns: Interceptors to use when handling 'cancelSendToEthereum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelSendToEthereumInterceptors() -> [ServerInterceptor<Gravity_V1_MsgCancelSendToEthereum, Gravity_V1_MsgCancelSendToEthereumResponse>]

  /// - Returns: Interceptors to use when handling 'requestBatchTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRequestBatchTxInterceptors() -> [ServerInterceptor<Gravity_V1_MsgRequestBatchTx, Gravity_V1_MsgRequestBatchTxResponse>]

  /// - Returns: Interceptors to use when handling 'submitEthereumTxConfirmation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitEthereumTxConfirmationInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSubmitEthereumTxConfirmation, Gravity_V1_MsgSubmitEthereumTxConfirmationResponse>]

  /// - Returns: Interceptors to use when handling 'submitEthereumEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitEthereumEventInterceptors() -> [ServerInterceptor<Gravity_V1_MsgSubmitEthereumEvent, Gravity_V1_MsgSubmitEthereumEventResponse>]

  /// - Returns: Interceptors to use when handling 'setDelegateKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetDelegateKeysInterceptors() -> [ServerInterceptor<Gravity_V1_MsgDelegateKeys, Gravity_V1_MsgDelegateKeysResponse>]
}
