// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/oracle/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the oracle module's genesis state.
struct Injective_Oracle_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of related to oracle.
  var params: Injective_Oracle_V1beta1_Params {
    get {return _params ?? Injective_Oracle_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var bandRelayers: [String] = []

  var bandPriceStates: [Injective_Oracle_V1beta1_BandPriceState] = []

  var priceFeedPriceStates: [Injective_Oracle_V1beta1_PriceFeedState] = []

  var coinbasePriceStates: [Injective_Oracle_V1beta1_CoinbasePriceState] = []

  var bandIbcPriceStates: [Injective_Oracle_V1beta1_BandPriceState] = []

  var bandIbcOracleRequests: [Injective_Oracle_V1beta1_BandOracleRequest] = []

  var bandIbcParams: Injective_Oracle_V1beta1_BandIBCParams {
    get {return _bandIbcParams ?? Injective_Oracle_V1beta1_BandIBCParams()}
    set {_bandIbcParams = newValue}
  }
  /// Returns true if `bandIbcParams` has been explicitly set.
  var hasBandIbcParams: Bool {return self._bandIbcParams != nil}
  /// Clears the value of `bandIbcParams`. Subsequent reads from it will return its default value.
  mutating func clearBandIbcParams() {self._bandIbcParams = nil}

  var bandIbcLatestClientID: UInt64 = 0

  var calldataRecords: [Injective_Oracle_V1beta1_CalldataRecord] = []

  var bandIbcLatestRequestID: UInt64 = 0

  var chainlinkPriceStates: [Injective_Oracle_V1beta1_ChainlinkPriceState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Injective_Oracle_V1beta1_Params? = nil
  fileprivate var _bandIbcParams: Injective_Oracle_V1beta1_BandIBCParams? = nil
}

struct Injective_Oracle_V1beta1_CalldataRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientID: UInt64 = 0

  var calldata: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.oracle.v1beta1"

extension Injective_Oracle_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "band_relayers"),
    3: .standard(proto: "band_price_states"),
    4: .standard(proto: "price_feed_price_states"),
    5: .standard(proto: "coinbase_price_states"),
    6: .standard(proto: "band_ibc_price_states"),
    7: .standard(proto: "band_ibc_oracle_requests"),
    8: .standard(proto: "band_ibc_params"),
    9: .standard(proto: "band_ibc_latest_client_id"),
    10: .standard(proto: "calldata_records"),
    11: .standard(proto: "band_ibc_latest_request_id"),
    12: .standard(proto: "chainlink_price_states"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.bandRelayers) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.bandPriceStates) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.priceFeedPriceStates) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.coinbasePriceStates) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.bandIbcPriceStates) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.bandIbcOracleRequests) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._bandIbcParams) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.bandIbcLatestClientID) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.calldataRecords) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.bandIbcLatestRequestID) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.chainlinkPriceStates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.bandRelayers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.bandRelayers, fieldNumber: 2)
    }
    if !self.bandPriceStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bandPriceStates, fieldNumber: 3)
    }
    if !self.priceFeedPriceStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.priceFeedPriceStates, fieldNumber: 4)
    }
    if !self.coinbasePriceStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coinbasePriceStates, fieldNumber: 5)
    }
    if !self.bandIbcPriceStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bandIbcPriceStates, fieldNumber: 6)
    }
    if !self.bandIbcOracleRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bandIbcOracleRequests, fieldNumber: 7)
    }
    if let v = self._bandIbcParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if self.bandIbcLatestClientID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bandIbcLatestClientID, fieldNumber: 9)
    }
    if !self.calldataRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calldataRecords, fieldNumber: 10)
    }
    if self.bandIbcLatestRequestID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bandIbcLatestRequestID, fieldNumber: 11)
    }
    if !self.chainlinkPriceStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chainlinkPriceStates, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Oracle_V1beta1_GenesisState, rhs: Injective_Oracle_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.bandRelayers != rhs.bandRelayers {return false}
    if lhs.bandPriceStates != rhs.bandPriceStates {return false}
    if lhs.priceFeedPriceStates != rhs.priceFeedPriceStates {return false}
    if lhs.coinbasePriceStates != rhs.coinbasePriceStates {return false}
    if lhs.bandIbcPriceStates != rhs.bandIbcPriceStates {return false}
    if lhs.bandIbcOracleRequests != rhs.bandIbcOracleRequests {return false}
    if lhs._bandIbcParams != rhs._bandIbcParams {return false}
    if lhs.bandIbcLatestClientID != rhs.bandIbcLatestClientID {return false}
    if lhs.calldataRecords != rhs.calldataRecords {return false}
    if lhs.bandIbcLatestRequestID != rhs.bandIbcLatestRequestID {return false}
    if lhs.chainlinkPriceStates != rhs.chainlinkPriceStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Oracle_V1beta1_CalldataRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CalldataRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "calldata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.clientID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.calldata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientID != 0 {
      try visitor.visitSingularUInt64Field(value: self.clientID, fieldNumber: 1)
    }
    if !self.calldata.isEmpty {
      try visitor.visitSingularBytesField(value: self.calldata, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Oracle_V1beta1_CalldataRecord, rhs: Injective_Oracle_V1beta1_CalldataRecord) -> Bool {
    if lhs.clientID != rhs.clientID {return false}
    if lhs.calldata != rhs.calldata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
