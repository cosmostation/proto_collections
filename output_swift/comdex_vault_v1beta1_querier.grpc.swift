//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: comdex/vault/v1beta1/querier.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Comdex_Vault_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Comdex_Vault_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Comdex_Vault_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func queryVault(
    _ request: Comdex_Vault_V1beta1_QueryVaultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryVaultRequest, Comdex_Vault_V1beta1_QueryVaultResponse>

  func queryVaults(
    _ request: Comdex_Vault_V1beta1_QueryVaultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryVaultsRequest, Comdex_Vault_V1beta1_QueryVaultsResponse>

  func queryAllVaults(
    _ request: Comdex_Vault_V1beta1_QueryAllVaultsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryAllVaultsRequest, Comdex_Vault_V1beta1_QueryAllVaultsResponse>
}

extension Comdex_Vault_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "comdex.vault.v1beta1.QueryService"
  }

  /// Unary call to QueryVault
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryVault.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryVault(
    _ request: Comdex_Vault_V1beta1_QueryVaultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryVaultRequest, Comdex_Vault_V1beta1_QueryVaultResponse> {
    return self.makeUnaryCall(
      path: "/comdex.vault.v1beta1.QueryService/QueryVault",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryVaultInterceptors() ?? []
    )
  }

  /// Unary call to QueryVaults
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryVaults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryVaults(
    _ request: Comdex_Vault_V1beta1_QueryVaultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryVaultsRequest, Comdex_Vault_V1beta1_QueryVaultsResponse> {
    return self.makeUnaryCall(
      path: "/comdex.vault.v1beta1.QueryService/QueryVaults",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryVaultsInterceptors() ?? []
    )
  }

  /// Unary call to QueryAllVaults
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryAllVaults.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryAllVaults(
    _ request: Comdex_Vault_V1beta1_QueryAllVaultsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Comdex_Vault_V1beta1_QueryAllVaultsRequest, Comdex_Vault_V1beta1_QueryAllVaultsResponse> {
    return self.makeUnaryCall(
      path: "/comdex.vault.v1beta1.QueryService/QueryAllVaults",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryAllVaultsInterceptors() ?? []
    )
  }
}

internal protocol Comdex_Vault_V1beta1_QueryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'queryVault'.
  func makeQueryVaultInterceptors() -> [ClientInterceptor<Comdex_Vault_V1beta1_QueryVaultRequest, Comdex_Vault_V1beta1_QueryVaultResponse>]

  /// - Returns: Interceptors to use when invoking 'queryVaults'.
  func makeQueryVaultsInterceptors() -> [ClientInterceptor<Comdex_Vault_V1beta1_QueryVaultsRequest, Comdex_Vault_V1beta1_QueryVaultsResponse>]

  /// - Returns: Interceptors to use when invoking 'queryAllVaults'.
  func makeQueryAllVaultsInterceptors() -> [ClientInterceptor<Comdex_Vault_V1beta1_QueryAllVaultsRequest, Comdex_Vault_V1beta1_QueryAllVaultsResponse>]
}

internal final class Comdex_Vault_V1beta1_QueryServiceClient: Comdex_Vault_V1beta1_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Comdex_Vault_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the comdex.vault.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Comdex_Vault_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Comdex_Vault_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Comdex_Vault_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  func queryVault(request: Comdex_Vault_V1beta1_QueryVaultRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Vault_V1beta1_QueryVaultResponse>

  func queryVaults(request: Comdex_Vault_V1beta1_QueryVaultsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Vault_V1beta1_QueryVaultsResponse>

  func queryAllVaults(request: Comdex_Vault_V1beta1_QueryAllVaultsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Comdex_Vault_V1beta1_QueryAllVaultsResponse>
}

extension Comdex_Vault_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring { return "comdex.vault.v1beta1.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryVault":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Vault_V1beta1_QueryVaultRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Vault_V1beta1_QueryVaultResponse>(),
        interceptors: self.interceptors?.makeQueryVaultInterceptors() ?? [],
        userFunction: self.queryVault(request:context:)
      )

    case "QueryVaults":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Vault_V1beta1_QueryVaultsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Vault_V1beta1_QueryVaultsResponse>(),
        interceptors: self.interceptors?.makeQueryVaultsInterceptors() ?? [],
        userFunction: self.queryVaults(request:context:)
      )

    case "QueryAllVaults":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Comdex_Vault_V1beta1_QueryAllVaultsRequest>(),
        responseSerializer: ProtobufSerializer<Comdex_Vault_V1beta1_QueryAllVaultsResponse>(),
        interceptors: self.interceptors?.makeQueryAllVaultsInterceptors() ?? [],
        userFunction: self.queryAllVaults(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Comdex_Vault_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryVault'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryVaultInterceptors() -> [ServerInterceptor<Comdex_Vault_V1beta1_QueryVaultRequest, Comdex_Vault_V1beta1_QueryVaultResponse>]

  /// - Returns: Interceptors to use when handling 'queryVaults'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryVaultsInterceptors() -> [ServerInterceptor<Comdex_Vault_V1beta1_QueryVaultsRequest, Comdex_Vault_V1beta1_QueryVaultsResponse>]

  /// - Returns: Interceptors to use when handling 'queryAllVaults'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryAllVaultsInterceptors() -> [ServerInterceptor<Comdex_Vault_V1beta1_QueryAllVaultsRequest, Comdex_Vault_V1beta1_QueryAllVaultsResponse>]
}
