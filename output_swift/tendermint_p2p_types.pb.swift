// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tendermint/p2p/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Tendermint_P2p_ProtocolVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var p2P: UInt64 = 0

  var block: UInt64 = 0

  var app: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_P2p_NodeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolVersion: Tendermint_P2p_ProtocolVersion {
    get {return _protocolVersion ?? Tendermint_P2p_ProtocolVersion()}
    set {_protocolVersion = newValue}
  }
  /// Returns true if `protocolVersion` has been explicitly set.
  var hasProtocolVersion: Bool {return self._protocolVersion != nil}
  /// Clears the value of `protocolVersion`. Subsequent reads from it will return its default value.
  mutating func clearProtocolVersion() {self._protocolVersion = nil}

  var nodeID: String = String()

  var listenAddr: String = String()

  var network: String = String()

  var version: String = String()

  var channels: Data = Data()

  var moniker: String = String()

  var other: Tendermint_P2p_NodeInfoOther {
    get {return _other ?? Tendermint_P2p_NodeInfoOther()}
    set {_other = newValue}
  }
  /// Returns true if `other` has been explicitly set.
  var hasOther: Bool {return self._other != nil}
  /// Clears the value of `other`. Subsequent reads from it will return its default value.
  mutating func clearOther() {self._other = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _protocolVersion: Tendermint_P2p_ProtocolVersion? = nil
  fileprivate var _other: Tendermint_P2p_NodeInfoOther? = nil
}

struct Tendermint_P2p_NodeInfoOther {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txIndex: String = String()

  var rpcAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_P2p_PeerInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var addressInfo: [Tendermint_P2p_PeerAddressInfo] = []

  var lastConnected: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastConnected ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastConnected = newValue}
  }
  /// Returns true if `lastConnected` has been explicitly set.
  var hasLastConnected: Bool {return self._lastConnected != nil}
  /// Clears the value of `lastConnected`. Subsequent reads from it will return its default value.
  mutating func clearLastConnected() {self._lastConnected = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastConnected: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Tendermint_P2p_PeerAddressInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var lastDialSuccess: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastDialSuccess ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastDialSuccess = newValue}
  }
  /// Returns true if `lastDialSuccess` has been explicitly set.
  var hasLastDialSuccess: Bool {return self._lastDialSuccess != nil}
  /// Clears the value of `lastDialSuccess`. Subsequent reads from it will return its default value.
  mutating func clearLastDialSuccess() {self._lastDialSuccess = nil}

  var lastDialFailure: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastDialFailure ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastDialFailure = newValue}
  }
  /// Returns true if `lastDialFailure` has been explicitly set.
  var hasLastDialFailure: Bool {return self._lastDialFailure != nil}
  /// Clears the value of `lastDialFailure`. Subsequent reads from it will return its default value.
  mutating func clearLastDialFailure() {self._lastDialFailure = nil}

  var dialFailures: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastDialSuccess: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastDialFailure: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tendermint.p2p"

extension Tendermint_P2p_ProtocolVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ProtocolVersion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "p2p"),
    2: .same(proto: "block"),
    3: .same(proto: "app"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.p2P) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.block) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.app) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.p2P != 0 {
      try visitor.visitSingularUInt64Field(value: self.p2P, fieldNumber: 1)
    }
    if self.block != 0 {
      try visitor.visitSingularUInt64Field(value: self.block, fieldNumber: 2)
    }
    if self.app != 0 {
      try visitor.visitSingularUInt64Field(value: self.app, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_P2p_ProtocolVersion, rhs: Tendermint_P2p_ProtocolVersion) -> Bool {
    if lhs.p2P != rhs.p2P {return false}
    if lhs.block != rhs.block {return false}
    if lhs.app != rhs.app {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_P2p_NodeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_version"),
    2: .standard(proto: "node_id"),
    3: .standard(proto: "listen_addr"),
    4: .same(proto: "network"),
    5: .same(proto: "version"),
    6: .same(proto: "channels"),
    7: .same(proto: "moniker"),
    8: .same(proto: "other"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._protocolVersion) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nodeID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.listenAddr) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.network) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.channels) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._other) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._protocolVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.nodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeID, fieldNumber: 2)
    }
    if !self.listenAddr.isEmpty {
      try visitor.visitSingularStringField(value: self.listenAddr, fieldNumber: 3)
    }
    if !self.network.isEmpty {
      try visitor.visitSingularStringField(value: self.network, fieldNumber: 4)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 5)
    }
    if !self.channels.isEmpty {
      try visitor.visitSingularBytesField(value: self.channels, fieldNumber: 6)
    }
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 7)
    }
    if let v = self._other {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_P2p_NodeInfo, rhs: Tendermint_P2p_NodeInfo) -> Bool {
    if lhs._protocolVersion != rhs._protocolVersion {return false}
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.listenAddr != rhs.listenAddr {return false}
    if lhs.network != rhs.network {return false}
    if lhs.version != rhs.version {return false}
    if lhs.channels != rhs.channels {return false}
    if lhs.moniker != rhs.moniker {return false}
    if lhs._other != rhs._other {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_P2p_NodeInfoOther: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeInfoOther"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_index"),
    2: .standard(proto: "rpc_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.txIndex) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.rpcAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txIndex.isEmpty {
      try visitor.visitSingularStringField(value: self.txIndex, fieldNumber: 1)
    }
    if !self.rpcAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.rpcAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_P2p_NodeInfoOther, rhs: Tendermint_P2p_NodeInfoOther) -> Bool {
    if lhs.txIndex != rhs.txIndex {return false}
    if lhs.rpcAddress != rhs.rpcAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_P2p_PeerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeerInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "address_info"),
    3: .standard(proto: "last_connected"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.addressInfo) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastConnected) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.addressInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addressInfo, fieldNumber: 2)
    }
    if let v = self._lastConnected {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_P2p_PeerInfo, rhs: Tendermint_P2p_PeerInfo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.addressInfo != rhs.addressInfo {return false}
    if lhs._lastConnected != rhs._lastConnected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_P2p_PeerAddressInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeerAddressInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "last_dial_success"),
    3: .standard(proto: "last_dial_failure"),
    4: .standard(proto: "dial_failures"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastDialSuccess) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastDialFailure) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.dialFailures) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if let v = self._lastDialSuccess {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._lastDialFailure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.dialFailures != 0 {
      try visitor.visitSingularUInt32Field(value: self.dialFailures, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_P2p_PeerAddressInfo, rhs: Tendermint_P2p_PeerAddressInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs._lastDialSuccess != rhs._lastDialSuccess {return false}
    if lhs._lastDialFailure != rhs._lastDialFailure {return false}
    if lhs.dialFailures != rhs.dialFailures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
