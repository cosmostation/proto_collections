//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/metadata/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the Metadata Query service.
///
/// Usage: instantiate `Provenance_Metadata_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Metadata_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Metadata_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Provenance_Metadata_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_QueryParamsRequest, Provenance_Metadata_V1_QueryParamsResponse>

  func scope(
    _ request: Provenance_Metadata_V1_ScopeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeRequest, Provenance_Metadata_V1_ScopeResponse>

  func scopesAll(
    _ request: Provenance_Metadata_V1_ScopesAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ScopesAllRequest, Provenance_Metadata_V1_ScopesAllResponse>

  func sessions(
    _ request: Provenance_Metadata_V1_SessionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_SessionsRequest, Provenance_Metadata_V1_SessionsResponse>

  func sessionsAll(
    _ request: Provenance_Metadata_V1_SessionsAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_SessionsAllRequest, Provenance_Metadata_V1_SessionsAllResponse>

  func records(
    _ request: Provenance_Metadata_V1_RecordsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_RecordsRequest, Provenance_Metadata_V1_RecordsResponse>

  func recordsAll(
    _ request: Provenance_Metadata_V1_RecordsAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_RecordsAllRequest, Provenance_Metadata_V1_RecordsAllResponse>

  func ownership(
    _ request: Provenance_Metadata_V1_OwnershipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OwnershipRequest, Provenance_Metadata_V1_OwnershipResponse>

  func valueOwnership(
    _ request: Provenance_Metadata_V1_ValueOwnershipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ValueOwnershipRequest, Provenance_Metadata_V1_ValueOwnershipResponse>

  func scopeSpecification(
    _ request: Provenance_Metadata_V1_ScopeSpecificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeSpecificationRequest, Provenance_Metadata_V1_ScopeSpecificationResponse>

  func scopeSpecificationsAll(
    _ request: Provenance_Metadata_V1_ScopeSpecificationsAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeSpecificationsAllRequest, Provenance_Metadata_V1_ScopeSpecificationsAllResponse>

  func contractSpecification(
    _ request: Provenance_Metadata_V1_ContractSpecificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ContractSpecificationRequest, Provenance_Metadata_V1_ContractSpecificationResponse>

  func contractSpecificationsAll(
    _ request: Provenance_Metadata_V1_ContractSpecificationsAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_ContractSpecificationsAllRequest, Provenance_Metadata_V1_ContractSpecificationsAllResponse>

  func recordSpecificationsForContractSpecification(
    _ request: Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse>

  func recordSpecification(
    _ request: Provenance_Metadata_V1_RecordSpecificationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationResponse>

  func recordSpecificationsAll(
    _ request: Provenance_Metadata_V1_RecordSpecificationsAllRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationsAllRequest, Provenance_Metadata_V1_RecordSpecificationsAllResponse>

  func oSLocatorParams(
    _ request: Provenance_Metadata_V1_OSLocatorParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorParamsRequest, Provenance_Metadata_V1_OSLocatorParamsResponse>

  func oSLocator(
    _ request: Provenance_Metadata_V1_OSLocatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorRequest, Provenance_Metadata_V1_OSLocatorResponse>

  func oSLocatorsByURI(
    _ request: Provenance_Metadata_V1_OSLocatorsByURIRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorsByURIRequest, Provenance_Metadata_V1_OSLocatorsByURIResponse>

  func oSLocatorsByScope(
    _ request: Provenance_Metadata_V1_OSLocatorsByScopeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorsByScopeRequest, Provenance_Metadata_V1_OSLocatorsByScopeResponse>

  func oSAllLocators(
    _ request: Provenance_Metadata_V1_OSAllLocatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Metadata_V1_OSAllLocatorsRequest, Provenance_Metadata_V1_OSAllLocatorsResponse>
}

extension Provenance_Metadata_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "provenance.metadata.v1.Query"
  }

  /// Params queries the parameters of x/metadata module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Provenance_Metadata_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_QueryParamsRequest, Provenance_Metadata_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Scope searches for a scope.
  ///
  /// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
  /// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
  /// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
  /// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  ///
  /// * If only a scope_id is provided, that scope is returned.
  /// * If only a session_addr is provided, the scope containing that session is returned.
  /// * If only a record_addr is provided, the scope containing that record is returned.
  /// * If more than one of scope_id, session_addr, and record_addr are provided, and they don't refer to the same scope,
  /// a bad request is returned.
  ///
  /// Providing a session addr or record addr does not limit the sessions and records returned (if requested).
  /// Those parameters are only used to find the scope.
  ///
  /// By default, sessions and records are not included.
  /// Set include_sessions and/or include_records to true to include sessions and/or records.
  ///
  /// - Parameters:
  ///   - request: Request to send to Scope.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scope(
    _ request: Provenance_Metadata_V1_ScopeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeRequest, Provenance_Metadata_V1_ScopeResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/Scope",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScopeInterceptors() ?? []
    )
  }

  /// ScopesAll retrieves all scopes.
  ///
  /// - Parameters:
  ///   - request: Request to send to ScopesAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scopesAll(
    _ request: Provenance_Metadata_V1_ScopesAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ScopesAllRequest, Provenance_Metadata_V1_ScopesAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ScopesAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScopesAllInterceptors() ?? []
    )
  }

  /// Sessions searches for sessions.
  ///
  /// The scope_id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
  /// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
  /// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
  /// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  ///
  /// * If only a scope_id is provided, all sessions in that scope are returned.
  /// * If only a session_id is provided, it must be an address, and that single session is returned.
  /// * If the session_id is a uuid, then either a scope_id or record_addr must also be provided, and that single session
  /// is returned.
  /// * If only a record_addr is provided, the session containing that record will be returned.
  /// * If a record_name is provided then either a scope_id, session_id as an address, or record_addr must also be
  /// provided, and the session containing that record will be returned.
  ///
  /// A bad request is returned if:
  /// * The session_id is a uuid and is provided without a scope_id or record_addr.
  /// * A record_name is provided without any way to identify the scope (e.g. a scope_id, a session_id as an address, or
  /// a record_addr).
  /// * Two or more of scope_id, session_id as an address, and record_addr are provided and don't all refer to the same
  /// scope.
  /// * A record_addr (or scope_id and record_name) is provided with a session_id and that session does not contain such
  /// a record.
  /// * A record_addr and record_name are both provided, but reference different records.
  ///
  /// By default, the scope and records are not included.
  /// Set include_scope and/or include_records to true to include the scope and/or records.
  ///
  /// - Parameters:
  ///   - request: Request to send to Sessions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sessions(
    _ request: Provenance_Metadata_V1_SessionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_SessionsRequest, Provenance_Metadata_V1_SessionsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/Sessions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionsInterceptors() ?? []
    )
  }

  /// SessionsAll retrieves all sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to SessionsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sessionsAll(
    _ request: Provenance_Metadata_V1_SessionsAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_SessionsAllRequest, Provenance_Metadata_V1_SessionsAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/SessionsAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSessionsAllInterceptors() ?? []
    )
  }

  /// Records searches for records.
  ///
  /// The record_addr, if provided, must be a bech32 record address, e.g.
  /// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope-id can either be scope uuid, e.g.
  /// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
  /// the session_id can either be a uuid or session address, e.g.
  /// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
  /// interested in.
  ///
  /// * If only a record_addr is provided, that single record will be returned.
  /// * If only a scope_id is provided, all records in that scope will be returned.
  /// * If only a session_id (or scope_id/session_id), all records in that session will be returned.
  /// * If a name is provided with a scope_id and/or session_id, that single record will be returned.
  ///
  /// A bad request is returned if:
  /// * The session_id is a uuid and no scope_id is provided.
  /// * There are two or more of record_addr, session_id, and scope_id, and they don't all refer to the same scope.
  /// * A name is provided, but not a scope_id and/or a session_id.
  /// * A name and record_addr are provided and the name doesn't match the record_addr.
  ///
  /// By default, the scope and sessions are not included.
  /// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
  ///
  /// - Parameters:
  ///   - request: Request to send to Records.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func records(
    _ request: Provenance_Metadata_V1_RecordsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_RecordsRequest, Provenance_Metadata_V1_RecordsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/Records",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsInterceptors() ?? []
    )
  }

  /// RecordsAll retrieves all records.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordsAll(
    _ request: Provenance_Metadata_V1_RecordsAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_RecordsAllRequest, Provenance_Metadata_V1_RecordsAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/RecordsAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordsAllInterceptors() ?? []
    )
  }

  /// Ownership returns the scope identifiers that list the given address as either a data or value owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to Ownership.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ownership(
    _ request: Provenance_Metadata_V1_OwnershipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OwnershipRequest, Provenance_Metadata_V1_OwnershipResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/Ownership",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnershipInterceptors() ?? []
    )
  }

  /// ValueOwnership returns the scope identifiers that list the given address as the value owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValueOwnership.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valueOwnership(
    _ request: Provenance_Metadata_V1_ValueOwnershipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ValueOwnershipRequest, Provenance_Metadata_V1_ValueOwnershipResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ValueOwnership",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValueOwnershipInterceptors() ?? []
    )
  }

  /// ScopeSpecification returns a scope specification for the given specification id.
  ///
  /// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
  /// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
  ///
  /// - Parameters:
  ///   - request: Request to send to ScopeSpecification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scopeSpecification(
    _ request: Provenance_Metadata_V1_ScopeSpecificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeSpecificationRequest, Provenance_Metadata_V1_ScopeSpecificationResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ScopeSpecification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScopeSpecificationInterceptors() ?? []
    )
  }

  /// ScopeSpecificationsAll retrieves all scope specifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to ScopeSpecificationsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func scopeSpecificationsAll(
    _ request: Provenance_Metadata_V1_ScopeSpecificationsAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ScopeSpecificationsAllRequest, Provenance_Metadata_V1_ScopeSpecificationsAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ScopeSpecificationsAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeScopeSpecificationsAllInterceptors() ?? []
    )
  }

  /// ContractSpecification returns a contract specification for the given specification id.
  ///
  /// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
  /// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
  /// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
  /// address, then the contract specification that contains that record specification is looked up.
  ///
  /// By default, the record specifications for this contract specification are not included.
  /// Set include_record_specs to true to include them in the result.
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractSpecification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractSpecification(
    _ request: Provenance_Metadata_V1_ContractSpecificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ContractSpecificationRequest, Provenance_Metadata_V1_ContractSpecificationResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ContractSpecification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractSpecificationInterceptors() ?? []
    )
  }

  /// ContractSpecificationsAll retrieves all contract specifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractSpecificationsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractSpecificationsAll(
    _ request: Provenance_Metadata_V1_ContractSpecificationsAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_ContractSpecificationsAllRequest, Provenance_Metadata_V1_ContractSpecificationsAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/ContractSpecificationsAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractSpecificationsAllInterceptors() ?? []
    )
  }

  /// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
  ///
  /// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
  /// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
  /// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
  /// address, then the contract specification that contains that record specification is used.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordSpecificationsForContractSpecification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordSpecificationsForContractSpecification(
    _ request: Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordSpecificationsForContractSpecificationInterceptors() ?? []
    )
  }

  /// RecordSpecification returns a record specification for the given input.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordSpecification.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordSpecification(
    _ request: Provenance_Metadata_V1_RecordSpecificationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/RecordSpecification",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordSpecificationInterceptors() ?? []
    )
  }

  /// RecordSpecificationsAll retrieves all record specifications.
  ///
  /// - Parameters:
  ///   - request: Request to send to RecordSpecificationsAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func recordSpecificationsAll(
    _ request: Provenance_Metadata_V1_RecordSpecificationsAllRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_RecordSpecificationsAllRequest, Provenance_Metadata_V1_RecordSpecificationsAllResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/RecordSpecificationsAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRecordSpecificationsAllInterceptors() ?? []
    )
  }

  /// OSLocatorParams returns all parameters for the object store locator sub module.
  ///
  /// - Parameters:
  ///   - request: Request to send to OSLocatorParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oSLocatorParams(
    _ request: Provenance_Metadata_V1_OSLocatorParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorParamsRequest, Provenance_Metadata_V1_OSLocatorParamsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/OSLocatorParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOSLocatorParamsInterceptors() ?? []
    )
  }

  /// OSLocator returns an ObjectStoreLocator by its owner's address.
  ///
  /// - Parameters:
  ///   - request: Request to send to OSLocator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oSLocator(
    _ request: Provenance_Metadata_V1_OSLocatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorRequest, Provenance_Metadata_V1_OSLocatorResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/OSLocator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOSLocatorInterceptors() ?? []
    )
  }

  /// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
  ///
  /// - Parameters:
  ///   - request: Request to send to OSLocatorsByURI.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oSLocatorsByURI(
    _ request: Provenance_Metadata_V1_OSLocatorsByURIRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorsByURIRequest, Provenance_Metadata_V1_OSLocatorsByURIResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/OSLocatorsByURI",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOSLocatorsByURIInterceptors() ?? []
    )
  }

  /// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
  ///
  /// - Parameters:
  ///   - request: Request to send to OSLocatorsByScope.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oSLocatorsByScope(
    _ request: Provenance_Metadata_V1_OSLocatorsByScopeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OSLocatorsByScopeRequest, Provenance_Metadata_V1_OSLocatorsByScopeResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/OSLocatorsByScope",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOSLocatorsByScopeInterceptors() ?? []
    )
  }

  /// OSAllLocators returns all ObjectStoreLocator entries.
  ///
  /// - Parameters:
  ///   - request: Request to send to OSAllLocators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oSAllLocators(
    _ request: Provenance_Metadata_V1_OSAllLocatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Metadata_V1_OSAllLocatorsRequest, Provenance_Metadata_V1_OSAllLocatorsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.metadata.v1.Query/OSAllLocators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOSAllLocatorsInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Metadata_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_QueryParamsRequest, Provenance_Metadata_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'scope'.
  func makeScopeInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ScopeRequest, Provenance_Metadata_V1_ScopeResponse>]

  /// - Returns: Interceptors to use when invoking 'scopesAll'.
  func makeScopesAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ScopesAllRequest, Provenance_Metadata_V1_ScopesAllResponse>]

  /// - Returns: Interceptors to use when invoking 'sessions'.
  func makeSessionsInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_SessionsRequest, Provenance_Metadata_V1_SessionsResponse>]

  /// - Returns: Interceptors to use when invoking 'sessionsAll'.
  func makeSessionsAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_SessionsAllRequest, Provenance_Metadata_V1_SessionsAllResponse>]

  /// - Returns: Interceptors to use when invoking 'records'.
  func makeRecordsInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_RecordsRequest, Provenance_Metadata_V1_RecordsResponse>]

  /// - Returns: Interceptors to use when invoking 'recordsAll'.
  func makeRecordsAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_RecordsAllRequest, Provenance_Metadata_V1_RecordsAllResponse>]

  /// - Returns: Interceptors to use when invoking 'ownership'.
  func makeOwnershipInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OwnershipRequest, Provenance_Metadata_V1_OwnershipResponse>]

  /// - Returns: Interceptors to use when invoking 'valueOwnership'.
  func makeValueOwnershipInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ValueOwnershipRequest, Provenance_Metadata_V1_ValueOwnershipResponse>]

  /// - Returns: Interceptors to use when invoking 'scopeSpecification'.
  func makeScopeSpecificationInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ScopeSpecificationRequest, Provenance_Metadata_V1_ScopeSpecificationResponse>]

  /// - Returns: Interceptors to use when invoking 'scopeSpecificationsAll'.
  func makeScopeSpecificationsAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ScopeSpecificationsAllRequest, Provenance_Metadata_V1_ScopeSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when invoking 'contractSpecification'.
  func makeContractSpecificationInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ContractSpecificationRequest, Provenance_Metadata_V1_ContractSpecificationResponse>]

  /// - Returns: Interceptors to use when invoking 'contractSpecificationsAll'.
  func makeContractSpecificationsAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_ContractSpecificationsAllRequest, Provenance_Metadata_V1_ContractSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when invoking 'recordSpecificationsForContractSpecification'.
  func makeRecordSpecificationsForContractSpecificationInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse>]

  /// - Returns: Interceptors to use when invoking 'recordSpecification'.
  func makeRecordSpecificationInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_RecordSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationResponse>]

  /// - Returns: Interceptors to use when invoking 'recordSpecificationsAll'.
  func makeRecordSpecificationsAllInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_RecordSpecificationsAllRequest, Provenance_Metadata_V1_RecordSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when invoking 'oSLocatorParams'.
  func makeOSLocatorParamsInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OSLocatorParamsRequest, Provenance_Metadata_V1_OSLocatorParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'oSLocator'.
  func makeOSLocatorInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OSLocatorRequest, Provenance_Metadata_V1_OSLocatorResponse>]

  /// - Returns: Interceptors to use when invoking 'oSLocatorsByURI'.
  func makeOSLocatorsByURIInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OSLocatorsByURIRequest, Provenance_Metadata_V1_OSLocatorsByURIResponse>]

  /// - Returns: Interceptors to use when invoking 'oSLocatorsByScope'.
  func makeOSLocatorsByScopeInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OSLocatorsByScopeRequest, Provenance_Metadata_V1_OSLocatorsByScopeResponse>]

  /// - Returns: Interceptors to use when invoking 'oSAllLocators'.
  func makeOSAllLocatorsInterceptors() -> [ClientInterceptor<Provenance_Metadata_V1_OSAllLocatorsRequest, Provenance_Metadata_V1_OSAllLocatorsResponse>]
}

internal final class Provenance_Metadata_V1_QueryClient: Provenance_Metadata_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Metadata_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.metadata.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Metadata_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the Metadata Query service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Provenance_Metadata_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Provenance_Metadata_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/metadata module.
  func params(request: Provenance_Metadata_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_QueryParamsResponse>

  /// Scope searches for a scope.
  ///
  /// The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
  /// e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
  /// e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
  /// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  ///
  /// * If only a scope_id is provided, that scope is returned.
  /// * If only a session_addr is provided, the scope containing that session is returned.
  /// * If only a record_addr is provided, the scope containing that record is returned.
  /// * If more than one of scope_id, session_addr, and record_addr are provided, and they don't refer to the same scope,
  /// a bad request is returned.
  ///
  /// Providing a session addr or record addr does not limit the sessions and records returned (if requested).
  /// Those parameters are only used to find the scope.
  ///
  /// By default, sessions and records are not included.
  /// Set include_sessions and/or include_records to true to include sessions and/or records.
  func scope(request: Provenance_Metadata_V1_ScopeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ScopeResponse>

  /// ScopesAll retrieves all scopes.
  func scopesAll(request: Provenance_Metadata_V1_ScopesAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ScopesAllResponse>

  /// Sessions searches for sessions.
  ///
  /// The scope_id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
  /// scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
  /// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
  /// bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.
  ///
  /// * If only a scope_id is provided, all sessions in that scope are returned.
  /// * If only a session_id is provided, it must be an address, and that single session is returned.
  /// * If the session_id is a uuid, then either a scope_id or record_addr must also be provided, and that single session
  /// is returned.
  /// * If only a record_addr is provided, the session containing that record will be returned.
  /// * If a record_name is provided then either a scope_id, session_id as an address, or record_addr must also be
  /// provided, and the session containing that record will be returned.
  ///
  /// A bad request is returned if:
  /// * The session_id is a uuid and is provided without a scope_id or record_addr.
  /// * A record_name is provided without any way to identify the scope (e.g. a scope_id, a session_id as an address, or
  /// a record_addr).
  /// * Two or more of scope_id, session_id as an address, and record_addr are provided and don't all refer to the same
  /// scope.
  /// * A record_addr (or scope_id and record_name) is provided with a session_id and that session does not contain such
  /// a record.
  /// * A record_addr and record_name are both provided, but reference different records.
  ///
  /// By default, the scope and records are not included.
  /// Set include_scope and/or include_records to true to include the scope and/or records.
  func sessions(request: Provenance_Metadata_V1_SessionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_SessionsResponse>

  /// SessionsAll retrieves all sessions.
  func sessionsAll(request: Provenance_Metadata_V1_SessionsAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_SessionsAllResponse>

  /// Records searches for records.
  ///
  /// The record_addr, if provided, must be a bech32 record address, e.g.
  /// record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope-id can either be scope uuid, e.g.
  /// 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
  /// the session_id can either be a uuid or session address, e.g.
  /// session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
  /// interested in.
  ///
  /// * If only a record_addr is provided, that single record will be returned.
  /// * If only a scope_id is provided, all records in that scope will be returned.
  /// * If only a session_id (or scope_id/session_id), all records in that session will be returned.
  /// * If a name is provided with a scope_id and/or session_id, that single record will be returned.
  ///
  /// A bad request is returned if:
  /// * The session_id is a uuid and no scope_id is provided.
  /// * There are two or more of record_addr, session_id, and scope_id, and they don't all refer to the same scope.
  /// * A name is provided, but not a scope_id and/or a session_id.
  /// * A name and record_addr are provided and the name doesn't match the record_addr.
  ///
  /// By default, the scope and sessions are not included.
  /// Set include_scope and/or include_sessions to true to include the scope and/or sessions.
  func records(request: Provenance_Metadata_V1_RecordsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_RecordsResponse>

  /// RecordsAll retrieves all records.
  func recordsAll(request: Provenance_Metadata_V1_RecordsAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_RecordsAllResponse>

  /// Ownership returns the scope identifiers that list the given address as either a data or value owner.
  func ownership(request: Provenance_Metadata_V1_OwnershipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OwnershipResponse>

  /// ValueOwnership returns the scope identifiers that list the given address as the value owner.
  func valueOwnership(request: Provenance_Metadata_V1_ValueOwnershipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ValueOwnershipResponse>

  /// ScopeSpecification returns a scope specification for the given specification id.
  ///
  /// The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
  /// specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.
  func scopeSpecification(request: Provenance_Metadata_V1_ScopeSpecificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ScopeSpecificationResponse>

  /// ScopeSpecificationsAll retrieves all scope specifications.
  func scopeSpecificationsAll(request: Provenance_Metadata_V1_ScopeSpecificationsAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ScopeSpecificationsAllResponse>

  /// ContractSpecification returns a contract specification for the given specification id.
  ///
  /// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
  /// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
  /// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
  /// address, then the contract specification that contains that record specification is looked up.
  ///
  /// By default, the record specifications for this contract specification are not included.
  /// Set include_record_specs to true to include them in the result.
  func contractSpecification(request: Provenance_Metadata_V1_ContractSpecificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ContractSpecificationResponse>

  /// ContractSpecificationsAll retrieves all contract specifications.
  func contractSpecificationsAll(request: Provenance_Metadata_V1_ContractSpecificationsAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_ContractSpecificationsAllResponse>

  /// RecordSpecificationsForContractSpecification returns the record specifications for the given input.
  ///
  /// The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
  /// specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
  /// address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
  /// address, then the contract specification that contains that record specification is used.
  func recordSpecificationsForContractSpecification(request: Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse>

  /// RecordSpecification returns a record specification for the given input.
  func recordSpecification(request: Provenance_Metadata_V1_RecordSpecificationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_RecordSpecificationResponse>

  /// RecordSpecificationsAll retrieves all record specifications.
  func recordSpecificationsAll(request: Provenance_Metadata_V1_RecordSpecificationsAllRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_RecordSpecificationsAllResponse>

  /// OSLocatorParams returns all parameters for the object store locator sub module.
  func oSLocatorParams(request: Provenance_Metadata_V1_OSLocatorParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OSLocatorParamsResponse>

  /// OSLocator returns an ObjectStoreLocator by its owner's address.
  func oSLocator(request: Provenance_Metadata_V1_OSLocatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OSLocatorResponse>

  /// OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
  func oSLocatorsByURI(request: Provenance_Metadata_V1_OSLocatorsByURIRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OSLocatorsByURIResponse>

  /// OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
  func oSLocatorsByScope(request: Provenance_Metadata_V1_OSLocatorsByScopeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OSLocatorsByScopeResponse>

  /// OSAllLocators returns all ObjectStoreLocator entries.
  func oSAllLocators(request: Provenance_Metadata_V1_OSAllLocatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Metadata_V1_OSAllLocatorsResponse>
}

extension Provenance_Metadata_V1_QueryProvider {
  internal var serviceName: Substring { return "provenance.metadata.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Scope":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ScopeRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ScopeResponse>(),
        interceptors: self.interceptors?.makeScopeInterceptors() ?? [],
        userFunction: self.scope(request:context:)
      )

    case "ScopesAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ScopesAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ScopesAllResponse>(),
        interceptors: self.interceptors?.makeScopesAllInterceptors() ?? [],
        userFunction: self.scopesAll(request:context:)
      )

    case "Sessions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_SessionsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_SessionsResponse>(),
        interceptors: self.interceptors?.makeSessionsInterceptors() ?? [],
        userFunction: self.sessions(request:context:)
      )

    case "SessionsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_SessionsAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_SessionsAllResponse>(),
        interceptors: self.interceptors?.makeSessionsAllInterceptors() ?? [],
        userFunction: self.sessionsAll(request:context:)
      )

    case "Records":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_RecordsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_RecordsResponse>(),
        interceptors: self.interceptors?.makeRecordsInterceptors() ?? [],
        userFunction: self.records(request:context:)
      )

    case "RecordsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_RecordsAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_RecordsAllResponse>(),
        interceptors: self.interceptors?.makeRecordsAllInterceptors() ?? [],
        userFunction: self.recordsAll(request:context:)
      )

    case "Ownership":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OwnershipRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OwnershipResponse>(),
        interceptors: self.interceptors?.makeOwnershipInterceptors() ?? [],
        userFunction: self.ownership(request:context:)
      )

    case "ValueOwnership":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ValueOwnershipRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ValueOwnershipResponse>(),
        interceptors: self.interceptors?.makeValueOwnershipInterceptors() ?? [],
        userFunction: self.valueOwnership(request:context:)
      )

    case "ScopeSpecification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ScopeSpecificationRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ScopeSpecificationResponse>(),
        interceptors: self.interceptors?.makeScopeSpecificationInterceptors() ?? [],
        userFunction: self.scopeSpecification(request:context:)
      )

    case "ScopeSpecificationsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ScopeSpecificationsAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ScopeSpecificationsAllResponse>(),
        interceptors: self.interceptors?.makeScopeSpecificationsAllInterceptors() ?? [],
        userFunction: self.scopeSpecificationsAll(request:context:)
      )

    case "ContractSpecification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ContractSpecificationRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ContractSpecificationResponse>(),
        interceptors: self.interceptors?.makeContractSpecificationInterceptors() ?? [],
        userFunction: self.contractSpecification(request:context:)
      )

    case "ContractSpecificationsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_ContractSpecificationsAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_ContractSpecificationsAllResponse>(),
        interceptors: self.interceptors?.makeContractSpecificationsAllInterceptors() ?? [],
        userFunction: self.contractSpecificationsAll(request:context:)
      )

    case "RecordSpecificationsForContractSpecification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse>(),
        interceptors: self.interceptors?.makeRecordSpecificationsForContractSpecificationInterceptors() ?? [],
        userFunction: self.recordSpecificationsForContractSpecification(request:context:)
      )

    case "RecordSpecification":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_RecordSpecificationRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_RecordSpecificationResponse>(),
        interceptors: self.interceptors?.makeRecordSpecificationInterceptors() ?? [],
        userFunction: self.recordSpecification(request:context:)
      )

    case "RecordSpecificationsAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_RecordSpecificationsAllRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_RecordSpecificationsAllResponse>(),
        interceptors: self.interceptors?.makeRecordSpecificationsAllInterceptors() ?? [],
        userFunction: self.recordSpecificationsAll(request:context:)
      )

    case "OSLocatorParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OSLocatorParamsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OSLocatorParamsResponse>(),
        interceptors: self.interceptors?.makeOSLocatorParamsInterceptors() ?? [],
        userFunction: self.oSLocatorParams(request:context:)
      )

    case "OSLocator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OSLocatorRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OSLocatorResponse>(),
        interceptors: self.interceptors?.makeOSLocatorInterceptors() ?? [],
        userFunction: self.oSLocator(request:context:)
      )

    case "OSLocatorsByURI":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OSLocatorsByURIRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OSLocatorsByURIResponse>(),
        interceptors: self.interceptors?.makeOSLocatorsByURIInterceptors() ?? [],
        userFunction: self.oSLocatorsByURI(request:context:)
      )

    case "OSLocatorsByScope":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OSLocatorsByScopeRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OSLocatorsByScopeResponse>(),
        interceptors: self.interceptors?.makeOSLocatorsByScopeInterceptors() ?? [],
        userFunction: self.oSLocatorsByScope(request:context:)
      )

    case "OSAllLocators":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Metadata_V1_OSAllLocatorsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Metadata_V1_OSAllLocatorsResponse>(),
        interceptors: self.interceptors?.makeOSAllLocatorsInterceptors() ?? [],
        userFunction: self.oSAllLocators(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Provenance_Metadata_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_QueryParamsRequest, Provenance_Metadata_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'scope'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScopeInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ScopeRequest, Provenance_Metadata_V1_ScopeResponse>]

  /// - Returns: Interceptors to use when handling 'scopesAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScopesAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ScopesAllRequest, Provenance_Metadata_V1_ScopesAllResponse>]

  /// - Returns: Interceptors to use when handling 'sessions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSessionsInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_SessionsRequest, Provenance_Metadata_V1_SessionsResponse>]

  /// - Returns: Interceptors to use when handling 'sessionsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSessionsAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_SessionsAllRequest, Provenance_Metadata_V1_SessionsAllResponse>]

  /// - Returns: Interceptors to use when handling 'records'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordsInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_RecordsRequest, Provenance_Metadata_V1_RecordsResponse>]

  /// - Returns: Interceptors to use when handling 'recordsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordsAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_RecordsAllRequest, Provenance_Metadata_V1_RecordsAllResponse>]

  /// - Returns: Interceptors to use when handling 'ownership'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnershipInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OwnershipRequest, Provenance_Metadata_V1_OwnershipResponse>]

  /// - Returns: Interceptors to use when handling 'valueOwnership'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValueOwnershipInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ValueOwnershipRequest, Provenance_Metadata_V1_ValueOwnershipResponse>]

  /// - Returns: Interceptors to use when handling 'scopeSpecification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScopeSpecificationInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ScopeSpecificationRequest, Provenance_Metadata_V1_ScopeSpecificationResponse>]

  /// - Returns: Interceptors to use when handling 'scopeSpecificationsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeScopeSpecificationsAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ScopeSpecificationsAllRequest, Provenance_Metadata_V1_ScopeSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when handling 'contractSpecification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractSpecificationInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ContractSpecificationRequest, Provenance_Metadata_V1_ContractSpecificationResponse>]

  /// - Returns: Interceptors to use when handling 'contractSpecificationsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractSpecificationsAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_ContractSpecificationsAllRequest, Provenance_Metadata_V1_ContractSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when handling 'recordSpecificationsForContractSpecification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordSpecificationsForContractSpecificationInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationsForContractSpecificationResponse>]

  /// - Returns: Interceptors to use when handling 'recordSpecification'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordSpecificationInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_RecordSpecificationRequest, Provenance_Metadata_V1_RecordSpecificationResponse>]

  /// - Returns: Interceptors to use when handling 'recordSpecificationsAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRecordSpecificationsAllInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_RecordSpecificationsAllRequest, Provenance_Metadata_V1_RecordSpecificationsAllResponse>]

  /// - Returns: Interceptors to use when handling 'oSLocatorParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOSLocatorParamsInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OSLocatorParamsRequest, Provenance_Metadata_V1_OSLocatorParamsResponse>]

  /// - Returns: Interceptors to use when handling 'oSLocator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOSLocatorInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OSLocatorRequest, Provenance_Metadata_V1_OSLocatorResponse>]

  /// - Returns: Interceptors to use when handling 'oSLocatorsByURI'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOSLocatorsByURIInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OSLocatorsByURIRequest, Provenance_Metadata_V1_OSLocatorsByURIResponse>]

  /// - Returns: Interceptors to use when handling 'oSLocatorsByScope'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOSLocatorsByScopeInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OSLocatorsByScopeRequest, Provenance_Metadata_V1_OSLocatorsByScopeResponse>]

  /// - Returns: Interceptors to use when handling 'oSAllLocators'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOSAllLocatorsInterceptors() -> [ServerInterceptor<Provenance_Metadata_V1_OSAllLocatorsRequest, Provenance_Metadata_V1_OSAllLocatorsResponse>]
}
