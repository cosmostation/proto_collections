// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/incentive/v1beta1/claims.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BaseClaim is a claim with a single reward coin types
struct Kava_Incentive_V1beta1_BaseClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: Data = Data()

  var reward: Cosmos_Base_V1beta1_Coin {
    get {return _reward ?? Cosmos_Base_V1beta1_Coin()}
    set {_reward = newValue}
  }
  /// Returns true if `reward` has been explicitly set.
  var hasReward: Bool {return self._reward != nil}
  /// Clears the value of `reward`. Subsequent reads from it will return its default value.
  mutating func clearReward() {self._reward = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reward: Cosmos_Base_V1beta1_Coin? = nil
}

/// BaseMultiClaim is a claim with multiple reward coin types
struct Kava_Incentive_V1beta1_BaseMultiClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: Data = Data()

  var reward: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// RewardIndex stores reward accumulation information
struct Kava_Incentive_V1beta1_RewardIndex {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralType: String = String()

  var rewardFactor: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// RewardIndexesProto defines a Protobuf wrapper around a RewardIndexes slice
struct Kava_Incentive_V1beta1_RewardIndexesProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rewardIndexes: [Kava_Incentive_V1beta1_RewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MultiRewardIndex stores reward accumulation information on multiple reward types
struct Kava_Incentive_V1beta1_MultiRewardIndex {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralType: String = String()

  var rewardIndexes: [Kava_Incentive_V1beta1_RewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MultiRewardIndexesProto defines a Protobuf wrapper around a MultiRewardIndexes slice
struct Kava_Incentive_V1beta1_MultiRewardIndexesProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var multiRewardIndexes: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// USDXMintingClaim is for USDX minting rewards
struct Kava_Incentive_V1beta1_USDXMintingClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseClaim: Kava_Incentive_V1beta1_BaseClaim {
    get {return _baseClaim ?? Kava_Incentive_V1beta1_BaseClaim()}
    set {_baseClaim = newValue}
  }
  /// Returns true if `baseClaim` has been explicitly set.
  var hasBaseClaim: Bool {return self._baseClaim != nil}
  /// Clears the value of `baseClaim`. Subsequent reads from it will return its default value.
  mutating func clearBaseClaim() {self._baseClaim = nil}

  var rewardIndexes: [Kava_Incentive_V1beta1_RewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseClaim: Kava_Incentive_V1beta1_BaseClaim? = nil
}

/// HardLiquidityProviderClaim stores the hard liquidity provider rewards that can be claimed by owner
struct Kava_Incentive_V1beta1_HardLiquidityProviderClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim {
    get {return _baseClaim ?? Kava_Incentive_V1beta1_BaseMultiClaim()}
    set {_baseClaim = newValue}
  }
  /// Returns true if `baseClaim` has been explicitly set.
  var hasBaseClaim: Bool {return self._baseClaim != nil}
  /// Clears the value of `baseClaim`. Subsequent reads from it will return its default value.
  mutating func clearBaseClaim() {self._baseClaim = nil}

  var supplyRewardIndexes: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var borrowRewardIndexes: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim? = nil
}

/// DelegatorClaim stores delegation rewards that can be claimed by owner
struct Kava_Incentive_V1beta1_DelegatorClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim {
    get {return _baseClaim ?? Kava_Incentive_V1beta1_BaseMultiClaim()}
    set {_baseClaim = newValue}
  }
  /// Returns true if `baseClaim` has been explicitly set.
  var hasBaseClaim: Bool {return self._baseClaim != nil}
  /// Clears the value of `baseClaim`. Subsequent reads from it will return its default value.
  mutating func clearBaseClaim() {self._baseClaim = nil}

  var rewardIndexes: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim? = nil
}

/// SwapClaim stores the swap rewards that can be claimed by owner
struct Kava_Incentive_V1beta1_SwapClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim {
    get {return _baseClaim ?? Kava_Incentive_V1beta1_BaseMultiClaim()}
    set {_baseClaim = newValue}
  }
  /// Returns true if `baseClaim` has been explicitly set.
  var hasBaseClaim: Bool {return self._baseClaim != nil}
  /// Clears the value of `baseClaim`. Subsequent reads from it will return its default value.
  mutating func clearBaseClaim() {self._baseClaim = nil}

  var rewardIndexes: [Kava_Incentive_V1beta1_MultiRewardIndex] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseClaim: Kava_Incentive_V1beta1_BaseMultiClaim? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.incentive.v1beta1"

extension Kava_Incentive_V1beta1_BaseClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "reward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._reward) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularBytesField(value: self.owner, fieldNumber: 1)
    }
    if let v = self._reward {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_BaseClaim, rhs: Kava_Incentive_V1beta1_BaseClaim) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs._reward != rhs._reward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_BaseMultiClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseMultiClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .same(proto: "reward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.owner) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.reward) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularBytesField(value: self.owner, fieldNumber: 1)
    }
    if !self.reward.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reward, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_BaseMultiClaim, rhs: Kava_Incentive_V1beta1_BaseMultiClaim) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.reward != rhs.reward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_RewardIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardIndex"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_type"),
    2: .standard(proto: "reward_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.rewardFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 1)
    }
    if !self.rewardFactor.isEmpty {
      try visitor.visitSingularBytesField(value: self.rewardFactor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_RewardIndex, rhs: Kava_Incentive_V1beta1_RewardIndex) -> Bool {
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.rewardFactor != rhs.rewardFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_RewardIndexesProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardIndexesProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardIndexes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_RewardIndexesProto, rhs: Kava_Incentive_V1beta1_RewardIndexesProto) -> Bool {
    if lhs.rewardIndexes != rhs.rewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_MultiRewardIndex: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiRewardIndex"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_type"),
    2: .standard(proto: "reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 1)
    }
    if !self.rewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardIndexes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_MultiRewardIndex, rhs: Kava_Incentive_V1beta1_MultiRewardIndex) -> Bool {
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.rewardIndexes != rhs.rewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_MultiRewardIndexesProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MultiRewardIndexesProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "multi_reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.multiRewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.multiRewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.multiRewardIndexes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_MultiRewardIndexesProto, rhs: Kava_Incentive_V1beta1_MultiRewardIndexesProto) -> Bool {
    if lhs.multiRewardIndexes != rhs.multiRewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_USDXMintingClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".USDXMintingClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_claim"),
    2: .standard(proto: "reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseClaim) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseClaim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.rewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardIndexes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_USDXMintingClaim, rhs: Kava_Incentive_V1beta1_USDXMintingClaim) -> Bool {
    if lhs._baseClaim != rhs._baseClaim {return false}
    if lhs.rewardIndexes != rhs.rewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_HardLiquidityProviderClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HardLiquidityProviderClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_claim"),
    2: .standard(proto: "supply_reward_indexes"),
    3: .standard(proto: "borrow_reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseClaim) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.supplyRewardIndexes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.borrowRewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseClaim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.supplyRewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.supplyRewardIndexes, fieldNumber: 2)
    }
    if !self.borrowRewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.borrowRewardIndexes, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_HardLiquidityProviderClaim, rhs: Kava_Incentive_V1beta1_HardLiquidityProviderClaim) -> Bool {
    if lhs._baseClaim != rhs._baseClaim {return false}
    if lhs.supplyRewardIndexes != rhs.supplyRewardIndexes {return false}
    if lhs.borrowRewardIndexes != rhs.borrowRewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_DelegatorClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelegatorClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_claim"),
    2: .standard(proto: "reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseClaim) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseClaim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.rewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardIndexes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_DelegatorClaim, rhs: Kava_Incentive_V1beta1_DelegatorClaim) -> Bool {
    if lhs._baseClaim != rhs._baseClaim {return false}
    if lhs.rewardIndexes != rhs.rewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Incentive_V1beta1_SwapClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SwapClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_claim"),
    2: .standard(proto: "reward_indexes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseClaim) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseClaim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.rewardIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardIndexes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Incentive_V1beta1_SwapClaim, rhs: Kava_Incentive_V1beta1_SwapClaim) -> Bool {
    if lhs._baseClaim != rhs._baseClaim {return false}
    if lhs.rewardIndexes != rhs.rewardIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
