// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/tss/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Tss_Exported_V1beta1_KeyRole: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case masterKey // = 1
  case secondaryKey // = 2
  case externalKey // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .masterKey
    case 2: self = .secondaryKey
    case 3: self = .externalKey
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .masterKey: return 1
    case .secondaryKey: return 2
    case .externalKey: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Tss_Exported_V1beta1_KeyRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Tss_Exported_V1beta1_KeyRole] = [
    .unspecified,
    .masterKey,
    .secondaryKey,
    .externalKey,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case weightedByStake // = 1
  case onePerValidator // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .weightedByStake
    case 2: self = .onePerValidator
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .weightedByStake: return 1
    case .onePerValidator: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy] = [
    .unspecified,
    .weightedByStake,
    .onePerValidator,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Tss_Exported_V1beta1_AckType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case keygen // = 1
  case sign // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .keygen
    case 2: self = .sign
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .keygen: return 1
    case .sign: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Tss_Exported_V1beta1_AckType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Tss_Exported_V1beta1_AckType] = [
    .unspecified,
    .keygen,
    .sign,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Tss_Exported_V1beta1_SigStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case queued // = 1
  case signing // = 2
  case signed // = 3
  case aborted // = 4
  case invalid // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .queued
    case 2: self = .signing
    case 3: self = .signed
    case 4: self = .aborted
    case 5: self = .invalid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .queued: return 1
    case .signing: return 2
    case .signed: return 3
    case .aborted: return 4
    case .invalid: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Tss_Exported_V1beta1_SigStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Tss_Exported_V1beta1_SigStatus] = [
    .unspecified,
    .queued,
    .signing,
    .signed,
    .aborted,
    .invalid,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Tss_Exported_V1beta1_KeyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case none // = 1
  case threshold // = 2
  case multisig // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .none
    case 2: self = .threshold
    case 3: self = .multisig
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .none: return 1
    case .threshold: return 2
    case .multisig: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Tss_Exported_V1beta1_KeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Tss_Exported_V1beta1_KeyType] = [
    .unspecified,
    .none,
    .threshold,
    .multisig,
  ]
}

#endif  // swift(>=4.2)

/// KeyRequirement defines requirements for keys
struct Axelar_Tss_Exported_V1beta1_KeyRequirement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyRole: Axelar_Tss_Exported_V1beta1_KeyRole = .unspecified

  var keyType: Axelar_Tss_Exported_V1beta1_KeyType = .unspecified

  var minKeygenThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _minKeygenThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_minKeygenThreshold = newValue}
  }
  /// Returns true if `minKeygenThreshold` has been explicitly set.
  var hasMinKeygenThreshold: Bool {return self._minKeygenThreshold != nil}
  /// Clears the value of `minKeygenThreshold`. Subsequent reads from it will return its default value.
  mutating func clearMinKeygenThreshold() {self._minKeygenThreshold = nil}

  var safetyThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _safetyThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_safetyThreshold = newValue}
  }
  /// Returns true if `safetyThreshold` has been explicitly set.
  var hasSafetyThreshold: Bool {return self._safetyThreshold != nil}
  /// Clears the value of `safetyThreshold`. Subsequent reads from it will return its default value.
  mutating func clearSafetyThreshold() {self._safetyThreshold = nil}

  var keyShareDistributionPolicy: Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy = .unspecified

  var maxTotalShareCount: Int64 = 0

  var minTotalShareCount: Int64 = 0

  var keygenVotingThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _keygenVotingThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_keygenVotingThreshold = newValue}
  }
  /// Returns true if `keygenVotingThreshold` has been explicitly set.
  var hasKeygenVotingThreshold: Bool {return self._keygenVotingThreshold != nil}
  /// Clears the value of `keygenVotingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearKeygenVotingThreshold() {self._keygenVotingThreshold = nil}

  var signVotingThreshold: Axelar_Utils_V1beta1_Threshold {
    get {return _signVotingThreshold ?? Axelar_Utils_V1beta1_Threshold()}
    set {_signVotingThreshold = newValue}
  }
  /// Returns true if `signVotingThreshold` has been explicitly set.
  var hasSignVotingThreshold: Bool {return self._signVotingThreshold != nil}
  /// Clears the value of `signVotingThreshold`. Subsequent reads from it will return its default value.
  mutating func clearSignVotingThreshold() {self._signVotingThreshold = nil}

  var keygenTimeout: Int64 = 0

  var signTimeout: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minKeygenThreshold: Axelar_Utils_V1beta1_Threshold? = nil
  fileprivate var _safetyThreshold: Axelar_Utils_V1beta1_Threshold? = nil
  fileprivate var _keygenVotingThreshold: Axelar_Utils_V1beta1_Threshold? = nil
  fileprivate var _signVotingThreshold: Axelar_Utils_V1beta1_Threshold? = nil
}

/// SignInfo holds information about a sign request
struct Axelar_Tss_Exported_V1beta1_SignInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyID: String = String()

  var sigID: String = String()

  var msg: Data = Data()

  var snapshotCounter: Int64 = 0

  var requestModule: String = String()

  var metadata: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PubKeyInfo holds a pubkey and a signature
struct Axelar_Tss_Exported_V1beta1_SigKeyPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pubKey: Data = Data()

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Signature holds public key and ECDSA signature
struct Axelar_Tss_Exported_V1beta1_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sigID: String = String()

  var sig: Axelar_Tss_Exported_V1beta1_Signature.OneOf_Sig? = nil

  var singleSig: Axelar_Tss_Exported_V1beta1_Signature.SingleSig {
    get {
      if case .singleSig(let v)? = sig {return v}
      return Axelar_Tss_Exported_V1beta1_Signature.SingleSig()
    }
    set {sig = .singleSig(newValue)}
  }

  var multiSig: Axelar_Tss_Exported_V1beta1_Signature.MultiSig {
    get {
      if case .multiSig(let v)? = sig {return v}
      return Axelar_Tss_Exported_V1beta1_Signature.MultiSig()
    }
    set {sig = .multiSig(newValue)}
  }

  var sigStatus: Axelar_Tss_Exported_V1beta1_SigStatus = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Sig: Equatable {
    case singleSig(Axelar_Tss_Exported_V1beta1_Signature.SingleSig)
    case multiSig(Axelar_Tss_Exported_V1beta1_Signature.MultiSig)

  #if !swift(>=4.1)
    static func ==(lhs: Axelar_Tss_Exported_V1beta1_Signature.OneOf_Sig, rhs: Axelar_Tss_Exported_V1beta1_Signature.OneOf_Sig) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.singleSig, .singleSig): return {
        guard case .singleSig(let l) = lhs, case .singleSig(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.multiSig, .multiSig): return {
        guard case .multiSig(let l) = lhs, case .multiSig(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct SingleSig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sigKeyPair: Axelar_Tss_Exported_V1beta1_SigKeyPair {
      get {return _sigKeyPair ?? Axelar_Tss_Exported_V1beta1_SigKeyPair()}
      set {_sigKeyPair = newValue}
    }
    /// Returns true if `sigKeyPair` has been explicitly set.
    var hasSigKeyPair: Bool {return self._sigKeyPair != nil}
    /// Clears the value of `sigKeyPair`. Subsequent reads from it will return its default value.
    mutating func clearSigKeyPair() {self._sigKeyPair = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _sigKeyPair: Axelar_Tss_Exported_V1beta1_SigKeyPair? = nil
  }

  struct MultiSig {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sigKeyPairs: [Axelar_Tss_Exported_V1beta1_SigKeyPair] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct Axelar_Tss_Exported_V1beta1_Key {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var role: Axelar_Tss_Exported_V1beta1_KeyRole = .unspecified

  var type: Axelar_Tss_Exported_V1beta1_KeyType = .unspecified

  var publicKey: Axelar_Tss_Exported_V1beta1_Key.OneOf_PublicKey? = nil

  var ecdsaKey: Axelar_Tss_Exported_V1beta1_Key.ECDSAKey {
    get {
      if case .ecdsaKey(let v)? = publicKey {return v}
      return Axelar_Tss_Exported_V1beta1_Key.ECDSAKey()
    }
    set {publicKey = .ecdsaKey(newValue)}
  }

  var multisigKey: Axelar_Tss_Exported_V1beta1_Key.MultisigKey {
    get {
      if case .multisigKey(let v)? = publicKey {return v}
      return Axelar_Tss_Exported_V1beta1_Key.MultisigKey()
    }
    set {publicKey = .multisigKey(newValue)}
  }

  var rotatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _rotatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_rotatedAt = newValue}
  }
  /// Returns true if `rotatedAt` has been explicitly set.
  var hasRotatedAt: Bool {return self._rotatedAt != nil}
  /// Clears the value of `rotatedAt`. Subsequent reads from it will return its default value.
  mutating func clearRotatedAt() {self._rotatedAt = nil}

  var rotationCount: Int64 = 0

  var chain: String = String()

  var snapshotCounter: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_PublicKey: Equatable {
    case ecdsaKey(Axelar_Tss_Exported_V1beta1_Key.ECDSAKey)
    case multisigKey(Axelar_Tss_Exported_V1beta1_Key.MultisigKey)

  #if !swift(>=4.1)
    static func ==(lhs: Axelar_Tss_Exported_V1beta1_Key.OneOf_PublicKey, rhs: Axelar_Tss_Exported_V1beta1_Key.OneOf_PublicKey) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.ecdsaKey, .ecdsaKey): return {
        guard case .ecdsaKey(let l) = lhs, case .ecdsaKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.multisigKey, .multisigKey): return {
        guard case .multisigKey(let l) = lhs, case .multisigKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  struct ECDSAKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct MultisigKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var values: [Data] = []

    var threshold: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _rotatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.tss.exported.v1beta1"

extension Axelar_Tss_Exported_V1beta1_KeyRole: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_ROLE_UNSPECIFIED"),
    1: .same(proto: "KEY_ROLE_MASTER_KEY"),
    2: .same(proto: "KEY_ROLE_SECONDARY_KEY"),
    3: .same(proto: "KEY_ROLE_EXTERNAL_KEY"),
  ]
}

extension Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_SHARE_DISTRIBUTION_POLICY_UNSPECIFIED"),
    1: .same(proto: "KEY_SHARE_DISTRIBUTION_POLICY_WEIGHTED_BY_STAKE"),
    2: .same(proto: "KEY_SHARE_DISTRIBUTION_POLICY_ONE_PER_VALIDATOR"),
  ]
}

extension Axelar_Tss_Exported_V1beta1_AckType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACK_TYPE_UNSPECIFIED"),
    1: .same(proto: "ACK_TYPE_KEYGEN"),
    2: .same(proto: "ACK_TYPE_SIGN"),
  ]
}

extension Axelar_Tss_Exported_V1beta1_SigStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIG_STATUS_UNSPECIFIED"),
    1: .same(proto: "SIG_STATUS_QUEUED"),
    2: .same(proto: "SIG_STATUS_SIGNING"),
    3: .same(proto: "SIG_STATUS_SIGNED"),
    4: .same(proto: "SIG_STATUS_ABORTED"),
    5: .same(proto: "SIG_STATUS_INVALID"),
  ]
}

extension Axelar_Tss_Exported_V1beta1_KeyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "KEY_TYPE_UNSPECIFIED"),
    1: .same(proto: "KEY_TYPE_NONE"),
    2: .same(proto: "KEY_TYPE_THRESHOLD"),
    3: .same(proto: "KEY_TYPE_MULTISIG"),
  ]
}

extension Axelar_Tss_Exported_V1beta1_KeyRequirement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyRequirement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_role"),
    2: .standard(proto: "key_type"),
    3: .standard(proto: "min_keygen_threshold"),
    4: .standard(proto: "safety_threshold"),
    5: .standard(proto: "key_share_distribution_policy"),
    6: .standard(proto: "max_total_share_count"),
    7: .standard(proto: "min_total_share_count"),
    8: .standard(proto: "keygen_voting_threshold"),
    9: .standard(proto: "sign_voting_threshold"),
    10: .standard(proto: "keygen_timeout"),
    11: .standard(proto: "sign_timeout"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.keyRole) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.keyType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._minKeygenThreshold) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._safetyThreshold) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.keyShareDistributionPolicy) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.maxTotalShareCount) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.minTotalShareCount) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._keygenVotingThreshold) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._signVotingThreshold) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.keygenTimeout) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.signTimeout) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.keyRole != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyRole, fieldNumber: 1)
    }
    if self.keyType != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyType, fieldNumber: 2)
    }
    if let v = self._minKeygenThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._safetyThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.keyShareDistributionPolicy != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyShareDistributionPolicy, fieldNumber: 5)
    }
    if self.maxTotalShareCount != 0 {
      try visitor.visitSingularInt64Field(value: self.maxTotalShareCount, fieldNumber: 6)
    }
    if self.minTotalShareCount != 0 {
      try visitor.visitSingularInt64Field(value: self.minTotalShareCount, fieldNumber: 7)
    }
    if let v = self._keygenVotingThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if let v = self._signVotingThreshold {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }
    if self.keygenTimeout != 0 {
      try visitor.visitSingularInt64Field(value: self.keygenTimeout, fieldNumber: 10)
    }
    if self.signTimeout != 0 {
      try visitor.visitSingularInt64Field(value: self.signTimeout, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_KeyRequirement, rhs: Axelar_Tss_Exported_V1beta1_KeyRequirement) -> Bool {
    if lhs.keyRole != rhs.keyRole {return false}
    if lhs.keyType != rhs.keyType {return false}
    if lhs._minKeygenThreshold != rhs._minKeygenThreshold {return false}
    if lhs._safetyThreshold != rhs._safetyThreshold {return false}
    if lhs.keyShareDistributionPolicy != rhs.keyShareDistributionPolicy {return false}
    if lhs.maxTotalShareCount != rhs.maxTotalShareCount {return false}
    if lhs.minTotalShareCount != rhs.minTotalShareCount {return false}
    if lhs._keygenVotingThreshold != rhs._keygenVotingThreshold {return false}
    if lhs._signVotingThreshold != rhs._signVotingThreshold {return false}
    if lhs.keygenTimeout != rhs.keygenTimeout {return false}
    if lhs.signTimeout != rhs.signTimeout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_SignInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
    2: .standard(proto: "sig_id"),
    3: .same(proto: "msg"),
    4: .standard(proto: "snapshot_counter"),
    5: .standard(proto: "request_module"),
    6: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sigID) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.snapshotCounter) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.requestModule) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    if !self.sigID.isEmpty {
      try visitor.visitSingularStringField(value: self.sigID, fieldNumber: 2)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 3)
    }
    if self.snapshotCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.snapshotCounter, fieldNumber: 4)
    }
    if !self.requestModule.isEmpty {
      try visitor.visitSingularStringField(value: self.requestModule, fieldNumber: 5)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularStringField(value: self.metadata, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_SignInfo, rhs: Axelar_Tss_Exported_V1beta1_SignInfo) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.sigID != rhs.sigID {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.snapshotCounter != rhs.snapshotCounter {return false}
    if lhs.requestModule != rhs.requestModule {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_SigKeyPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SigKeyPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.pubKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_SigKeyPair, rhs: Axelar_Tss_Exported_V1beta1_SigKeyPair) -> Bool {
    if lhs.pubKey != rhs.pubKey {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Signature"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sig_id"),
    2: .standard(proto: "single_sig"),
    3: .standard(proto: "multi_sig"),
    4: .standard(proto: "sig_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sigID) }()
      case 2: try {
        var v: Axelar_Tss_Exported_V1beta1_Signature.SingleSig?
        var hadOneofValue = false
        if let current = self.sig {
          hadOneofValue = true
          if case .singleSig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sig = .singleSig(v)
        }
      }()
      case 3: try {
        var v: Axelar_Tss_Exported_V1beta1_Signature.MultiSig?
        var hadOneofValue = false
        if let current = self.sig {
          hadOneofValue = true
          if case .multiSig(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.sig = .multiSig(v)
        }
      }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.sigStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sigID.isEmpty {
      try visitor.visitSingularStringField(value: self.sigID, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.sig {
    case .singleSig?: try {
      guard case .singleSig(let v)? = self.sig else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .multiSig?: try {
      guard case .multiSig(let v)? = self.sig else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if self.sigStatus != .unspecified {
      try visitor.visitSingularEnumField(value: self.sigStatus, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Signature, rhs: Axelar_Tss_Exported_V1beta1_Signature) -> Bool {
    if lhs.sigID != rhs.sigID {return false}
    if lhs.sig != rhs.sig {return false}
    if lhs.sigStatus != rhs.sigStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Signature.SingleSig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Tss_Exported_V1beta1_Signature.protoMessageName + ".SingleSig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sig_key_pair"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sigKeyPair) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sigKeyPair {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Signature.SingleSig, rhs: Axelar_Tss_Exported_V1beta1_Signature.SingleSig) -> Bool {
    if lhs._sigKeyPair != rhs._sigKeyPair {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Signature.MultiSig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Tss_Exported_V1beta1_Signature.protoMessageName + ".MultiSig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sig_key_pairs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sigKeyPairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sigKeyPairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sigKeyPairs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Signature.MultiSig, rhs: Axelar_Tss_Exported_V1beta1_Signature.MultiSig) -> Bool {
    if lhs.sigKeyPairs != rhs.sigKeyPairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Key"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "role"),
    3: .same(proto: "type"),
    4: .standard(proto: "ecdsa_key"),
    5: .standard(proto: "multisig_key"),
    6: .standard(proto: "rotated_at"),
    7: .standard(proto: "rotation_count"),
    8: .same(proto: "chain"),
    9: .standard(proto: "snapshot_counter"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.role) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try {
        var v: Axelar_Tss_Exported_V1beta1_Key.ECDSAKey?
        var hadOneofValue = false
        if let current = self.publicKey {
          hadOneofValue = true
          if case .ecdsaKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.publicKey = .ecdsaKey(v)
        }
      }()
      case 5: try {
        var v: Axelar_Tss_Exported_V1beta1_Key.MultisigKey?
        var hadOneofValue = false
        if let current = self.publicKey {
          hadOneofValue = true
          if case .multisigKey(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.publicKey = .multisigKey(v)
        }
      }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._rotatedAt) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.rotationCount) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.chain) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.snapshotCounter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.role != .unspecified {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.publicKey {
    case .ecdsaKey?: try {
      guard case .ecdsaKey(let v)? = self.publicKey else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .multisigKey?: try {
      guard case .multisigKey(let v)? = self.publicKey else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case nil: break
    }
    if let v = self._rotatedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.rotationCount != 0 {
      try visitor.visitSingularInt64Field(value: self.rotationCount, fieldNumber: 7)
    }
    if !self.chain.isEmpty {
      try visitor.visitSingularStringField(value: self.chain, fieldNumber: 8)
    }
    if self.snapshotCounter != 0 {
      try visitor.visitSingularInt64Field(value: self.snapshotCounter, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Key, rhs: Axelar_Tss_Exported_V1beta1_Key) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.role != rhs.role {return false}
    if lhs.type != rhs.type {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs._rotatedAt != rhs._rotatedAt {return false}
    if lhs.rotationCount != rhs.rotationCount {return false}
    if lhs.chain != rhs.chain {return false}
    if lhs.snapshotCounter != rhs.snapshotCounter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Key.ECDSAKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Tss_Exported_V1beta1_Key.protoMessageName + ".ECDSAKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Key.ECDSAKey, rhs: Axelar_Tss_Exported_V1beta1_Key.ECDSAKey) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Exported_V1beta1_Key.MultisigKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Tss_Exported_V1beta1_Key.protoMessageName + ".MultisigKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
    2: .same(proto: "threshold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.values) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.threshold) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.values, fieldNumber: 1)
    }
    if self.threshold != 0 {
      try visitor.visitSingularInt64Field(value: self.threshold, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Exported_V1beta1_Key.MultisigKey, rhs: Axelar_Tss_Exported_V1beta1_Key.MultisigKey) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.threshold != rhs.threshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
