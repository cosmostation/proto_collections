//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kon_oracle/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Konstellation_Oracle_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Konstellation_Oracle_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Konstellation_Oracle_QueryClientInterceptorFactoryProtocol? { get }

  func adminAddrAll(
    _ request: Konstellation_Oracle_QueryAllAdminAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Konstellation_Oracle_QueryAllAdminAddrRequest, Konstellation_Oracle_QueryAllAdminAddrResponse>

  func exchangeRate(
    _ request: Konstellation_Oracle_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Konstellation_Oracle_QueryExchangeRateRequest, Konstellation_Oracle_QueryExchangeRateResponse>

  func allExchangeRates(
    _ request: Konstellation_Oracle_QueryAllExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Konstellation_Oracle_QueryAllExchangeRatesRequest, Konstellation_Oracle_QueryAllExchangeRatesResponse>
}

extension Konstellation_Oracle_QueryClientProtocol {
  internal var serviceName: String {
    return "konstellation.oracle.Query"
  }

  ///	// Queries a params by id.
  ///	rpc Params(QueryGetParamsRequest) returns (QueryGetParamsResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/params/{id}";
  ///	}
  ///
  ///	// Queries a list of params items.
  ///	rpc ParamsAll(QueryAllParamsRequest) returns (QueryAllParamsResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/params";
  ///	}
  ///
  ///
  ///	// Queries a adminAddr by id.
  ///	rpc AdminAddr(QueryGetAdminAddrRequest) returns (QueryGetAdminAddrResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/adminAddr/{id}";
  ///	}
  ///
  /// Queries a list of adminAddr items.
  ///
  /// - Parameters:
  ///   - request: Request to send to AdminAddrAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func adminAddrAll(
    _ request: Konstellation_Oracle_QueryAllAdminAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Konstellation_Oracle_QueryAllAdminAddrRequest, Konstellation_Oracle_QueryAllAdminAddrResponse> {
    return self.makeUnaryCall(
      path: "/konstellation.oracle.Query/AdminAddrAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdminAddrAllInterceptors() ?? []
    )
  }

  /// Unary call to ExchangeRate
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeRate(
    _ request: Konstellation_Oracle_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Konstellation_Oracle_QueryExchangeRateRequest, Konstellation_Oracle_QueryExchangeRateResponse> {
    return self.makeUnaryCall(
      path: "/konstellation.oracle.Query/ExchangeRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }

  /// Unary call to AllExchangeRates
  ///
  /// - Parameters:
  ///   - request: Request to send to AllExchangeRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allExchangeRates(
    _ request: Konstellation_Oracle_QueryAllExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Konstellation_Oracle_QueryAllExchangeRatesRequest, Konstellation_Oracle_QueryAllExchangeRatesResponse> {
    return self.makeUnaryCall(
      path: "/konstellation.oracle.Query/AllExchangeRates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? []
    )
  }
}

internal protocol Konstellation_Oracle_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'adminAddrAll'.
  func makeAdminAddrAllInterceptors() -> [ClientInterceptor<Konstellation_Oracle_QueryAllAdminAddrRequest, Konstellation_Oracle_QueryAllAdminAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeRate'.
  func makeExchangeRateInterceptors() -> [ClientInterceptor<Konstellation_Oracle_QueryExchangeRateRequest, Konstellation_Oracle_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when invoking 'allExchangeRates'.
  func makeAllExchangeRatesInterceptors() -> [ClientInterceptor<Konstellation_Oracle_QueryAllExchangeRatesRequest, Konstellation_Oracle_QueryAllExchangeRatesResponse>]
}

internal final class Konstellation_Oracle_QueryClient: Konstellation_Oracle_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Konstellation_Oracle_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the konstellation.oracle.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Konstellation_Oracle_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Konstellation_Oracle_QueryProvider: CallHandlerProvider {
  var interceptors: Konstellation_Oracle_QueryServerInterceptorFactoryProtocol? { get }

  ///	// Queries a params by id.
  ///	rpc Params(QueryGetParamsRequest) returns (QueryGetParamsResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/params/{id}";
  ///	}
  ///
  ///	// Queries a list of params items.
  ///	rpc ParamsAll(QueryAllParamsRequest) returns (QueryAllParamsResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/params";
  ///	}
  ///
  ///
  ///	// Queries a adminAddr by id.
  ///	rpc AdminAddr(QueryGetAdminAddrRequest) returns (QueryGetAdminAddrResponse) {
  ///		option (google.api.http).get = "/konstellation/konstellation/x/oracle/adminAddr/{id}";
  ///	}
  ///
  /// Queries a list of adminAddr items.
  func adminAddrAll(request: Konstellation_Oracle_QueryAllAdminAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Konstellation_Oracle_QueryAllAdminAddrResponse>

  func exchangeRate(request: Konstellation_Oracle_QueryExchangeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Konstellation_Oracle_QueryExchangeRateResponse>

  func allExchangeRates(request: Konstellation_Oracle_QueryAllExchangeRatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Konstellation_Oracle_QueryAllExchangeRatesResponse>
}

extension Konstellation_Oracle_QueryProvider {
  internal var serviceName: Substring { return "konstellation.oracle.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AdminAddrAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Konstellation_Oracle_QueryAllAdminAddrRequest>(),
        responseSerializer: ProtobufSerializer<Konstellation_Oracle_QueryAllAdminAddrResponse>(),
        interceptors: self.interceptors?.makeAdminAddrAllInterceptors() ?? [],
        userFunction: self.adminAddrAll(request:context:)
      )

    case "ExchangeRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Konstellation_Oracle_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Konstellation_Oracle_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        userFunction: self.exchangeRate(request:context:)
      )

    case "AllExchangeRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Konstellation_Oracle_QueryAllExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Konstellation_Oracle_QueryAllExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeAllExchangeRatesInterceptors() ?? [],
        userFunction: self.allExchangeRates(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Konstellation_Oracle_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'adminAddrAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdminAddrAllInterceptors() -> [ServerInterceptor<Konstellation_Oracle_QueryAllAdminAddrRequest, Konstellation_Oracle_QueryAllAdminAddrResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeRateInterceptors() -> [ServerInterceptor<Konstellation_Oracle_QueryExchangeRateRequest, Konstellation_Oracle_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when handling 'allExchangeRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllExchangeRatesInterceptors() -> [ServerInterceptor<Konstellation_Oracle_QueryAllExchangeRatesRequest, Konstellation_Oracle_QueryAllExchangeRatesResponse>]
}
