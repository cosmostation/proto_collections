// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/tss/tofnd/v1beta1/multisig.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// File copied from golang tofnd with minor tweaks

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Tss_Tofnd_V1beta1_KeygenRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyUid: String = String()

  /// used only for logging
  var partyUid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Tss_Tofnd_V1beta1_KeygenResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keygenResponse: Axelar_Tss_Tofnd_V1beta1_KeygenResponse.OneOf_KeygenResponse? = nil

  /// SEC1-encoded compressed curve point
  var pubKey: Data {
    get {
      if case .pubKey(let v)? = keygenResponse {return v}
      return Data()
    }
    set {keygenResponse = .pubKey(newValue)}
  }

  /// reply with an error message if keygen fails
  var error: String {
    get {
      if case .error(let v)? = keygenResponse {return v}
      return String()
    }
    set {keygenResponse = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_KeygenResponse: Equatable {
    /// SEC1-encoded compressed curve point
    case pubKey(Data)
    /// reply with an error message if keygen fails
    case error(String)

  #if !swift(>=4.1)
    static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_KeygenResponse.OneOf_KeygenResponse, rhs: Axelar_Tss_Tofnd_V1beta1_KeygenResponse.OneOf_KeygenResponse) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.pubKey, .pubKey): return {
        guard case .pubKey(let l) = lhs, case .pubKey(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Axelar_Tss_Tofnd_V1beta1_SignRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var keyUid: String = String()

  /// 32-byte pre-hashed message digest
  var msgToSign: Data = Data()

  /// used only for logging
  var partyUid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Axelar_Tss_Tofnd_V1beta1_SignResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signResponse: Axelar_Tss_Tofnd_V1beta1_SignResponse.OneOf_SignResponse? = nil

  /// ASN.1 DER-encoded ECDSA signature
  var signature: Data {
    get {
      if case .signature(let v)? = signResponse {return v}
      return Data()
    }
    set {signResponse = .signature(newValue)}
  }

  /// reply with an error message if sign fails
  var error: String {
    get {
      if case .error(let v)? = signResponse {return v}
      return String()
    }
    set {signResponse = .error(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_SignResponse: Equatable {
    /// ASN.1 DER-encoded ECDSA signature
    case signature(Data)
    /// reply with an error message if sign fails
    case error(String)

  #if !swift(>=4.1)
    static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_SignResponse.OneOf_SignResponse, rhs: Axelar_Tss_Tofnd_V1beta1_SignResponse.OneOf_SignResponse) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.signature, .signature): return {
        guard case .signature(let l) = lhs, case .signature(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.error, .error): return {
        guard case .error(let l) = lhs, case .error(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.tss.tofnd.v1beta1"

extension Axelar_Tss_Tofnd_V1beta1_KeygenRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_uid"),
    2: .standard(proto: "party_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyUid) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.partyUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyUid.isEmpty {
      try visitor.visitSingularStringField(value: self.keyUid, fieldNumber: 1)
    }
    if !self.partyUid.isEmpty {
      try visitor.visitSingularStringField(value: self.partyUid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_KeygenRequest, rhs: Axelar_Tss_Tofnd_V1beta1_KeygenRequest) -> Bool {
    if lhs.keyUid != rhs.keyUid {return false}
    if lhs.partyUid != rhs.partyUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Tofnd_V1beta1_KeygenResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeygenResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.keygenResponse != nil {try decoder.handleConflictingOneOf()}
          self.keygenResponse = .pubKey(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.keygenResponse != nil {try decoder.handleConflictingOneOf()}
          self.keygenResponse = .error(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.keygenResponse {
    case .pubKey?: try {
      guard case .pubKey(let v)? = self.keygenResponse else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.keygenResponse else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_KeygenResponse, rhs: Axelar_Tss_Tofnd_V1beta1_KeygenResponse) -> Bool {
    if lhs.keygenResponse != rhs.keygenResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Tofnd_V1beta1_SignRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_uid"),
    2: .standard(proto: "msg_to_sign"),
    3: .standard(proto: "party_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyUid) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.msgToSign) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.partyUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyUid.isEmpty {
      try visitor.visitSingularStringField(value: self.keyUid, fieldNumber: 1)
    }
    if !self.msgToSign.isEmpty {
      try visitor.visitSingularBytesField(value: self.msgToSign, fieldNumber: 2)
    }
    if !self.partyUid.isEmpty {
      try visitor.visitSingularStringField(value: self.partyUid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_SignRequest, rhs: Axelar_Tss_Tofnd_V1beta1_SignRequest) -> Bool {
    if lhs.keyUid != rhs.keyUid {return false}
    if lhs.msgToSign != rhs.msgToSign {return false}
    if lhs.partyUid != rhs.partyUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Tss_Tofnd_V1beta1_SignResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {
          if self.signResponse != nil {try decoder.handleConflictingOneOf()}
          self.signResponse = .signature(v)
        }
      }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.signResponse != nil {try decoder.handleConflictingOneOf()}
          self.signResponse = .error(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.signResponse {
    case .signature?: try {
      guard case .signature(let v)? = self.signResponse else { preconditionFailure() }
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }()
    case .error?: try {
      guard case .error(let v)? = self.signResponse else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_Tofnd_V1beta1_SignResponse, rhs: Axelar_Tss_Tofnd_V1beta1_SignResponse) -> Bool {
    if lhs.signResponse != rhs.signResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
