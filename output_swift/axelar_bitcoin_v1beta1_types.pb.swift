// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/bitcoin/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Bitcoin_V1beta1_TxStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case created // = 1
  case signing // = 2
  case aborted // = 3
  case signed // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .created
    case 2: self = .signing
    case 3: self = .aborted
    case 4: self = .signed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .created: return 1
    case .signing: return 2
    case .aborted: return 3
    case .signed: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Bitcoin_V1beta1_TxStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Bitcoin_V1beta1_TxStatus] = [
    .unspecified,
    .created,
    .signing,
    .aborted,
    .signed,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Bitcoin_V1beta1_TxType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case masterConsolidation // = 1
  case secondaryConsolidation // = 2
  case rescue // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .masterConsolidation
    case 2: self = .secondaryConsolidation
    case 3: self = .rescue
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .masterConsolidation: return 1
    case .secondaryConsolidation: return 2
    case .rescue: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Bitcoin_V1beta1_TxType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Bitcoin_V1beta1_TxType] = [
    .unspecified,
    .masterConsolidation,
    .secondaryConsolidation,
    .rescue,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Bitcoin_V1beta1_OutPointState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case pending // = 1
  case confirmed // = 2
  case spent // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .pending
    case 2: self = .confirmed
    case 3: self = .spent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .pending: return 1
    case .confirmed: return 2
    case .spent: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Bitcoin_V1beta1_OutPointState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Bitcoin_V1beta1_OutPointState] = [
    .unspecified,
    .pending,
    .confirmed,
    .spent,
  ]
}

#endif  // swift(>=4.2)

enum Axelar_Bitcoin_V1beta1_AddressRole: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case deposit // = 1
  case consolidation // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .deposit
    case 2: self = .consolidation
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .deposit: return 1
    case .consolidation: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Bitcoin_V1beta1_AddressRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Bitcoin_V1beta1_AddressRole] = [
    .unspecified,
    .deposit,
    .consolidation,
  ]
}

#endif  // swift(>=4.2)

struct Axelar_Bitcoin_V1beta1_UnsignedTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Axelar_Bitcoin_V1beta1_TxType = .unspecified

  var tx: Data = Data()

  var info: Axelar_Bitcoin_V1beta1_UnsignedTx.Info {
    get {return _info ?? Axelar_Bitcoin_V1beta1_UnsignedTx.Info()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var status: Axelar_Bitcoin_V1beta1_TxStatus = .unspecified

  var confirmationRequired: Bool = false

  var anyoneCanSpendVout: UInt32 = 0

  var prevAbortedKeyID: String = String()

  var internalTransferAmount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Info {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rotateKey: Bool = false

    var inputInfos: [Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct InputInfo {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var sigRequirements: [Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo.SigRequirement] = []

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct SigRequirement {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var keyID: String = String()

        var sigHash: Data = Data()

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
      }

      init() {}
    }

    init() {}
  }

  init() {}

  fileprivate var _info: Axelar_Bitcoin_V1beta1_UnsignedTx.Info? = nil
}

struct Axelar_Bitcoin_V1beta1_SignedTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Axelar_Bitcoin_V1beta1_TxType = .unspecified

  var tx: Data = Data()

  var prevSignedTxHash: Data = Data()

  var confirmationRequired: Bool = false

  var anyoneCanSpendVout: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// OutPointInfo describes all the necessary information to confirm the outPoint
/// of a transaction
struct Axelar_Bitcoin_V1beta1_OutPointInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var outPoint: String = String()

  var amount: Int64 = 0

  var address: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AddressInfo is a wrapper containing the Bitcoin P2WSH address, it's
/// corresponding script and the underlying key
struct Axelar_Bitcoin_V1beta1_AddressInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var role: Axelar_Bitcoin_V1beta1_AddressRole = .unspecified

  var redeemScript: Data = Data()

  var keyID: String = String()

  var maxSigCount: UInt32 = 0

  var spendingCondition: Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition {
    get {return _spendingCondition ?? Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition()}
    set {_spendingCondition = newValue}
  }
  /// Returns true if `spendingCondition` has been explicitly set.
  var hasSpendingCondition: Bool {return self._spendingCondition != nil}
  /// Clears the value of `spendingCondition`. Subsequent reads from it will return its default value.
  mutating func clearSpendingCondition() {self._spendingCondition = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SpendingCondition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// internal_key_ids lists the internal key IDs that one of which has to sign
    /// regardless of locktime
    var internalKeyIds: [String] = []

    /// external_key_ids lists the external key IDs that
    /// external_multisig_threshold of which have to sign to spend before
    /// locktime if set
    var externalKeyIds: [String] = []

    var externalMultisigThreshold: Int64 = 0

    var lockTime: SwiftProtobuf.Google_Protobuf_Timestamp {
      get {return _lockTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
      set {_lockTime = newValue}
    }
    /// Returns true if `lockTime` has been explicitly set.
    var hasLockTime: Bool {return self._lockTime != nil}
    /// Clears the value of `lockTime`. Subsequent reads from it will return its default value.
    mutating func clearLockTime() {self._lockTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _lockTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  }

  init() {}

  fileprivate var _spendingCondition: Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition? = nil
}

struct Axelar_Bitcoin_V1beta1_Network {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.bitcoin.v1beta1"

extension Axelar_Bitcoin_V1beta1_TxStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TX_STATUS_UNSPECIFIED"),
    1: .same(proto: "TX_STATUS_CREATED"),
    2: .same(proto: "TX_STATUS_SIGNING"),
    3: .same(proto: "TX_STATUS_ABORTED"),
    4: .same(proto: "TX_STATUS_SIGNED"),
  ]
}

extension Axelar_Bitcoin_V1beta1_TxType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TX_TYPE_UNSPECIFIED"),
    1: .same(proto: "TX_TYPE_MASTER_CONSOLIDATION"),
    2: .same(proto: "TX_TYPE_SECONDARY_CONSOLIDATION"),
    3: .same(proto: "TX_TYPE_RESCUE"),
  ]
}

extension Axelar_Bitcoin_V1beta1_OutPointState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OUT_POINT_STATE_UNSPECIFIED"),
    1: .same(proto: "OUT_POINT_STATE_PENDING"),
    2: .same(proto: "OUT_POINT_STATE_CONFIRMED"),
    3: .same(proto: "OUT_POINT_STATE_SPENT"),
  ]
}

extension Axelar_Bitcoin_V1beta1_AddressRole: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ADDRESS_ROLE_UNSPECIFIED"),
    1: .same(proto: "ADDRESS_ROLE_DEPOSIT"),
    2: .same(proto: "ADDRESS_ROLE_CONSOLIDATION"),
  ]
}

extension Axelar_Bitcoin_V1beta1_UnsignedTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnsignedTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "tx"),
    3: .same(proto: "info"),
    4: .same(proto: "status"),
    5: .standard(proto: "confirmation_required"),
    6: .standard(proto: "anyone_can_spend_vout"),
    7: .standard(proto: "prev_aborted_key_id"),
    8: .standard(proto: "internal_transfer_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.tx) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.confirmationRequired) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.anyoneCanSpendVout) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.prevAbortedKeyID) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.internalTransferAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 2)
    }
    if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if self.confirmationRequired != false {
      try visitor.visitSingularBoolField(value: self.confirmationRequired, fieldNumber: 5)
    }
    if self.anyoneCanSpendVout != 0 {
      try visitor.visitSingularUInt32Field(value: self.anyoneCanSpendVout, fieldNumber: 6)
    }
    if !self.prevAbortedKeyID.isEmpty {
      try visitor.visitSingularStringField(value: self.prevAbortedKeyID, fieldNumber: 7)
    }
    if self.internalTransferAmount != 0 {
      try visitor.visitSingularInt64Field(value: self.internalTransferAmount, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_UnsignedTx, rhs: Axelar_Bitcoin_V1beta1_UnsignedTx) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.tx != rhs.tx {return false}
    if lhs._info != rhs._info {return false}
    if lhs.status != rhs.status {return false}
    if lhs.confirmationRequired != rhs.confirmationRequired {return false}
    if lhs.anyoneCanSpendVout != rhs.anyoneCanSpendVout {return false}
    if lhs.prevAbortedKeyID != rhs.prevAbortedKeyID {return false}
    if lhs.internalTransferAmount != rhs.internalTransferAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_UnsignedTx.Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Bitcoin_V1beta1_UnsignedTx.protoMessageName + ".Info"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rotate_key"),
    2: .standard(proto: "input_infos"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.rotateKey) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rotateKey != false {
      try visitor.visitSingularBoolField(value: self.rotateKey, fieldNumber: 1)
    }
    if !self.inputInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputInfos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info, rhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info) -> Bool {
    if lhs.rotateKey != rhs.rotateKey {return false}
    if lhs.inputInfos != rhs.inputInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Bitcoin_V1beta1_UnsignedTx.Info.protoMessageName + ".InputInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sig_requirements"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sigRequirements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sigRequirements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sigRequirements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo, rhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo) -> Bool {
    if lhs.sigRequirements != rhs.sigRequirements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo.SigRequirement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo.protoMessageName + ".SigRequirement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
    2: .standard(proto: "sig_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.sigHash) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    if !self.sigHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.sigHash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo.SigRequirement, rhs: Axelar_Bitcoin_V1beta1_UnsignedTx.Info.InputInfo.SigRequirement) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.sigHash != rhs.sigHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_SignedTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "tx"),
    3: .standard(proto: "prev_signed_tx_hash"),
    4: .standard(proto: "confirmation_required"),
    5: .standard(proto: "anyone_can_spend_vout"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.tx) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.prevSignedTxHash) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.confirmationRequired) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.anyoneCanSpendVout) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 2)
    }
    if !self.prevSignedTxHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.prevSignedTxHash, fieldNumber: 3)
    }
    if self.confirmationRequired != false {
      try visitor.visitSingularBoolField(value: self.confirmationRequired, fieldNumber: 4)
    }
    if self.anyoneCanSpendVout != 0 {
      try visitor.visitSingularUInt32Field(value: self.anyoneCanSpendVout, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_SignedTx, rhs: Axelar_Bitcoin_V1beta1_SignedTx) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.tx != rhs.tx {return false}
    if lhs.prevSignedTxHash != rhs.prevSignedTxHash {return false}
    if lhs.confirmationRequired != rhs.confirmationRequired {return false}
    if lhs.anyoneCanSpendVout != rhs.anyoneCanSpendVout {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_OutPointInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OutPointInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "out_point"),
    2: .same(proto: "amount"),
    3: .same(proto: "address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.outPoint) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.outPoint.isEmpty {
      try visitor.visitSingularStringField(value: self.outPoint, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_OutPointInfo, rhs: Axelar_Bitcoin_V1beta1_OutPointInfo) -> Bool {
    if lhs.outPoint != rhs.outPoint {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_AddressInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddressInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "role"),
    3: .standard(proto: "redeem_script"),
    4: .standard(proto: "key_id"),
    5: .standard(proto: "max_sig_count"),
    6: .standard(proto: "spending_condition"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.role) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.redeemScript) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.keyID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.maxSigCount) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._spendingCondition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.role != .unspecified {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 2)
    }
    if !self.redeemScript.isEmpty {
      try visitor.visitSingularBytesField(value: self.redeemScript, fieldNumber: 3)
    }
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 4)
    }
    if self.maxSigCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxSigCount, fieldNumber: 5)
    }
    if let v = self._spendingCondition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_AddressInfo, rhs: Axelar_Bitcoin_V1beta1_AddressInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.role != rhs.role {return false}
    if lhs.redeemScript != rhs.redeemScript {return false}
    if lhs.keyID != rhs.keyID {return false}
    if lhs.maxSigCount != rhs.maxSigCount {return false}
    if lhs._spendingCondition != rhs._spendingCondition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Bitcoin_V1beta1_AddressInfo.protoMessageName + ".SpendingCondition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "internal_key_ids"),
    2: .standard(proto: "external_key_ids"),
    3: .standard(proto: "external_multisig_threshold"),
    4: .standard(proto: "lock_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.internalKeyIds) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.externalKeyIds) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.externalMultisigThreshold) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._lockTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.internalKeyIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.internalKeyIds, fieldNumber: 1)
    }
    if !self.externalKeyIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.externalKeyIds, fieldNumber: 2)
    }
    if self.externalMultisigThreshold != 0 {
      try visitor.visitSingularInt64Field(value: self.externalMultisigThreshold, fieldNumber: 3)
    }
    if let v = self._lockTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition, rhs: Axelar_Bitcoin_V1beta1_AddressInfo.SpendingCondition) -> Bool {
    if lhs.internalKeyIds != rhs.internalKeyIds {return false}
    if lhs.externalKeyIds != rhs.externalKeyIds {return false}
    if lhs.externalMultisigThreshold != rhs.externalMultisigThreshold {return false}
    if lhs._lockTime != rhs._lockTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Bitcoin_V1beta1_Network: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Network"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Bitcoin_V1beta1_Network, rhs: Axelar_Bitcoin_V1beta1_Network) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
