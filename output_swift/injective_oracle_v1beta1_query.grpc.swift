//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/oracle/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Injective_Oracle_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Oracle_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>

  func bandRelayers(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>

  func bandPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>

  func bandIBCPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>

  func priceFeedPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>

  func coinbasePriceStates(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>

  func oracleModuleState(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>
}

extension Injective_Oracle_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "injective.oracle.v1beta1.Query"
  }

  /// Retrieves oracle params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Injective_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Retrieves the band relayers
  ///
  /// - Parameters:
  ///   - request: Request to send to BandRelayers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandRelayers(
    _ request: Injective_Oracle_V1beta1_QueryBandRelayersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/BandRelayers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? []
    )
  }

  /// Retrieves the state for all band price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to BandPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/BandPriceStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all band ibc price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to BandIBCPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bandIBCPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to PriceFeedPriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func priceFeedPriceStates(
    _ request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the state for all coinbase price feeds
  ///
  /// - Parameters:
  ///   - request: Request to send to CoinbasePriceStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func coinbasePriceStates(
    _ request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? []
    )
  }

  /// Retrieves the entire oracle module's state
  ///
  /// - Parameters:
  ///   - request: Request to send to OracleModuleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func oracleModuleState(
    _ request: Injective_Oracle_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse> {
    return self.makeUnaryCall(
      path: "/injective.oracle.v1beta1.Query/OracleModuleState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? []
    )
  }
}

internal protocol Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'bandRelayers'.
  func makeBandRelayersInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>]

  /// - Returns: Interceptors to use when invoking 'bandPriceStates'.
  func makeBandPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'bandIBCPriceStates'.
  func makeBandIBCPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'priceFeedPriceStates'.
  func makePriceFeedPriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'coinbasePriceStates'.
  func makeCoinbasePriceStatesInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'oracleModuleState'.
  func makeOracleModuleStateInterceptors() -> [ClientInterceptor<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>]
}

internal final class Injective_Oracle_V1beta1_QueryClient: Injective_Oracle_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Oracle_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves oracle params
  func params(request: Injective_Oracle_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryParamsResponse>

  /// Retrieves the band relayers
  func bandRelayers(request: Injective_Oracle_V1beta1_QueryBandRelayersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandRelayersResponse>

  /// Retrieves the state for all band price feeds
  func bandPriceStates(request: Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>

  /// Retrieves the state for all band ibc price feeds
  func bandIBCPriceStates(request: Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>

  /// Retrieves the state for all price feeds
  func priceFeedPriceStates(request: Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>

  /// Retrieves the state for all coinbase price feeds
  func coinbasePriceStates(request: Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>

  /// Retrieves the entire oracle module's state
  func oracleModuleState(request: Injective_Oracle_V1beta1_QueryModuleStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Oracle_V1beta1_QueryModuleStateResponse>
}

extension Injective_Oracle_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "injective.oracle.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "BandRelayers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandRelayersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandRelayersResponse>(),
        interceptors: self.interceptors?.makeBandRelayersInterceptors() ?? [],
        userFunction: self.bandRelayers(request:context:)
      )

    case "BandPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandPriceStatesInterceptors() ?? [],
        userFunction: self.bandPriceStates(request:context:)
      )

    case "BandIBCPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>(),
        interceptors: self.interceptors?.makeBandIBCPriceStatesInterceptors() ?? [],
        userFunction: self.bandIBCPriceStates(request:context:)
      )

    case "PriceFeedPriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>(),
        interceptors: self.interceptors?.makePriceFeedPriceStatesInterceptors() ?? [],
        userFunction: self.priceFeedPriceStates(request:context:)
      )

    case "CoinbasePriceStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>(),
        interceptors: self.interceptors?.makeCoinbasePriceStatesInterceptors() ?? [],
        userFunction: self.coinbasePriceStates(request:context:)
      )

    case "OracleModuleState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Oracle_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Oracle_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeOracleModuleStateInterceptors() ?? [],
        userFunction: self.oracleModuleState(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryParamsRequest, Injective_Oracle_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'bandRelayers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandRelayersInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandRelayersRequest, Injective_Oracle_V1beta1_QueryBandRelayersResponse>]

  /// - Returns: Interceptors to use when handling 'bandPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'bandIBCPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBandIBCPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryBandIBCPriceStatesRequest, Injective_Oracle_V1beta1_QueryBandIBCPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'priceFeedPriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePriceFeedPriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesRequest, Injective_Oracle_V1beta1_QueryPriceFeedPriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'coinbasePriceStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCoinbasePriceStatesInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryCoinbasePriceStatesRequest, Injective_Oracle_V1beta1_QueryCoinbasePriceStatesResponse>]

  /// - Returns: Interceptors to use when handling 'oracleModuleState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOracleModuleStateInterceptors() -> [ServerInterceptor<Injective_Oracle_V1beta1_QueryModuleStateRequest, Injective_Oracle_V1beta1_QueryModuleStateResponse>]
}
