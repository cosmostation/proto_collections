// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/insurance/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the insurance module's genesis state.
struct Injective_Insurance_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of related to insurance.
  var params: Injective_Insurance_V1beta1_Params {
    get {return _params ?? Injective_Insurance_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// insurance_funds describes the insurance funds available for derivative markets
  var insuranceFunds: [Injective_Insurance_V1beta1_InsuranceFund] = []

  /// redemption_schedule describes the redemption requests pending
  var redemptionSchedule: [Injective_Insurance_V1beta1_RedemptionSchedule] = []

  /// next_share_denom_id describes the next share denom id to be used for newly creating insurance fund
  /// incremented by 1 per insurance fund creation
  var nextShareDenomID: UInt64 = 0

  /// next_redemption_schedule_id describes next redemption schedule id to be used for next schedule
  /// incremented by 1 per redemption request
  var nextRedemptionScheduleID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Injective_Insurance_V1beta1_Params? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.insurance.v1beta1"

extension Injective_Insurance_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "insurance_funds"),
    3: .standard(proto: "redemption_schedule"),
    4: .standard(proto: "next_share_denom_id"),
    5: .standard(proto: "next_redemption_schedule_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.insuranceFunds) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.redemptionSchedule) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.nextShareDenomID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.nextRedemptionScheduleID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.insuranceFunds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.insuranceFunds, fieldNumber: 2)
    }
    if !self.redemptionSchedule.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.redemptionSchedule, fieldNumber: 3)
    }
    if self.nextShareDenomID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextShareDenomID, fieldNumber: 4)
    }
    if self.nextRedemptionScheduleID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextRedemptionScheduleID, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Insurance_V1beta1_GenesisState, rhs: Injective_Insurance_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.insuranceFunds != rhs.insuranceFunds {return false}
    if lhs.redemptionSchedule != rhs.redemptionSchedule {return false}
    if lhs.nextShareDenomID != rhs.nextShareDenomID {return false}
    if lhs.nextRedemptionScheduleID != rhs.nextRedemptionScheduleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
