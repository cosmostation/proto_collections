// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/hard/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the hard module's genesis state.
struct Kava_Hard_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Kava_Hard_V1beta1_Params {
    get {return _params ?? Kava_Hard_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  var previousAccumulationTimes: [Kava_Hard_V1beta1_GenesisAccumulationTime] = []

  var deposits: [Kava_Hard_V1beta1_Deposit] = []

  var borrows: [Kava_Hard_V1beta1_Borrow] = []

  var totalSupplied: [Cosmos_Base_V1beta1_Coin] = []

  var totalBorrowed: [Cosmos_Base_V1beta1_Coin] = []

  var totalReserves: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Kava_Hard_V1beta1_Params? = nil
}

/// GenesisAccumulationTime stores the previous distribution time and its corresponding denom.
struct Kava_Hard_V1beta1_GenesisAccumulationTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralType: String = String()

  var previousAccumulationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previousAccumulationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previousAccumulationTime = newValue}
  }
  /// Returns true if `previousAccumulationTime` has been explicitly set.
  var hasPreviousAccumulationTime: Bool {return self._previousAccumulationTime != nil}
  /// Clears the value of `previousAccumulationTime`. Subsequent reads from it will return its default value.
  mutating func clearPreviousAccumulationTime() {self._previousAccumulationTime = nil}

  var supplyInterestFactor: String = String()

  var borrowInterestFactor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _previousAccumulationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.hard.v1beta1"

extension Kava_Hard_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "previous_accumulation_times"),
    3: .same(proto: "deposits"),
    4: .same(proto: "borrows"),
    5: .standard(proto: "total_supplied"),
    6: .standard(proto: "total_borrowed"),
    7: .standard(proto: "total_reserves"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.previousAccumulationTimes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.deposits) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.borrows) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.totalSupplied) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.totalBorrowed) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.totalReserves) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.previousAccumulationTimes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.previousAccumulationTimes, fieldNumber: 2)
    }
    if !self.deposits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deposits, fieldNumber: 3)
    }
    if !self.borrows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.borrows, fieldNumber: 4)
    }
    if !self.totalSupplied.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalSupplied, fieldNumber: 5)
    }
    if !self.totalBorrowed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalBorrowed, fieldNumber: 6)
    }
    if !self.totalReserves.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.totalReserves, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_GenesisState, rhs: Kava_Hard_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.previousAccumulationTimes != rhs.previousAccumulationTimes {return false}
    if lhs.deposits != rhs.deposits {return false}
    if lhs.borrows != rhs.borrows {return false}
    if lhs.totalSupplied != rhs.totalSupplied {return false}
    if lhs.totalBorrowed != rhs.totalBorrowed {return false}
    if lhs.totalReserves != rhs.totalReserves {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_GenesisAccumulationTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisAccumulationTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_type"),
    2: .standard(proto: "previous_accumulation_time"),
    3: .standard(proto: "supply_interest_factor"),
    4: .standard(proto: "borrow_interest_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._previousAccumulationTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.supplyInterestFactor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.borrowInterestFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 1)
    }
    if let v = self._previousAccumulationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.supplyInterestFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.supplyInterestFactor, fieldNumber: 3)
    }
    if !self.borrowInterestFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.borrowInterestFactor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_GenesisAccumulationTime, rhs: Kava_Hard_V1beta1_GenesisAccumulationTime) -> Bool {
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._previousAccumulationTime != rhs._previousAccumulationTime {return false}
    if lhs.supplyInterestFactor != rhs.supplyInterestFactor {return false}
    if lhs.borrowInterestFactor != rhs.borrowInterestFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
