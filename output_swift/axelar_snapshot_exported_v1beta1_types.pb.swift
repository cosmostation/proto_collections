// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/snapshot/exported/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Axelar_Snapshot_Exported_V1beta1_ValidatorIllegibility: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// these enum values are used for bitwise operations, therefore they need to
  /// be powers of 2
  case unspecified // = 0
  case tombstoned // = 1
  case jailed // = 2
  case missedTooManyBlocks // = 4
  case noProxyRegistered // = 8
  case tssSuspended // = 16
  case proxyInsuficientFunds // = 32
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .tombstoned
    case 2: self = .jailed
    case 4: self = .missedTooManyBlocks
    case 8: self = .noProxyRegistered
    case 16: self = .tssSuspended
    case 32: self = .proxyInsuficientFunds
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .tombstoned: return 1
    case .jailed: return 2
    case .missedTooManyBlocks: return 4
    case .noProxyRegistered: return 8
    case .tssSuspended: return 16
    case .proxyInsuficientFunds: return 32
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Axelar_Snapshot_Exported_V1beta1_ValidatorIllegibility: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Axelar_Snapshot_Exported_V1beta1_ValidatorIllegibility] = [
    .unspecified,
    .tombstoned,
    .jailed,
    .missedTooManyBlocks,
    .noProxyRegistered,
    .tssSuspended,
    .proxyInsuficientFunds,
  ]
}

#endif  // swift(>=4.2)

struct Axelar_Snapshot_Exported_V1beta1_Validator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sdkValidator: Google_Protobuf2_Any {
    get {return _sdkValidator ?? Google_Protobuf2_Any()}
    set {_sdkValidator = newValue}
  }
  /// Returns true if `sdkValidator` has been explicitly set.
  var hasSdkValidator: Bool {return self._sdkValidator != nil}
  /// Clears the value of `sdkValidator`. Subsequent reads from it will return its default value.
  mutating func clearSdkValidator() {self._sdkValidator = nil}

  var shareCount: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sdkValidator: Google_Protobuf2_Any? = nil
}

struct Axelar_Snapshot_Exported_V1beta1_Snapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validators: [Axelar_Snapshot_Exported_V1beta1_Validator] = []

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var height: Int64 = 0

  var totalShareCount: Data = Data()

  var counter: Int64 = 0

  var keyShareDistributionPolicy: Axelar_Tss_Exported_V1beta1_KeyShareDistributionPolicy = .unspecified

  var corruptionThreshold: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.snapshot.exported.v1beta1"

extension Axelar_Snapshot_Exported_V1beta1_ValidatorIllegibility: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VALIDATOR_ILLEGIBILITY_UNSPECIFIED"),
    1: .same(proto: "VALIDATOR_ILLEGIBILITY_TOMBSTONED"),
    2: .same(proto: "VALIDATOR_ILLEGIBILITY_JAILED"),
    4: .same(proto: "VALIDATOR_ILLEGIBILITY_MISSED_TOO_MANY_BLOCKS"),
    8: .same(proto: "VALIDATOR_ILLEGIBILITY_NO_PROXY_REGISTERED"),
    16: .same(proto: "VALIDATOR_ILLEGIBILITY_TSS_SUSPENDED"),
    32: .same(proto: "VALIDATOR_ILLEGIBILITY_PROXY_INSUFICIENT_FUNDS"),
  ]
}

extension Axelar_Snapshot_Exported_V1beta1_Validator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Validator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sdk_validator"),
    2: .standard(proto: "share_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sdkValidator) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shareCount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sdkValidator {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.shareCount != 0 {
      try visitor.visitSingularInt64Field(value: self.shareCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Snapshot_Exported_V1beta1_Validator, rhs: Axelar_Snapshot_Exported_V1beta1_Validator) -> Bool {
    if lhs._sdkValidator != rhs._sdkValidator {return false}
    if lhs.shareCount != rhs.shareCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Snapshot_Exported_V1beta1_Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Snapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validators"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "height"),
    4: .standard(proto: "total_share_count"),
    5: .same(proto: "counter"),
    6: .standard(proto: "key_share_distribution_policy"),
    7: .standard(proto: "corruption_threshold"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.validators) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.totalShareCount) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.counter) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self.keyShareDistributionPolicy) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.corruptionThreshold) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.validators, fieldNumber: 1)
    }
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 3)
    }
    if !self.totalShareCount.isEmpty {
      try visitor.visitSingularBytesField(value: self.totalShareCount, fieldNumber: 4)
    }
    if self.counter != 0 {
      try visitor.visitSingularInt64Field(value: self.counter, fieldNumber: 5)
    }
    if self.keyShareDistributionPolicy != .unspecified {
      try visitor.visitSingularEnumField(value: self.keyShareDistributionPolicy, fieldNumber: 6)
    }
    if self.corruptionThreshold != 0 {
      try visitor.visitSingularInt64Field(value: self.corruptionThreshold, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Snapshot_Exported_V1beta1_Snapshot, rhs: Axelar_Snapshot_Exported_V1beta1_Snapshot) -> Bool {
    if lhs.validators != rhs.validators {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.height != rhs.height {return false}
    if lhs.totalShareCount != rhs.totalShareCount {return false}
    if lhs.counter != rhs.counter {return false}
    if lhs.keyShareDistributionPolicy != rhs.keyShareDistributionPolicy {return false}
    if lhs.corruptionThreshold != rhs.corruptionThreshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
