// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comdex/vault/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Comdex_Vault_V1beta1_EventCreateVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sender: String = String()

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Comdex_Vault_V1beta1_EventDepositCollateral {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var collateralType: String = String()

  var collateral: Cosmos_Base_V1beta1_Coin {
    get {return _collateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_collateral = newValue}
  }
  /// Returns true if `collateral` has been explicitly set.
  var hasCollateral: Bool {return self._collateral != nil}
  /// Clears the value of `collateral`. Subsequent reads from it will return its default value.
  mutating func clearCollateral() {self._collateral = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collateral: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Vault_V1beta1_EventWithdrawCollateral {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var collateralType: String = String()

  var collateral: Cosmos_Base_V1beta1_Coin {
    get {return _collateral ?? Cosmos_Base_V1beta1_Coin()}
    set {_collateral = newValue}
  }
  /// Returns true if `collateral` has been explicitly set.
  var hasCollateral: Bool {return self._collateral != nil}
  /// Clears the value of `collateral`. Subsequent reads from it will return its default value.
  mutating func clearCollateral() {self._collateral = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _collateral: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Vault_V1beta1_EventDrawDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var collateralType: String = String()

  var debt: Cosmos_Base_V1beta1_Coin {
    get {return _debt ?? Cosmos_Base_V1beta1_Coin()}
    set {_debt = newValue}
  }
  /// Returns true if `debt` has been explicitly set.
  var hasDebt: Bool {return self._debt != nil}
  /// Clears the value of `debt`. Subsequent reads from it will return its default value.
  mutating func clearDebt() {self._debt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _debt: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Vault_V1beta1_EventRepayDebt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var collateralType: String = String()

  var debt: Cosmos_Base_V1beta1_Coin {
    get {return _debt ?? Cosmos_Base_V1beta1_Coin()}
    set {_debt = newValue}
  }
  /// Returns true if `debt` has been explicitly set.
  var hasDebt: Bool {return self._debt != nil}
  /// Clears the value of `debt`. Subsequent reads from it will return its default value.
  mutating func clearDebt() {self._debt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _debt: Cosmos_Base_V1beta1_Coin? = nil
}

struct Comdex_Vault_V1beta1_EventCloseVault {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var owner: String = String()

  var collateralType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "comdex.vault.v1beta1"

extension Comdex_Vault_V1beta1_EventCreateVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreateVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventCreateVault, rhs: Comdex_Vault_V1beta1_EventCreateVault) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_EventDepositCollateral: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventDepositCollateral"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "collateral"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._collateral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._collateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventDepositCollateral, rhs: Comdex_Vault_V1beta1_EventDepositCollateral) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._collateral != rhs._collateral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_EventWithdrawCollateral: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventWithdrawCollateral"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "collateral"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._collateral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._collateral {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventWithdrawCollateral, rhs: Comdex_Vault_V1beta1_EventWithdrawCollateral) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._collateral != rhs._collateral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_EventDrawDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventDrawDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "debt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._debt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._debt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventDrawDebt, rhs: Comdex_Vault_V1beta1_EventDrawDebt) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._debt != rhs._debt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_EventRepayDebt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRepayDebt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "collateral_type"),
    3: .same(proto: "debt"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._debt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    if let v = self._debt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventRepayDebt, rhs: Comdex_Vault_V1beta1_EventRepayDebt) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._debt != rhs._debt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Comdex_Vault_V1beta1_EventCloseVault: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCloseVault"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "owner"),
    2: .standard(proto: "collateral_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 1)
    }
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Comdex_Vault_V1beta1_EventCloseVault, rhs: Comdex_Vault_V1beta1_EventCloseVault) -> Bool {
    if lhs.owner != rhs.owner {return false}
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
