// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sifnode/ethbridge/v1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgLock defines a message for locking coins and triggering a related event
struct Sifnode_Ethbridge_V1_MsgLock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cosmosSender: String = String()

  var amount: String = String()

  var symbol: String = String()

  var ethereumChainID: Int64 = 0

  var ethereumReceiver: String = String()

  var cethAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgLockResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBurn defines a message for burning coins and triggering a related event
struct Sifnode_Ethbridge_V1_MsgBurn {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cosmosSender: String = String()

  var amount: String = String()

  var symbol: String = String()

  var ethereumChainID: Int64 = 0

  var ethereumReceiver: String = String()

  var cethAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgBurnResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ethBridgeClaim: Sifnode_Ethbridge_V1_EthBridgeClaim {
    get {return _ethBridgeClaim ?? Sifnode_Ethbridge_V1_EthBridgeClaim()}
    set {_ethBridgeClaim = newValue}
  }
  /// Returns true if `ethBridgeClaim` has been explicitly set.
  var hasEthBridgeClaim: Bool {return self._ethBridgeClaim != nil}
  /// Clears the value of `ethBridgeClaim`. Subsequent reads from it will return its default value.
  mutating func clearEthBridgeClaim() {self._ethBridgeClaim = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ethBridgeClaim: Sifnode_Ethbridge_V1_EthBridgeClaim? = nil
}

struct Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgUpdateWhiteListValidator add or remove validator from whitelist
struct Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cosmosSender: String = String()

  var validator: String = String()

  var operationType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidatorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cosmosSender: String = String()

  var cethReceiverAccount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccountResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgRescueCeth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cosmosSender: String = String()

  var cosmosReceiver: String = String()

  var cethAmount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgRescueCethResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgSetBlacklist {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var addresses: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Sifnode_Ethbridge_V1_MsgSetBlacklistResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sifnode.ethbridge.v1"

extension Sifnode_Ethbridge_V1_MsgLock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cosmos_sender"),
    2: .same(proto: "amount"),
    3: .same(proto: "symbol"),
    4: .standard(proto: "ethereum_chain_id"),
    5: .standard(proto: "ethereum_receiver"),
    6: .standard(proto: "ceth_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cosmosSender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.ethereumChainID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ethereumReceiver) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cethAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cosmosSender.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosSender, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if self.ethereumChainID != 0 {
      try visitor.visitSingularInt64Field(value: self.ethereumChainID, fieldNumber: 4)
    }
    if !self.ethereumReceiver.isEmpty {
      try visitor.visitSingularStringField(value: self.ethereumReceiver, fieldNumber: 5)
    }
    if !self.cethAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.cethAmount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgLock, rhs: Sifnode_Ethbridge_V1_MsgLock) -> Bool {
    if lhs.cosmosSender != rhs.cosmosSender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.ethereumChainID != rhs.ethereumChainID {return false}
    if lhs.ethereumReceiver != rhs.ethereumReceiver {return false}
    if lhs.cethAmount != rhs.cethAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgLockResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLockResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgLockResponse, rhs: Sifnode_Ethbridge_V1_MsgLockResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgBurn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBurn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cosmos_sender"),
    2: .same(proto: "amount"),
    3: .same(proto: "symbol"),
    4: .standard(proto: "ethereum_chain_id"),
    5: .standard(proto: "ethereum_receiver"),
    6: .standard(proto: "ceth_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cosmosSender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.symbol) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.ethereumChainID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ethereumReceiver) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.cethAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cosmosSender.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosSender, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 3)
    }
    if self.ethereumChainID != 0 {
      try visitor.visitSingularInt64Field(value: self.ethereumChainID, fieldNumber: 4)
    }
    if !self.ethereumReceiver.isEmpty {
      try visitor.visitSingularStringField(value: self.ethereumReceiver, fieldNumber: 5)
    }
    if !self.cethAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.cethAmount, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgBurn, rhs: Sifnode_Ethbridge_V1_MsgBurn) -> Bool {
    if lhs.cosmosSender != rhs.cosmosSender {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.symbol != rhs.symbol {return false}
    if lhs.ethereumChainID != rhs.ethereumChainID {return false}
    if lhs.ethereumReceiver != rhs.ethereumReceiver {return false}
    if lhs.cethAmount != rhs.cethAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgBurnResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBurnResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgBurnResponse, rhs: Sifnode_Ethbridge_V1_MsgBurnResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateEthBridgeClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "eth_bridge_claim"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._ethBridgeClaim) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ethBridgeClaim {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaim, rhs: Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaim) -> Bool {
    if lhs._ethBridgeClaim != rhs._ethBridgeClaim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateEthBridgeClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaimResponse, rhs: Sifnode_Ethbridge_V1_MsgCreateEthBridgeClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateWhiteListValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cosmos_sender"),
    2: .same(proto: "validator"),
    3: .standard(proto: "operation_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cosmosSender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validator) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.operationType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cosmosSender.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosSender, fieldNumber: 1)
    }
    if !self.validator.isEmpty {
      try visitor.visitSingularStringField(value: self.validator, fieldNumber: 2)
    }
    if !self.operationType.isEmpty {
      try visitor.visitSingularStringField(value: self.operationType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidator, rhs: Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidator) -> Bool {
    if lhs.cosmosSender != rhs.cosmosSender {return false}
    if lhs.validator != rhs.validator {return false}
    if lhs.operationType != rhs.operationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidatorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateWhiteListValidatorResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidatorResponse, rhs: Sifnode_Ethbridge_V1_MsgUpdateWhiteListValidatorResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateCethReceiverAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cosmos_sender"),
    2: .standard(proto: "ceth_receiver_account"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cosmosSender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cethReceiverAccount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cosmosSender.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosSender, fieldNumber: 1)
    }
    if !self.cethReceiverAccount.isEmpty {
      try visitor.visitSingularStringField(value: self.cethReceiverAccount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccount, rhs: Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccount) -> Bool {
    if lhs.cosmosSender != rhs.cosmosSender {return false}
    if lhs.cethReceiverAccount != rhs.cethReceiverAccount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccountResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUpdateCethReceiverAccountResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccountResponse, rhs: Sifnode_Ethbridge_V1_MsgUpdateCethReceiverAccountResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgRescueCeth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRescueCeth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "cosmos_sender"),
    2: .standard(proto: "cosmos_receiver"),
    3: .standard(proto: "ceth_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.cosmosSender) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.cosmosReceiver) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.cethAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cosmosSender.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosSender, fieldNumber: 1)
    }
    if !self.cosmosReceiver.isEmpty {
      try visitor.visitSingularStringField(value: self.cosmosReceiver, fieldNumber: 2)
    }
    if !self.cethAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.cethAmount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgRescueCeth, rhs: Sifnode_Ethbridge_V1_MsgRescueCeth) -> Bool {
    if lhs.cosmosSender != rhs.cosmosSender {return false}
    if lhs.cosmosReceiver != rhs.cosmosReceiver {return false}
    if lhs.cethAmount != rhs.cethAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgRescueCethResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRescueCethResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgRescueCethResponse, rhs: Sifnode_Ethbridge_V1_MsgRescueCethResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgSetBlacklist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetBlacklist"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "addresses"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.addresses) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.addresses.isEmpty {
      try visitor.visitRepeatedStringField(value: self.addresses, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgSetBlacklist, rhs: Sifnode_Ethbridge_V1_MsgSetBlacklist) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.addresses != rhs.addresses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sifnode_Ethbridge_V1_MsgSetBlacklistResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSetBlacklistResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sifnode_Ethbridge_V1_MsgSetBlacklistResponse, rhs: Sifnode_Ethbridge_V1_MsgSetBlacklistResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
