//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/shield/v1alpha1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for shield module
///
/// Usage: instantiate `Shentu_Shield_V1alpha1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Shield_V1alpha1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Shield_V1alpha1_QueryClientInterceptorFactoryProtocol? { get }

  func pool(
    _ request: Shentu_Shield_V1alpha1_QueryPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolRequest, Shentu_Shield_V1alpha1_QueryPoolResponse>

  func sponsor(
    _ request: Shentu_Shield_V1alpha1_QuerySponsorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QuerySponsorRequest, Shentu_Shield_V1alpha1_QuerySponsorResponse>

  func pools(
    _ request: Shentu_Shield_V1alpha1_QueryPoolsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolsRequest, Shentu_Shield_V1alpha1_QueryPoolsResponse>

  func poolPurchaseLists(
    _ request: Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>

  func purchaseLists(
    _ request: Shentu_Shield_V1alpha1_QueryPurchaseListsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>

  func purchaseList(
    _ request: Shentu_Shield_V1alpha1_QueryPurchaseListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchaseListRequest, Shentu_Shield_V1alpha1_QueryPurchaseListResponse>

  func purchases(
    _ request: Shentu_Shield_V1alpha1_QueryPurchasesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchasesRequest, Shentu_Shield_V1alpha1_QueryPurchasesResponse>

  func provider(
    _ request: Shentu_Shield_V1alpha1_QueryProviderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryProviderRequest, Shentu_Shield_V1alpha1_QueryProviderResponse>

  func providers(
    _ request: Shentu_Shield_V1alpha1_QueryProvidersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryProvidersRequest, Shentu_Shield_V1alpha1_QueryProvidersResponse>

  func poolParams(
    _ request: Shentu_Shield_V1alpha1_QueryPoolParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolParamsRequest, Shentu_Shield_V1alpha1_QueryPoolParamsResponse>

  func claimParams(
    _ request: Shentu_Shield_V1alpha1_QueryClaimParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryClaimParamsRequest, Shentu_Shield_V1alpha1_QueryClaimParamsResponse>

  func shieldStatus(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStatusRequest, Shentu_Shield_V1alpha1_QueryShieldStatusResponse>

  func shieldStaking(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStakingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStakingRequest, Shentu_Shield_V1alpha1_QueryShieldStakingResponse>

  func shieldStakingRate(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest, Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse>

  func reimbursement(
    _ request: Shentu_Shield_V1alpha1_QueryReimbursementRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryReimbursementRequest, Shentu_Shield_V1alpha1_QueryReimbursementResponse>

  func reimbursements(
    _ request: Shentu_Shield_V1alpha1_QueryReimbursementsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryReimbursementsRequest, Shentu_Shield_V1alpha1_QueryReimbursementsResponse>
}

extension Shentu_Shield_V1alpha1_QueryClientProtocol {
  internal var serviceName: String {
    return "shentu.shield.v1alpha1.Query"
  }

  /// Unary call to Pool
  ///
  /// - Parameters:
  ///   - request: Request to send to Pool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pool(
    _ request: Shentu_Shield_V1alpha1_QueryPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolRequest, Shentu_Shield_V1alpha1_QueryPoolResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Pool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolInterceptors() ?? []
    )
  }

  /// Unary call to Sponsor
  ///
  /// - Parameters:
  ///   - request: Request to send to Sponsor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sponsor(
    _ request: Shentu_Shield_V1alpha1_QuerySponsorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QuerySponsorRequest, Shentu_Shield_V1alpha1_QuerySponsorResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Sponsor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSponsorInterceptors() ?? []
    )
  }

  /// Unary call to Pools
  ///
  /// - Parameters:
  ///   - request: Request to send to Pools.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pools(
    _ request: Shentu_Shield_V1alpha1_QueryPoolsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolsRequest, Shentu_Shield_V1alpha1_QueryPoolsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Pools",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolsInterceptors() ?? []
    )
  }

  /// Unary call to PoolPurchaseLists
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolPurchaseLists.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolPurchaseLists(
    _ request: Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/PoolPurchaseLists",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolPurchaseListsInterceptors() ?? []
    )
  }

  /// Unary call to PurchaseLists
  ///
  /// - Parameters:
  ///   - request: Request to send to PurchaseLists.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func purchaseLists(
    _ request: Shentu_Shield_V1alpha1_QueryPurchaseListsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/PurchaseLists",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseListsInterceptors() ?? []
    )
  }

  /// Unary call to PurchaseList
  ///
  /// - Parameters:
  ///   - request: Request to send to PurchaseList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func purchaseList(
    _ request: Shentu_Shield_V1alpha1_QueryPurchaseListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchaseListRequest, Shentu_Shield_V1alpha1_QueryPurchaseListResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/PurchaseList",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseListInterceptors() ?? []
    )
  }

  /// Unary call to Purchases
  ///
  /// - Parameters:
  ///   - request: Request to send to Purchases.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func purchases(
    _ request: Shentu_Shield_V1alpha1_QueryPurchasesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPurchasesRequest, Shentu_Shield_V1alpha1_QueryPurchasesResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Purchases",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchasesInterceptors() ?? []
    )
  }

  /// Unary call to Provider
  ///
  /// - Parameters:
  ///   - request: Request to send to Provider.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func provider(
    _ request: Shentu_Shield_V1alpha1_QueryProviderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryProviderRequest, Shentu_Shield_V1alpha1_QueryProviderResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Provider",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProviderInterceptors() ?? []
    )
  }

  /// Unary call to Providers
  ///
  /// - Parameters:
  ///   - request: Request to send to Providers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func providers(
    _ request: Shentu_Shield_V1alpha1_QueryProvidersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryProvidersRequest, Shentu_Shield_V1alpha1_QueryProvidersResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Providers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProvidersInterceptors() ?? []
    )
  }

  /// Unary call to PoolParams
  ///
  /// - Parameters:
  ///   - request: Request to send to PoolParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func poolParams(
    _ request: Shentu_Shield_V1alpha1_QueryPoolParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryPoolParamsRequest, Shentu_Shield_V1alpha1_QueryPoolParamsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/PoolParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePoolParamsInterceptors() ?? []
    )
  }

  /// Unary call to ClaimParams
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimParams(
    _ request: Shentu_Shield_V1alpha1_QueryClaimParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryClaimParamsRequest, Shentu_Shield_V1alpha1_QueryClaimParamsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/ClaimParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimParamsInterceptors() ?? []
    )
  }

  /// Unary call to ShieldStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ShieldStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shieldStatus(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStatusRequest, Shentu_Shield_V1alpha1_QueryShieldStatusResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/ShieldStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShieldStatusInterceptors() ?? []
    )
  }

  /// Unary call to ShieldStaking
  ///
  /// - Parameters:
  ///   - request: Request to send to ShieldStaking.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shieldStaking(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStakingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStakingRequest, Shentu_Shield_V1alpha1_QueryShieldStakingResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/ShieldStaking",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShieldStakingInterceptors() ?? []
    )
  }

  /// Unary call to ShieldStakingRate
  ///
  /// - Parameters:
  ///   - request: Request to send to ShieldStakingRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func shieldStakingRate(
    _ request: Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest, Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/ShieldStakingRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeShieldStakingRateInterceptors() ?? []
    )
  }

  /// Unary call to Reimbursement
  ///
  /// - Parameters:
  ///   - request: Request to send to Reimbursement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reimbursement(
    _ request: Shentu_Shield_V1alpha1_QueryReimbursementRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryReimbursementRequest, Shentu_Shield_V1alpha1_QueryReimbursementResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Reimbursement",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReimbursementInterceptors() ?? []
    )
  }

  /// Unary call to Reimbursements
  ///
  /// - Parameters:
  ///   - request: Request to send to Reimbursements.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reimbursements(
    _ request: Shentu_Shield_V1alpha1_QueryReimbursementsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_QueryReimbursementsRequest, Shentu_Shield_V1alpha1_QueryReimbursementsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Query/Reimbursements",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReimbursementsInterceptors() ?? []
    )
  }
}

internal protocol Shentu_Shield_V1alpha1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'pool'.
  func makePoolInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPoolRequest, Shentu_Shield_V1alpha1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when invoking 'sponsor'.
  func makeSponsorInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QuerySponsorRequest, Shentu_Shield_V1alpha1_QuerySponsorResponse>]

  /// - Returns: Interceptors to use when invoking 'pools'.
  func makePoolsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPoolsRequest, Shentu_Shield_V1alpha1_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when invoking 'poolPurchaseLists'.
  func makePoolPurchaseListsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>]

  /// - Returns: Interceptors to use when invoking 'purchaseLists'.
  func makePurchaseListsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>]

  /// - Returns: Interceptors to use when invoking 'purchaseList'.
  func makePurchaseListInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPurchaseListRequest, Shentu_Shield_V1alpha1_QueryPurchaseListResponse>]

  /// - Returns: Interceptors to use when invoking 'purchases'.
  func makePurchasesInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPurchasesRequest, Shentu_Shield_V1alpha1_QueryPurchasesResponse>]

  /// - Returns: Interceptors to use when invoking 'provider'.
  func makeProviderInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryProviderRequest, Shentu_Shield_V1alpha1_QueryProviderResponse>]

  /// - Returns: Interceptors to use when invoking 'providers'.
  func makeProvidersInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryProvidersRequest, Shentu_Shield_V1alpha1_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when invoking 'poolParams'.
  func makePoolParamsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryPoolParamsRequest, Shentu_Shield_V1alpha1_QueryPoolParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimParams'.
  func makeClaimParamsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryClaimParamsRequest, Shentu_Shield_V1alpha1_QueryClaimParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'shieldStatus'.
  func makeShieldStatusInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryShieldStatusRequest, Shentu_Shield_V1alpha1_QueryShieldStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'shieldStaking'.
  func makeShieldStakingInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryShieldStakingRequest, Shentu_Shield_V1alpha1_QueryShieldStakingResponse>]

  /// - Returns: Interceptors to use when invoking 'shieldStakingRate'.
  func makeShieldStakingRateInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest, Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse>]

  /// - Returns: Interceptors to use when invoking 'reimbursement'.
  func makeReimbursementInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryReimbursementRequest, Shentu_Shield_V1alpha1_QueryReimbursementResponse>]

  /// - Returns: Interceptors to use when invoking 'reimbursements'.
  func makeReimbursementsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_QueryReimbursementsRequest, Shentu_Shield_V1alpha1_QueryReimbursementsResponse>]
}

internal final class Shentu_Shield_V1alpha1_QueryClient: Shentu_Shield_V1alpha1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Shield_V1alpha1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.shield.v1alpha1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Shield_V1alpha1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for shield module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Shield_V1alpha1_QueryProvider: CallHandlerProvider {
  var interceptors: Shentu_Shield_V1alpha1_QueryServerInterceptorFactoryProtocol? { get }

  func pool(request: Shentu_Shield_V1alpha1_QueryPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPoolResponse>

  func sponsor(request: Shentu_Shield_V1alpha1_QuerySponsorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QuerySponsorResponse>

  func pools(request: Shentu_Shield_V1alpha1_QueryPoolsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPoolsResponse>

  func poolPurchaseLists(request: Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>

  func purchaseLists(request: Shentu_Shield_V1alpha1_QueryPurchaseListsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>

  func purchaseList(request: Shentu_Shield_V1alpha1_QueryPurchaseListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPurchaseListResponse>

  func purchases(request: Shentu_Shield_V1alpha1_QueryPurchasesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPurchasesResponse>

  func provider(request: Shentu_Shield_V1alpha1_QueryProviderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryProviderResponse>

  func providers(request: Shentu_Shield_V1alpha1_QueryProvidersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryProvidersResponse>

  func poolParams(request: Shentu_Shield_V1alpha1_QueryPoolParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryPoolParamsResponse>

  func claimParams(request: Shentu_Shield_V1alpha1_QueryClaimParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryClaimParamsResponse>

  func shieldStatus(request: Shentu_Shield_V1alpha1_QueryShieldStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryShieldStatusResponse>

  func shieldStaking(request: Shentu_Shield_V1alpha1_QueryShieldStakingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryShieldStakingResponse>

  func shieldStakingRate(request: Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse>

  func reimbursement(request: Shentu_Shield_V1alpha1_QueryReimbursementRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryReimbursementResponse>

  func reimbursements(request: Shentu_Shield_V1alpha1_QueryReimbursementsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_QueryReimbursementsResponse>
}

extension Shentu_Shield_V1alpha1_QueryProvider {
  internal var serviceName: Substring { return "shentu.shield.v1alpha1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Pool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPoolRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPoolResponse>(),
        interceptors: self.interceptors?.makePoolInterceptors() ?? [],
        userFunction: self.pool(request:context:)
      )

    case "Sponsor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QuerySponsorRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QuerySponsorResponse>(),
        interceptors: self.interceptors?.makeSponsorInterceptors() ?? [],
        userFunction: self.sponsor(request:context:)
      )

    case "Pools":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPoolsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPoolsResponse>(),
        interceptors: self.interceptors?.makePoolsInterceptors() ?? [],
        userFunction: self.pools(request:context:)
      )

    case "PoolPurchaseLists":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>(),
        interceptors: self.interceptors?.makePoolPurchaseListsInterceptors() ?? [],
        userFunction: self.poolPurchaseLists(request:context:)
      )

    case "PurchaseLists":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPurchaseListsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>(),
        interceptors: self.interceptors?.makePurchaseListsInterceptors() ?? [],
        userFunction: self.purchaseLists(request:context:)
      )

    case "PurchaseList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPurchaseListRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPurchaseListResponse>(),
        interceptors: self.interceptors?.makePurchaseListInterceptors() ?? [],
        userFunction: self.purchaseList(request:context:)
      )

    case "Purchases":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPurchasesRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPurchasesResponse>(),
        interceptors: self.interceptors?.makePurchasesInterceptors() ?? [],
        userFunction: self.purchases(request:context:)
      )

    case "Provider":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryProviderRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryProviderResponse>(),
        interceptors: self.interceptors?.makeProviderInterceptors() ?? [],
        userFunction: self.provider(request:context:)
      )

    case "Providers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryProvidersRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryProvidersResponse>(),
        interceptors: self.interceptors?.makeProvidersInterceptors() ?? [],
        userFunction: self.providers(request:context:)
      )

    case "PoolParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryPoolParamsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryPoolParamsResponse>(),
        interceptors: self.interceptors?.makePoolParamsInterceptors() ?? [],
        userFunction: self.poolParams(request:context:)
      )

    case "ClaimParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryClaimParamsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryClaimParamsResponse>(),
        interceptors: self.interceptors?.makeClaimParamsInterceptors() ?? [],
        userFunction: self.claimParams(request:context:)
      )

    case "ShieldStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryShieldStatusRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryShieldStatusResponse>(),
        interceptors: self.interceptors?.makeShieldStatusInterceptors() ?? [],
        userFunction: self.shieldStatus(request:context:)
      )

    case "ShieldStaking":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryShieldStakingRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryShieldStakingResponse>(),
        interceptors: self.interceptors?.makeShieldStakingInterceptors() ?? [],
        userFunction: self.shieldStaking(request:context:)
      )

    case "ShieldStakingRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse>(),
        interceptors: self.interceptors?.makeShieldStakingRateInterceptors() ?? [],
        userFunction: self.shieldStakingRate(request:context:)
      )

    case "Reimbursement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryReimbursementRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryReimbursementResponse>(),
        interceptors: self.interceptors?.makeReimbursementInterceptors() ?? [],
        userFunction: self.reimbursement(request:context:)
      )

    case "Reimbursements":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_QueryReimbursementsRequest>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_QueryReimbursementsResponse>(),
        interceptors: self.interceptors?.makeReimbursementsInterceptors() ?? [],
        userFunction: self.reimbursements(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Shield_V1alpha1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'pool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPoolRequest, Shentu_Shield_V1alpha1_QueryPoolResponse>]

  /// - Returns: Interceptors to use when handling 'sponsor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSponsorInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QuerySponsorRequest, Shentu_Shield_V1alpha1_QuerySponsorResponse>]

  /// - Returns: Interceptors to use when handling 'pools'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPoolsRequest, Shentu_Shield_V1alpha1_QueryPoolsResponse>]

  /// - Returns: Interceptors to use when handling 'poolPurchaseLists'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolPurchaseListsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPoolPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>]

  /// - Returns: Interceptors to use when handling 'purchaseLists'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePurchaseListsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPurchaseListsRequest, Shentu_Shield_V1alpha1_QueryPurchaseListsResponse>]

  /// - Returns: Interceptors to use when handling 'purchaseList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePurchaseListInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPurchaseListRequest, Shentu_Shield_V1alpha1_QueryPurchaseListResponse>]

  /// - Returns: Interceptors to use when handling 'purchases'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePurchasesInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPurchasesRequest, Shentu_Shield_V1alpha1_QueryPurchasesResponse>]

  /// - Returns: Interceptors to use when handling 'provider'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProviderInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryProviderRequest, Shentu_Shield_V1alpha1_QueryProviderResponse>]

  /// - Returns: Interceptors to use when handling 'providers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProvidersInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryProvidersRequest, Shentu_Shield_V1alpha1_QueryProvidersResponse>]

  /// - Returns: Interceptors to use when handling 'poolParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePoolParamsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryPoolParamsRequest, Shentu_Shield_V1alpha1_QueryPoolParamsResponse>]

  /// - Returns: Interceptors to use when handling 'claimParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimParamsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryClaimParamsRequest, Shentu_Shield_V1alpha1_QueryClaimParamsResponse>]

  /// - Returns: Interceptors to use when handling 'shieldStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShieldStatusInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryShieldStatusRequest, Shentu_Shield_V1alpha1_QueryShieldStatusResponse>]

  /// - Returns: Interceptors to use when handling 'shieldStaking'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShieldStakingInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryShieldStakingRequest, Shentu_Shield_V1alpha1_QueryShieldStakingResponse>]

  /// - Returns: Interceptors to use when handling 'shieldStakingRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeShieldStakingRateInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryShieldStakingRateRequest, Shentu_Shield_V1alpha1_QueryShieldStakingRateResponse>]

  /// - Returns: Interceptors to use when handling 'reimbursement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReimbursementInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryReimbursementRequest, Shentu_Shield_V1alpha1_QueryReimbursementResponse>]

  /// - Returns: Interceptors to use when handling 'reimbursements'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReimbursementsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_QueryReimbursementsRequest, Shentu_Shield_V1alpha1_QueryReimbursementsResponse>]
}
