//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/marker/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for marker module.
///
/// Usage: instantiate `Provenance_Marker_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Marker_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Marker_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Provenance_Marker_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryParamsRequest, Provenance_Marker_V1_QueryParamsResponse>

  func allMarkers(
    _ request: Provenance_Marker_V1_QueryAllMarkersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryAllMarkersRequest, Provenance_Marker_V1_QueryAllMarkersResponse>

  func marker(
    _ request: Provenance_Marker_V1_QueryMarkerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryMarkerRequest, Provenance_Marker_V1_QueryMarkerResponse>

  func holding(
    _ request: Provenance_Marker_V1_QueryHoldingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryHoldingRequest, Provenance_Marker_V1_QueryHoldingResponse>

  func supply(
    _ request: Provenance_Marker_V1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QuerySupplyRequest, Provenance_Marker_V1_QuerySupplyResponse>

  func escrow(
    _ request: Provenance_Marker_V1_QueryEscrowRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryEscrowRequest, Provenance_Marker_V1_QueryEscrowResponse>

  func access(
    _ request: Provenance_Marker_V1_QueryAccessRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryAccessRequest, Provenance_Marker_V1_QueryAccessResponse>

  func denomMetadata(
    _ request: Provenance_Marker_V1_QueryDenomMetadataRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Marker_V1_QueryDenomMetadataRequest, Provenance_Marker_V1_QueryDenomMetadataResponse>
}

extension Provenance_Marker_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "provenance.marker.v1.Query"
  }

  /// Params queries the parameters of x/bank module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Provenance_Marker_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryParamsRequest, Provenance_Marker_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Returns a list of all markers on the blockchain
  ///
  /// - Parameters:
  ///   - request: Request to send to AllMarkers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allMarkers(
    _ request: Provenance_Marker_V1_QueryAllMarkersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryAllMarkersRequest, Provenance_Marker_V1_QueryAllMarkersResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/AllMarkers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllMarkersInterceptors() ?? []
    )
  }

  /// query for a single marker by denom or address
  ///
  /// - Parameters:
  ///   - request: Request to send to Marker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func marker(
    _ request: Provenance_Marker_V1_QueryMarkerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryMarkerRequest, Provenance_Marker_V1_QueryMarkerResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Marker",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMarkerInterceptors() ?? []
    )
  }

  /// query for all accounts holding the given marker coins
  ///
  /// - Parameters:
  ///   - request: Request to send to Holding.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func holding(
    _ request: Provenance_Marker_V1_QueryHoldingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryHoldingRequest, Provenance_Marker_V1_QueryHoldingResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Holding",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHoldingInterceptors() ?? []
    )
  }

  /// query for supply of coin on a marker account
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Provenance_Marker_V1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QuerySupplyRequest, Provenance_Marker_V1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Supply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// query for coins on a marker account
  ///
  /// - Parameters:
  ///   - request: Request to send to Escrow.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func escrow(
    _ request: Provenance_Marker_V1_QueryEscrowRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryEscrowRequest, Provenance_Marker_V1_QueryEscrowResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Escrow",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEscrowInterceptors() ?? []
    )
  }

  /// query for access records on an account
  ///
  /// - Parameters:
  ///   - request: Request to send to Access.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func access(
    _ request: Provenance_Marker_V1_QueryAccessRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryAccessRequest, Provenance_Marker_V1_QueryAccessResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/Access",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccessInterceptors() ?? []
    )
  }

  /// query for access records on an account
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomMetadata(
    _ request: Provenance_Marker_V1_QueryDenomMetadataRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Marker_V1_QueryDenomMetadataRequest, Provenance_Marker_V1_QueryDenomMetadataResponse> {
    return self.makeUnaryCall(
      path: "/provenance.marker.v1.Query/DenomMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Marker_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryParamsRequest, Provenance_Marker_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'allMarkers'.
  func makeAllMarkersInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryAllMarkersRequest, Provenance_Marker_V1_QueryAllMarkersResponse>]

  /// - Returns: Interceptors to use when invoking 'marker'.
  func makeMarkerInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryMarkerRequest, Provenance_Marker_V1_QueryMarkerResponse>]

  /// - Returns: Interceptors to use when invoking 'holding'.
  func makeHoldingInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryHoldingRequest, Provenance_Marker_V1_QueryHoldingResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QuerySupplyRequest, Provenance_Marker_V1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'escrow'.
  func makeEscrowInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryEscrowRequest, Provenance_Marker_V1_QueryEscrowResponse>]

  /// - Returns: Interceptors to use when invoking 'access'.
  func makeAccessInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryAccessRequest, Provenance_Marker_V1_QueryAccessResponse>]

  /// - Returns: Interceptors to use when invoking 'denomMetadata'.
  func makeDenomMetadataInterceptors() -> [ClientInterceptor<Provenance_Marker_V1_QueryDenomMetadataRequest, Provenance_Marker_V1_QueryDenomMetadataResponse>]
}

internal final class Provenance_Marker_V1_QueryClient: Provenance_Marker_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Marker_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.marker.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Marker_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for marker module.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Provenance_Marker_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Provenance_Marker_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries the parameters of x/bank module.
  func params(request: Provenance_Marker_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryParamsResponse>

  /// Returns a list of all markers on the blockchain
  func allMarkers(request: Provenance_Marker_V1_QueryAllMarkersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryAllMarkersResponse>

  /// query for a single marker by denom or address
  func marker(request: Provenance_Marker_V1_QueryMarkerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryMarkerResponse>

  /// query for all accounts holding the given marker coins
  func holding(request: Provenance_Marker_V1_QueryHoldingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryHoldingResponse>

  /// query for supply of coin on a marker account
  func supply(request: Provenance_Marker_V1_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QuerySupplyResponse>

  /// query for coins on a marker account
  func escrow(request: Provenance_Marker_V1_QueryEscrowRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryEscrowResponse>

  /// query for access records on an account
  func access(request: Provenance_Marker_V1_QueryAccessRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryAccessResponse>

  /// query for access records on an account
  func denomMetadata(request: Provenance_Marker_V1_QueryDenomMetadataRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Provenance_Marker_V1_QueryDenomMetadataResponse>
}

extension Provenance_Marker_V1_QueryProvider {
  internal var serviceName: Substring { return "provenance.marker.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "AllMarkers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryAllMarkersRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryAllMarkersResponse>(),
        interceptors: self.interceptors?.makeAllMarkersInterceptors() ?? [],
        userFunction: self.allMarkers(request:context:)
      )

    case "Marker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryMarkerRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryMarkerResponse>(),
        interceptors: self.interceptors?.makeMarkerInterceptors() ?? [],
        userFunction: self.marker(request:context:)
      )

    case "Holding":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryHoldingRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryHoldingResponse>(),
        interceptors: self.interceptors?.makeHoldingInterceptors() ?? [],
        userFunction: self.holding(request:context:)
      )

    case "Supply":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QuerySupplyRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QuerySupplyResponse>(),
        interceptors: self.interceptors?.makeSupplyInterceptors() ?? [],
        userFunction: self.supply(request:context:)
      )

    case "Escrow":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryEscrowRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryEscrowResponse>(),
        interceptors: self.interceptors?.makeEscrowInterceptors() ?? [],
        userFunction: self.escrow(request:context:)
      )

    case "Access":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryAccessRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryAccessResponse>(),
        interceptors: self.interceptors?.makeAccessInterceptors() ?? [],
        userFunction: self.access(request:context:)
      )

    case "DenomMetadata":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Provenance_Marker_V1_QueryDenomMetadataRequest>(),
        responseSerializer: ProtobufSerializer<Provenance_Marker_V1_QueryDenomMetadataResponse>(),
        interceptors: self.interceptors?.makeDenomMetadataInterceptors() ?? [],
        userFunction: self.denomMetadata(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Provenance_Marker_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryParamsRequest, Provenance_Marker_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'allMarkers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllMarkersInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryAllMarkersRequest, Provenance_Marker_V1_QueryAllMarkersResponse>]

  /// - Returns: Interceptors to use when handling 'marker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMarkerInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryMarkerRequest, Provenance_Marker_V1_QueryMarkerResponse>]

  /// - Returns: Interceptors to use when handling 'holding'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHoldingInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryHoldingRequest, Provenance_Marker_V1_QueryHoldingResponse>]

  /// - Returns: Interceptors to use when handling 'supply'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplyInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QuerySupplyRequest, Provenance_Marker_V1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when handling 'escrow'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEscrowInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryEscrowRequest, Provenance_Marker_V1_QueryEscrowResponse>]

  /// - Returns: Interceptors to use when handling 'access'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccessInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryAccessRequest, Provenance_Marker_V1_QueryAccessResponse>]

  /// - Returns: Interceptors to use when handling 'denomMetadata'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomMetadataInterceptors() -> [ServerInterceptor<Provenance_Marker_V1_QueryDenomMetadataRequest, Provenance_Marker_V1_QueryDenomMetadataResponse>]
}
