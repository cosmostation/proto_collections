//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/oracle/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Umeenetwork_Umee_Oracle_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Umeenetwork_Umee_Oracle_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umeenetwork_Umee_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func exchangeRate(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse>

  func exchangeRates(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse>

  func tobinTax(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse>

  func tobinTaxes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse>

  func actives(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse>

  func voteTargets(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse>

  func feederDelegation(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse>

  func missCounter(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse>

  func aggregatePrevote(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse>

  func aggregatePrevotes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse>

  func aggregateVote(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse>

  func aggregateVotes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse>

  func params(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse>
}

extension Umeenetwork_Umee_Oracle_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "umeenetwork.umee.oracle.v1beta1.Query"
  }

  /// ExchangeRate returns exchange rate of a denom
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeRate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeRate(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/ExchangeRate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? []
    )
  }

  /// ExchangeRates returns exchange rates of all denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeRates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeRates(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/ExchangeRates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeRatesInterceptors() ?? []
    )
  }

  /// TobinTax returns tobin tax of a denom
  ///
  /// - Parameters:
  ///   - request: Request to send to TobinTax.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tobinTax(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/TobinTax",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTobinTaxInterceptors() ?? []
    )
  }

  /// TobinTaxes returns tobin taxes of all denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to TobinTaxes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tobinTaxes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/TobinTaxes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTobinTaxesInterceptors() ?? []
    )
  }

  /// Actives returns all active denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to Actives.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func actives(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/Actives",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeActivesInterceptors() ?? []
    )
  }

  /// VoteTargets returns all vote target denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteTargets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteTargets(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/VoteTargets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteTargetsInterceptors() ?? []
    )
  }

  /// FeederDelegation returns feeder delegation of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to FeederDelegation.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feederDelegation(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/FeederDelegation",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? []
    )
  }

  /// MissCounter returns oracle miss counter of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to MissCounter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func missCounter(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/MissCounter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMissCounterInterceptors() ?? []
    )
  }

  /// AggregatePrevote returns an aggregate prevote of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregatePrevote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregatePrevote(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/AggregatePrevote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? []
    )
  }

  /// AggregatePrevotes returns aggregate prevotes of all validators
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregatePrevotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregatePrevotes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/AggregatePrevotes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? []
    )
  }

  /// AggregateVote returns an aggregate vote of a validator
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVote(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/AggregateVote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? []
    )
  }

  /// AggregateVotes returns aggregate votes of all validators
  ///
  /// - Parameters:
  ///   - request: Request to send to AggregateVotes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func aggregateVotes(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/AggregateVotes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? []
    )
  }

  /// Params queries all parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.oracle.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Umeenetwork_Umee_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'exchangeRate'.
  func makeExchangeRateInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeRates'.
  func makeExchangeRatesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse>]

  /// - Returns: Interceptors to use when invoking 'tobinTax'.
  func makeTobinTaxInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse>]

  /// - Returns: Interceptors to use when invoking 'tobinTaxes'.
  func makeTobinTaxesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse>]

  /// - Returns: Interceptors to use when invoking 'actives'.
  func makeActivesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse>]

  /// - Returns: Interceptors to use when invoking 'voteTargets'.
  func makeVoteTargetsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse>]

  /// - Returns: Interceptors to use when invoking 'feederDelegation'.
  func makeFeederDelegationInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse>]

  /// - Returns: Interceptors to use when invoking 'missCounter'.
  func makeMissCounterInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregatePrevote'.
  func makeAggregatePrevoteInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregatePrevotes'.
  func makeAggregatePrevotesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVote'.
  func makeAggregateVoteInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'aggregateVotes'.
  func makeAggregateVotesInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse>]
}

internal final class Umeenetwork_Umee_Oracle_V1beta1_QueryClient: Umeenetwork_Umee_Oracle_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umeenetwork_Umee_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the umeenetwork.umee.oracle.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umeenetwork_Umee_Oracle_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umeenetwork_Umee_Oracle_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Umeenetwork_Umee_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// ExchangeRate returns exchange rate of a denom
  func exchangeRate(request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse>

  /// ExchangeRates returns exchange rates of all denoms
  func exchangeRates(request: Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse>

  /// TobinTax returns tobin tax of a denom
  func tobinTax(request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse>

  /// TobinTaxes returns tobin taxes of all denoms
  func tobinTaxes(request: Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse>

  /// Actives returns all active denoms
  func actives(request: Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse>

  /// VoteTargets returns all vote target denoms
  func voteTargets(request: Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse>

  /// FeederDelegation returns feeder delegation of a validator
  func feederDelegation(request: Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse>

  /// MissCounter returns oracle miss counter of a validator
  func missCounter(request: Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse>

  /// AggregatePrevote returns an aggregate prevote of a validator
  func aggregatePrevote(request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse>

  /// AggregatePrevotes returns aggregate prevotes of all validators
  func aggregatePrevotes(request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse>

  /// AggregateVote returns an aggregate vote of a validator
  func aggregateVote(request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse>

  /// AggregateVotes returns aggregate votes of all validators
  func aggregateVotes(request: Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse>

  /// Params queries all parameters.
  func params(request: Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse>
}

extension Umeenetwork_Umee_Oracle_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "umeenetwork.umee.oracle.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ExchangeRate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse>(),
        interceptors: self.interceptors?.makeExchangeRateInterceptors() ?? [],
        userFunction: self.exchangeRate(request:context:)
      )

    case "ExchangeRates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse>(),
        interceptors: self.interceptors?.makeExchangeRatesInterceptors() ?? [],
        userFunction: self.exchangeRates(request:context:)
      )

    case "TobinTax":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse>(),
        interceptors: self.interceptors?.makeTobinTaxInterceptors() ?? [],
        userFunction: self.tobinTax(request:context:)
      )

    case "TobinTaxes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse>(),
        interceptors: self.interceptors?.makeTobinTaxesInterceptors() ?? [],
        userFunction: self.tobinTaxes(request:context:)
      )

    case "Actives":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse>(),
        interceptors: self.interceptors?.makeActivesInterceptors() ?? [],
        userFunction: self.actives(request:context:)
      )

    case "VoteTargets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse>(),
        interceptors: self.interceptors?.makeVoteTargetsInterceptors() ?? [],
        userFunction: self.voteTargets(request:context:)
      )

    case "FeederDelegation":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse>(),
        interceptors: self.interceptors?.makeFeederDelegationInterceptors() ?? [],
        userFunction: self.feederDelegation(request:context:)
      )

    case "MissCounter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse>(),
        interceptors: self.interceptors?.makeMissCounterInterceptors() ?? [],
        userFunction: self.missCounter(request:context:)
      )

    case "AggregatePrevote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevoteInterceptors() ?? [],
        userFunction: self.aggregatePrevote(request:context:)
      )

    case "AggregatePrevotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse>(),
        interceptors: self.interceptors?.makeAggregatePrevotesInterceptors() ?? [],
        userFunction: self.aggregatePrevotes(request:context:)
      )

    case "AggregateVote":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse>(),
        interceptors: self.interceptors?.makeAggregateVoteInterceptors() ?? [],
        userFunction: self.aggregateVote(request:context:)
      )

    case "AggregateVotes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse>(),
        interceptors: self.interceptors?.makeAggregateVotesInterceptors() ?? [],
        userFunction: self.aggregateVotes(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umeenetwork_Umee_Oracle_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'exchangeRate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeRateInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRateResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeRates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeRatesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryExchangeRatesResponse>]

  /// - Returns: Interceptors to use when handling 'tobinTax'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTobinTaxInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxResponse>]

  /// - Returns: Interceptors to use when handling 'tobinTaxes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTobinTaxesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryTobinTaxesResponse>]

  /// - Returns: Interceptors to use when handling 'actives'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeActivesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryActivesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryActivesResponse>]

  /// - Returns: Interceptors to use when handling 'voteTargets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteTargetsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryVoteTargetsResponse>]

  /// - Returns: Interceptors to use when handling 'feederDelegation'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeederDelegationInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryFeederDelegationResponse>]

  /// - Returns: Interceptors to use when handling 'missCounter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMissCounterInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryMissCounterResponse>]

  /// - Returns: Interceptors to use when handling 'aggregatePrevote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregatePrevoteInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevoteResponse>]

  /// - Returns: Interceptors to use when handling 'aggregatePrevotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregatePrevotesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregatePrevotesResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVote'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVoteInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVoteResponse>]

  /// - Returns: Interceptors to use when handling 'aggregateVotes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAggregateVotesInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryAggregateVotesResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Oracle_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Oracle_V1beta1_QueryParamsResponse>]
}
