//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: desmos/posts/v1beta1/msgs.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the relationships Msg service.
///
/// Usage: instantiate `Desmos_Posts_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Desmos_Posts_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Desmos_Posts_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createPost(
    _ request: Desmos_Posts_V1beta1_MsgCreatePost,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgCreatePost, Desmos_Posts_V1beta1_MsgCreatePostResponse>

  func editPost(
    _ request: Desmos_Posts_V1beta1_MsgEditPost,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgEditPost, Desmos_Posts_V1beta1_MsgEditPostResponse>

  func reportPost(
    _ request: Desmos_Posts_V1beta1_MsgReportPost,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgReportPost, Desmos_Posts_V1beta1_MsgReportPostResponse>

  func addPostReaction(
    _ request: Desmos_Posts_V1beta1_MsgAddPostReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgAddPostReaction, Desmos_Posts_V1beta1_MsgAddPostReactionResponse>

  func removePostReaction(
    _ request: Desmos_Posts_V1beta1_MsgRemovePostReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgRemovePostReaction, Desmos_Posts_V1beta1_MsgRemovePostReactionResponse>

  func registerReaction(
    _ request: Desmos_Posts_V1beta1_MsgRegisterReaction,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgRegisterReaction, Desmos_Posts_V1beta1_MsgRegisterReactionResponse>

  func answerPoll(
    _ request: Desmos_Posts_V1beta1_MsgAnswerPoll,
    callOptions: CallOptions?
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgAnswerPoll, Desmos_Posts_V1beta1_MsgAnswerPollResponse>
}

extension Desmos_Posts_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "desmos.posts.v1beta1.Msg"
  }

  /// CreatePost defines the method to create a post
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePost.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPost(
    _ request: Desmos_Posts_V1beta1_MsgCreatePost,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgCreatePost, Desmos_Posts_V1beta1_MsgCreatePostResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/CreatePost",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePostInterceptors() ?? []
    )
  }

  /// EditPost defines the method to edit an existing post
  ///
  /// - Parameters:
  ///   - request: Request to send to EditPost.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editPost(
    _ request: Desmos_Posts_V1beta1_MsgEditPost,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgEditPost, Desmos_Posts_V1beta1_MsgEditPostResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/EditPost",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditPostInterceptors() ?? []
    )
  }

  /// ReportPost defines a method for creating a new post report
  ///
  /// - Parameters:
  ///   - request: Request to send to ReportPost.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reportPost(
    _ request: Desmos_Posts_V1beta1_MsgReportPost,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgReportPost, Desmos_Posts_V1beta1_MsgReportPostResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/ReportPost",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReportPostInterceptors() ?? []
    )
  }

  /// AddReaction defines the method to add a reaction to a post
  ///
  /// - Parameters:
  ///   - request: Request to send to AddPostReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addPostReaction(
    _ request: Desmos_Posts_V1beta1_MsgAddPostReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgAddPostReaction, Desmos_Posts_V1beta1_MsgAddPostReactionResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/AddPostReaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddPostReactionInterceptors() ?? []
    )
  }

  /// RemoveReaction defines the method to remove a reaction from a post
  ///
  /// - Parameters:
  ///   - request: Request to send to RemovePostReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removePostReaction(
    _ request: Desmos_Posts_V1beta1_MsgRemovePostReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgRemovePostReaction, Desmos_Posts_V1beta1_MsgRemovePostReactionResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/RemovePostReaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemovePostReactionInterceptors() ?? []
    )
  }

  /// RegisterReaction defines the method to register a new reaction
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterReaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerReaction(
    _ request: Desmos_Posts_V1beta1_MsgRegisterReaction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgRegisterReaction, Desmos_Posts_V1beta1_MsgRegisterReactionResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/RegisterReaction",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterReactionInterceptors() ?? []
    )
  }

  /// AnswerPoll defines the method to answer a poll
  ///
  /// - Parameters:
  ///   - request: Request to send to AnswerPoll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func answerPoll(
    _ request: Desmos_Posts_V1beta1_MsgAnswerPoll,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Desmos_Posts_V1beta1_MsgAnswerPoll, Desmos_Posts_V1beta1_MsgAnswerPollResponse> {
    return self.makeUnaryCall(
      path: "/desmos.posts.v1beta1.Msg/AnswerPoll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAnswerPollInterceptors() ?? []
    )
  }
}

internal protocol Desmos_Posts_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createPost'.
  func makeCreatePostInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgCreatePost, Desmos_Posts_V1beta1_MsgCreatePostResponse>]

  /// - Returns: Interceptors to use when invoking 'editPost'.
  func makeEditPostInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgEditPost, Desmos_Posts_V1beta1_MsgEditPostResponse>]

  /// - Returns: Interceptors to use when invoking 'reportPost'.
  func makeReportPostInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgReportPost, Desmos_Posts_V1beta1_MsgReportPostResponse>]

  /// - Returns: Interceptors to use when invoking 'addPostReaction'.
  func makeAddPostReactionInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgAddPostReaction, Desmos_Posts_V1beta1_MsgAddPostReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'removePostReaction'.
  func makeRemovePostReactionInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgRemovePostReaction, Desmos_Posts_V1beta1_MsgRemovePostReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'registerReaction'.
  func makeRegisterReactionInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgRegisterReaction, Desmos_Posts_V1beta1_MsgRegisterReactionResponse>]

  /// - Returns: Interceptors to use when invoking 'answerPoll'.
  func makeAnswerPollInterceptors() -> [ClientInterceptor<Desmos_Posts_V1beta1_MsgAnswerPoll, Desmos_Posts_V1beta1_MsgAnswerPollResponse>]
}

internal final class Desmos_Posts_V1beta1_MsgClient: Desmos_Posts_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Desmos_Posts_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the desmos.posts.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Desmos_Posts_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the relationships Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Desmos_Posts_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Desmos_Posts_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreatePost defines the method to create a post
  func createPost(request: Desmos_Posts_V1beta1_MsgCreatePost, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgCreatePostResponse>

  /// EditPost defines the method to edit an existing post
  func editPost(request: Desmos_Posts_V1beta1_MsgEditPost, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgEditPostResponse>

  /// ReportPost defines a method for creating a new post report
  func reportPost(request: Desmos_Posts_V1beta1_MsgReportPost, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgReportPostResponse>

  /// AddReaction defines the method to add a reaction to a post
  func addPostReaction(request: Desmos_Posts_V1beta1_MsgAddPostReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgAddPostReactionResponse>

  /// RemoveReaction defines the method to remove a reaction from a post
  func removePostReaction(request: Desmos_Posts_V1beta1_MsgRemovePostReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgRemovePostReactionResponse>

  /// RegisterReaction defines the method to register a new reaction
  func registerReaction(request: Desmos_Posts_V1beta1_MsgRegisterReaction, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgRegisterReactionResponse>

  /// AnswerPoll defines the method to answer a poll
  func answerPoll(request: Desmos_Posts_V1beta1_MsgAnswerPoll, context: StatusOnlyCallContext) -> EventLoopFuture<Desmos_Posts_V1beta1_MsgAnswerPollResponse>
}

extension Desmos_Posts_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "desmos.posts.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePost":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgCreatePost>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgCreatePostResponse>(),
        interceptors: self.interceptors?.makeCreatePostInterceptors() ?? [],
        userFunction: self.createPost(request:context:)
      )

    case "EditPost":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgEditPost>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgEditPostResponse>(),
        interceptors: self.interceptors?.makeEditPostInterceptors() ?? [],
        userFunction: self.editPost(request:context:)
      )

    case "ReportPost":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgReportPost>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgReportPostResponse>(),
        interceptors: self.interceptors?.makeReportPostInterceptors() ?? [],
        userFunction: self.reportPost(request:context:)
      )

    case "AddPostReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgAddPostReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgAddPostReactionResponse>(),
        interceptors: self.interceptors?.makeAddPostReactionInterceptors() ?? [],
        userFunction: self.addPostReaction(request:context:)
      )

    case "RemovePostReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgRemovePostReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgRemovePostReactionResponse>(),
        interceptors: self.interceptors?.makeRemovePostReactionInterceptors() ?? [],
        userFunction: self.removePostReaction(request:context:)
      )

    case "RegisterReaction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgRegisterReaction>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgRegisterReactionResponse>(),
        interceptors: self.interceptors?.makeRegisterReactionInterceptors() ?? [],
        userFunction: self.registerReaction(request:context:)
      )

    case "AnswerPoll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Desmos_Posts_V1beta1_MsgAnswerPoll>(),
        responseSerializer: ProtobufSerializer<Desmos_Posts_V1beta1_MsgAnswerPollResponse>(),
        interceptors: self.interceptors?.makeAnswerPollInterceptors() ?? [],
        userFunction: self.answerPoll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Desmos_Posts_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPost'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePostInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgCreatePost, Desmos_Posts_V1beta1_MsgCreatePostResponse>]

  /// - Returns: Interceptors to use when handling 'editPost'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditPostInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgEditPost, Desmos_Posts_V1beta1_MsgEditPostResponse>]

  /// - Returns: Interceptors to use when handling 'reportPost'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReportPostInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgReportPost, Desmos_Posts_V1beta1_MsgReportPostResponse>]

  /// - Returns: Interceptors to use when handling 'addPostReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddPostReactionInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgAddPostReaction, Desmos_Posts_V1beta1_MsgAddPostReactionResponse>]

  /// - Returns: Interceptors to use when handling 'removePostReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemovePostReactionInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgRemovePostReaction, Desmos_Posts_V1beta1_MsgRemovePostReactionResponse>]

  /// - Returns: Interceptors to use when handling 'registerReaction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterReactionInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgRegisterReaction, Desmos_Posts_V1beta1_MsgRegisterReactionResponse>]

  /// - Returns: Interceptors to use when handling 'answerPoll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAnswerPollInterceptors() -> [ServerInterceptor<Desmos_Posts_V1beta1_MsgAnswerPoll, Desmos_Posts_V1beta1_MsgAnswerPollResponse>]
}
