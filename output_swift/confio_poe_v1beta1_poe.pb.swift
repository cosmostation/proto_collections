// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: confio/poe/v1beta1/poe.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// PoEContractType type of PoE contract
enum Confio_Poe_V1beta1_PoEContractType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case undefined // = 0
  case staking // = 1
  case valset // = 2
  case engagement // = 3
  case mixer // = 4
  case distribution // = 5
  case oversightCommunity // = 6
  case oversightCommunityProposals // = 7
  case communityPool // = 8
  case validatorVoting // = 9
  case arbiterPool // = 10
  case arbiterPoolVoting // = 11
  case UNRECOGNIZED(Int)

  init() {
    self = .undefined
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .undefined
    case 1: self = .staking
    case 2: self = .valset
    case 3: self = .engagement
    case 4: self = .mixer
    case 5: self = .distribution
    case 6: self = .oversightCommunity
    case 7: self = .oversightCommunityProposals
    case 8: self = .communityPool
    case 9: self = .validatorVoting
    case 10: self = .arbiterPool
    case 11: self = .arbiterPoolVoting
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .undefined: return 0
    case .staking: return 1
    case .valset: return 2
    case .engagement: return 3
    case .mixer: return 4
    case .distribution: return 5
    case .oversightCommunity: return 6
    case .oversightCommunityProposals: return 7
    case .communityPool: return 8
    case .validatorVoting: return 9
    case .arbiterPool: return 10
    case .arbiterPoolVoting: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Confio_Poe_V1beta1_PoEContractType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Confio_Poe_V1beta1_PoEContractType] = [
    .undefined,
    .staking,
    .valset,
    .engagement,
    .mixer,
    .distribution,
    .oversightCommunity,
    .oversightCommunityProposals,
    .communityPool,
    .validatorVoting,
    .arbiterPool,
    .arbiterPoolVoting,
  ]
}

#endif  // swift(>=4.2)

/// Params defines the parameters for the PoE module.
struct Confio_Poe_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// HistoricalEntries is the number of historical entries to persist.
  var historicalEntries: UInt32 = 0

  /// InitialValEngagementPoints defines the number of engagement for any new
  /// validator joining post genesis
  var initialValEngagementPoints: UInt64 = 0

  /// MinDelegationAmount defines the minimum amount a post genesis validator
  /// needs to self delegate to receive any engagement points. One must be
  /// exceeded. No minimum condition set when empty.
  var minDelegationAmounts: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "confio.poe.v1beta1"

extension Confio_Poe_V1beta1_PoEContractType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNDEFINED"),
    1: .same(proto: "STAKING"),
    2: .same(proto: "VALSET"),
    3: .same(proto: "ENGAGEMENT"),
    4: .same(proto: "MIXER"),
    5: .same(proto: "DISTRIBUTION"),
    6: .same(proto: "OVERSIGHT_COMMUNITY"),
    7: .same(proto: "OVERSIGHT_COMMUNITY_PROPOSALS"),
    8: .same(proto: "COMMUNITY_POOL"),
    9: .same(proto: "VALIDATOR_VOTING"),
    10: .same(proto: "ARBITER_POOL"),
    11: .same(proto: "ARBITER_POOL_VOTING"),
  ]
}

extension Confio_Poe_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "historical_entries"),
    2: .standard(proto: "initial_val_engagement_points"),
    3: .standard(proto: "min_delegation_amounts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.historicalEntries) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.initialValEngagementPoints) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.minDelegationAmounts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.historicalEntries != 0 {
      try visitor.visitSingularUInt32Field(value: self.historicalEntries, fieldNumber: 1)
    }
    if self.initialValEngagementPoints != 0 {
      try visitor.visitSingularUInt64Field(value: self.initialValEngagementPoints, fieldNumber: 2)
    }
    if !self.minDelegationAmounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.minDelegationAmounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Confio_Poe_V1beta1_Params, rhs: Confio_Poe_V1beta1_Params) -> Bool {
    if lhs.historicalEntries != rhs.historicalEntries {return false}
    if lhs.initialValEngagementPoints != rhs.initialValEngagementPoints {return false}
    if lhs.minDelegationAmounts != rhs.minDelegationAmounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
