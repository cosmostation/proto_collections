// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: iscn/store.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Likechain_Iscn_StoreRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iscnID: Likechain_Iscn_IscnId {
    get {return _iscnID ?? Likechain_Iscn_IscnId()}
    set {_iscnID = newValue}
  }
  /// Returns true if `iscnID` has been explicitly set.
  var hasIscnID: Bool {return self._iscnID != nil}
  /// Clears the value of `iscnID`. Subsequent reads from it will return its default value.
  mutating func clearIscnID() {self._iscnID = nil}

  var cidBytes: Data = Data()

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _iscnID: Likechain_Iscn_IscnId? = nil
}

struct Likechain_Iscn_ContentIdRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ownerAddressBytes: Data = Data()

  var latestVersion: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "likechain.iscn"

extension Likechain_Iscn_StoreRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StoreRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "iscn_id"),
    2: .standard(proto: "cid_bytes"),
    3: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._iscnID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.cidBytes) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._iscnID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.cidBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.cidBytes, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_StoreRecord, rhs: Likechain_Iscn_StoreRecord) -> Bool {
    if lhs._iscnID != rhs._iscnID {return false}
    if lhs.cidBytes != rhs.cidBytes {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Likechain_Iscn_ContentIdRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContentIdRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address_bytes"),
    2: .standard(proto: "latest_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.ownerAddressBytes) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.latestVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddressBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.ownerAddressBytes, fieldNumber: 1)
    }
    if self.latestVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.latestVersion, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Likechain_Iscn_ContentIdRecord, rhs: Likechain_Iscn_ContentIdRecord) -> Bool {
    if lhs.ownerAddressBytes != rhs.ownerAddressBytes {return false}
    if lhs.latestVersion != rhs.latestVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
