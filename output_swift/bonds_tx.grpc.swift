//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bonds/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the bonds Msg service.
///
/// Usage: instantiate `Bonds_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Bonds_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bonds_MsgClientInterceptorFactoryProtocol? { get }

  func createBond(
    _ request: Bonds_MsgCreateBond,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgCreateBond, Bonds_MsgCreateBondResponse>

  func editBond(
    _ request: Bonds_MsgEditBond,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgEditBond, Bonds_MsgEditBondResponse>

  func setNextAlpha(
    _ request: Bonds_MsgSetNextAlpha,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgSetNextAlpha, Bonds_MsgSetNextAlphaResponse>

  func updateBondState(
    _ request: Bonds_MsgUpdateBondState,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgUpdateBondState, Bonds_MsgUpdateBondStateResponse>

  func buy(
    _ request: Bonds_MsgBuy,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgBuy, Bonds_MsgBuyResponse>

  func sell(
    _ request: Bonds_MsgSell,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgSell, Bonds_MsgSellResponse>

  func swap(
    _ request: Bonds_MsgSwap,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgSwap, Bonds_MsgSwapResponse>

  func makeOutcomePayment(
    _ request: Bonds_MsgMakeOutcomePayment,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgMakeOutcomePayment, Bonds_MsgMakeOutcomePaymentResponse>

  func withdrawShare(
    _ request: Bonds_MsgWithdrawShare,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgWithdrawShare, Bonds_MsgWithdrawShareResponse>

  func withdrawReserve(
    _ request: Bonds_MsgWithdrawReserve,
    callOptions: CallOptions?
  ) -> UnaryCall<Bonds_MsgWithdrawReserve, Bonds_MsgWithdrawReserveResponse>
}

extension Bonds_MsgClientProtocol {
  internal var serviceName: String {
    return "bonds.Msg"
  }

  /// CreateBond defines a method for creating a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBond(
    _ request: Bonds_MsgCreateBond,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgCreateBond, Bonds_MsgCreateBondResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/CreateBond",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBondInterceptors() ?? []
    )
  }

  /// EditBond defines a method for editing a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditBond.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editBond(
    _ request: Bonds_MsgEditBond,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgEditBond, Bonds_MsgEditBondResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/EditBond",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEditBondInterceptors() ?? []
    )
  }

  /// SetNextAlpha defines a method for editing a bond's alpha parameter.
  ///
  /// - Parameters:
  ///   - request: Request to send to SetNextAlpha.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setNextAlpha(
    _ request: Bonds_MsgSetNextAlpha,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgSetNextAlpha, Bonds_MsgSetNextAlphaResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/SetNextAlpha",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetNextAlphaInterceptors() ?? []
    )
  }

  /// UpdateBondState defines a method for updating a bond's current state.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBondState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBondState(
    _ request: Bonds_MsgUpdateBondState,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgUpdateBondState, Bonds_MsgUpdateBondStateResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/UpdateBondState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBondStateInterceptors() ?? []
    )
  }

  /// Buy defines a method for buying from a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to Buy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func buy(
    _ request: Bonds_MsgBuy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgBuy, Bonds_MsgBuyResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/Buy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBuyInterceptors() ?? []
    )
  }

  /// Sell defines a method for selling from a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to Sell.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sell(
    _ request: Bonds_MsgSell,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgSell, Bonds_MsgSellResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/Sell",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSellInterceptors() ?? []
    )
  }

  /// Swap defines a method for swapping from one reserve bond token to another.
  ///
  /// - Parameters:
  ///   - request: Request to send to Swap.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func swap(
    _ request: Bonds_MsgSwap,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgSwap, Bonds_MsgSwapResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/Swap",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSwapInterceptors() ?? []
    )
  }

  /// MakeOutcomePayment defines a method for making an outcome payment to a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to MakeOutcomePayment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func makeOutcomePayment(
    _ request: Bonds_MsgMakeOutcomePayment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgMakeOutcomePayment, Bonds_MsgMakeOutcomePaymentResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/MakeOutcomePayment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMakeOutcomePaymentInterceptors() ?? []
    )
  }

  /// WithdrawShare defines a method for withdrawing a share from a bond that is in the SETTLE stage.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawShare.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawShare(
    _ request: Bonds_MsgWithdrawShare,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgWithdrawShare, Bonds_MsgWithdrawShareResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/WithdrawShare",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawShareInterceptors() ?? []
    )
  }

  /// WithdrawReserve defines a method for withdrawing reserve from a bond.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawReserve.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawReserve(
    _ request: Bonds_MsgWithdrawReserve,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bonds_MsgWithdrawReserve, Bonds_MsgWithdrawReserveResponse> {
    return self.makeUnaryCall(
      path: "/bonds.Msg/WithdrawReserve",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawReserveInterceptors() ?? []
    )
  }
}

internal protocol Bonds_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createBond'.
  func makeCreateBondInterceptors() -> [ClientInterceptor<Bonds_MsgCreateBond, Bonds_MsgCreateBondResponse>]

  /// - Returns: Interceptors to use when invoking 'editBond'.
  func makeEditBondInterceptors() -> [ClientInterceptor<Bonds_MsgEditBond, Bonds_MsgEditBondResponse>]

  /// - Returns: Interceptors to use when invoking 'setNextAlpha'.
  func makeSetNextAlphaInterceptors() -> [ClientInterceptor<Bonds_MsgSetNextAlpha, Bonds_MsgSetNextAlphaResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBondState'.
  func makeUpdateBondStateInterceptors() -> [ClientInterceptor<Bonds_MsgUpdateBondState, Bonds_MsgUpdateBondStateResponse>]

  /// - Returns: Interceptors to use when invoking 'buy'.
  func makeBuyInterceptors() -> [ClientInterceptor<Bonds_MsgBuy, Bonds_MsgBuyResponse>]

  /// - Returns: Interceptors to use when invoking 'sell'.
  func makeSellInterceptors() -> [ClientInterceptor<Bonds_MsgSell, Bonds_MsgSellResponse>]

  /// - Returns: Interceptors to use when invoking 'swap'.
  func makeSwapInterceptors() -> [ClientInterceptor<Bonds_MsgSwap, Bonds_MsgSwapResponse>]

  /// - Returns: Interceptors to use when invoking 'makeOutcomePayment'.
  func makeMakeOutcomePaymentInterceptors() -> [ClientInterceptor<Bonds_MsgMakeOutcomePayment, Bonds_MsgMakeOutcomePaymentResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawShare'.
  func makeWithdrawShareInterceptors() -> [ClientInterceptor<Bonds_MsgWithdrawShare, Bonds_MsgWithdrawShareResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawReserve'.
  func makeWithdrawReserveInterceptors() -> [ClientInterceptor<Bonds_MsgWithdrawReserve, Bonds_MsgWithdrawReserveResponse>]
}

internal final class Bonds_MsgClient: Bonds_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bonds_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the bonds.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bonds_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the bonds Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bonds_MsgProvider: CallHandlerProvider {
  var interceptors: Bonds_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateBond defines a method for creating a bond.
  func createBond(request: Bonds_MsgCreateBond, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgCreateBondResponse>

  /// EditBond defines a method for editing a bond.
  func editBond(request: Bonds_MsgEditBond, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgEditBondResponse>

  /// SetNextAlpha defines a method for editing a bond's alpha parameter.
  func setNextAlpha(request: Bonds_MsgSetNextAlpha, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgSetNextAlphaResponse>

  /// UpdateBondState defines a method for updating a bond's current state.
  func updateBondState(request: Bonds_MsgUpdateBondState, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgUpdateBondStateResponse>

  /// Buy defines a method for buying from a bond.
  func buy(request: Bonds_MsgBuy, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgBuyResponse>

  /// Sell defines a method for selling from a bond.
  func sell(request: Bonds_MsgSell, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgSellResponse>

  /// Swap defines a method for swapping from one reserve bond token to another.
  func swap(request: Bonds_MsgSwap, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgSwapResponse>

  /// MakeOutcomePayment defines a method for making an outcome payment to a bond.
  func makeOutcomePayment(request: Bonds_MsgMakeOutcomePayment, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgMakeOutcomePaymentResponse>

  /// WithdrawShare defines a method for withdrawing a share from a bond that is in the SETTLE stage.
  func withdrawShare(request: Bonds_MsgWithdrawShare, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgWithdrawShareResponse>

  /// WithdrawReserve defines a method for withdrawing reserve from a bond.
  func withdrawReserve(request: Bonds_MsgWithdrawReserve, context: StatusOnlyCallContext) -> EventLoopFuture<Bonds_MsgWithdrawReserveResponse>
}

extension Bonds_MsgProvider {
  internal var serviceName: Substring { return "bonds.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgCreateBond>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgCreateBondResponse>(),
        interceptors: self.interceptors?.makeCreateBondInterceptors() ?? [],
        userFunction: self.createBond(request:context:)
      )

    case "EditBond":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgEditBond>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgEditBondResponse>(),
        interceptors: self.interceptors?.makeEditBondInterceptors() ?? [],
        userFunction: self.editBond(request:context:)
      )

    case "SetNextAlpha":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgSetNextAlpha>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgSetNextAlphaResponse>(),
        interceptors: self.interceptors?.makeSetNextAlphaInterceptors() ?? [],
        userFunction: self.setNextAlpha(request:context:)
      )

    case "UpdateBondState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgUpdateBondState>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgUpdateBondStateResponse>(),
        interceptors: self.interceptors?.makeUpdateBondStateInterceptors() ?? [],
        userFunction: self.updateBondState(request:context:)
      )

    case "Buy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgBuy>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgBuyResponse>(),
        interceptors: self.interceptors?.makeBuyInterceptors() ?? [],
        userFunction: self.buy(request:context:)
      )

    case "Sell":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgSell>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgSellResponse>(),
        interceptors: self.interceptors?.makeSellInterceptors() ?? [],
        userFunction: self.sell(request:context:)
      )

    case "Swap":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgSwap>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgSwapResponse>(),
        interceptors: self.interceptors?.makeSwapInterceptors() ?? [],
        userFunction: self.swap(request:context:)
      )

    case "MakeOutcomePayment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgMakeOutcomePayment>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgMakeOutcomePaymentResponse>(),
        interceptors: self.interceptors?.makeMakeOutcomePaymentInterceptors() ?? [],
        userFunction: self.makeOutcomePayment(request:context:)
      )

    case "WithdrawShare":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgWithdrawShare>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgWithdrawShareResponse>(),
        interceptors: self.interceptors?.makeWithdrawShareInterceptors() ?? [],
        userFunction: self.withdrawShare(request:context:)
      )

    case "WithdrawReserve":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bonds_MsgWithdrawReserve>(),
        responseSerializer: ProtobufSerializer<Bonds_MsgWithdrawReserveResponse>(),
        interceptors: self.interceptors?.makeWithdrawReserveInterceptors() ?? [],
        userFunction: self.withdrawReserve(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bonds_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createBond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBondInterceptors() -> [ServerInterceptor<Bonds_MsgCreateBond, Bonds_MsgCreateBondResponse>]

  /// - Returns: Interceptors to use when handling 'editBond'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEditBondInterceptors() -> [ServerInterceptor<Bonds_MsgEditBond, Bonds_MsgEditBondResponse>]

  /// - Returns: Interceptors to use when handling 'setNextAlpha'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetNextAlphaInterceptors() -> [ServerInterceptor<Bonds_MsgSetNextAlpha, Bonds_MsgSetNextAlphaResponse>]

  /// - Returns: Interceptors to use when handling 'updateBondState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBondStateInterceptors() -> [ServerInterceptor<Bonds_MsgUpdateBondState, Bonds_MsgUpdateBondStateResponse>]

  /// - Returns: Interceptors to use when handling 'buy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBuyInterceptors() -> [ServerInterceptor<Bonds_MsgBuy, Bonds_MsgBuyResponse>]

  /// - Returns: Interceptors to use when handling 'sell'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSellInterceptors() -> [ServerInterceptor<Bonds_MsgSell, Bonds_MsgSellResponse>]

  /// - Returns: Interceptors to use when handling 'swap'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSwapInterceptors() -> [ServerInterceptor<Bonds_MsgSwap, Bonds_MsgSwapResponse>]

  /// - Returns: Interceptors to use when handling 'makeOutcomePayment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMakeOutcomePaymentInterceptors() -> [ServerInterceptor<Bonds_MsgMakeOutcomePayment, Bonds_MsgMakeOutcomePaymentResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawShare'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawShareInterceptors() -> [ServerInterceptor<Bonds_MsgWithdrawShare, Bonds_MsgWithdrawShareResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawReserve'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawReserveInterceptors() -> [ServerInterceptor<Bonds_MsgWithdrawReserve, Bonds_MsgWithdrawReserveResponse>]
}
