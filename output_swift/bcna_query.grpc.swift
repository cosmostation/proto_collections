//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bcna/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `BitCannaGlobal_Bcna_Bcna_QueryClient`, then call methods of this protocol to make API calls.
internal protocol BitCannaGlobal_Bcna_Bcna_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: BitCannaGlobal_Bcna_Bcna_QueryClientInterceptorFactoryProtocol? { get }

  func bitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse>

  func bitcannaidAll(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse>

  func supplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse>

  func supplychainAll(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse>
}

extension BitCannaGlobal_Bcna_Bcna_QueryClientProtocol {
  internal var serviceName: String {
    return "BitCannaGlobal.bcna.bcna.Query"
  }

  /// Queries a bitcannaid by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Bitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Query/Bitcannaid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBitcannaidInterceptors() ?? []
    )
  }

  /// Queries a list of bitcannaid items.
  ///
  /// - Parameters:
  ///   - request: Request to send to BitcannaidAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bitcannaidAll(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Query/BitcannaidAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBitcannaidAllInterceptors() ?? []
    )
  }

  /// Queries a supplychain by id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Query/Supplychain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplychainInterceptors() ?? []
    )
  }

  /// Queries a list of supplychain items.
  ///
  /// - Parameters:
  ///   - request: Request to send to SupplychainAll.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supplychainAll(
    _ request: BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Query/SupplychainAll",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplychainAllInterceptors() ?? []
    )
  }
}

internal protocol BitCannaGlobal_Bcna_Bcna_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'bitcannaid'.
  func makeBitcannaidInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'bitcannaidAll'.
  func makeBitcannaidAllInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'supplychain'.
  func makeSupplychainInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse>]

  /// - Returns: Interceptors to use when invoking 'supplychainAll'.
  func makeSupplychainAllInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse>]
}

internal final class BitCannaGlobal_Bcna_Bcna_QueryClient: BitCannaGlobal_Bcna_Bcna_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: BitCannaGlobal_Bcna_Bcna_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the BitCannaGlobal.bcna.bcna.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BitCannaGlobal_Bcna_Bcna_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol BitCannaGlobal_Bcna_Bcna_QueryProvider: CallHandlerProvider {
  var interceptors: BitCannaGlobal_Bcna_Bcna_QueryServerInterceptorFactoryProtocol? { get }

  /// Queries a bitcannaid by id.
  func bitcannaid(request: BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse>

  /// Queries a list of bitcannaid items.
  func bitcannaidAll(request: BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse>

  /// Queries a supplychain by id.
  func supplychain(request: BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse>

  /// Queries a list of supplychain items.
  func supplychainAll(request: BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse>
}

extension BitCannaGlobal_Bcna_Bcna_QueryProvider {
  internal var serviceName: Substring { return "BitCannaGlobal.bcna.bcna.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Bitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse>(),
        interceptors: self.interceptors?.makeBitcannaidInterceptors() ?? [],
        userFunction: self.bitcannaid(request:context:)
      )

    case "BitcannaidAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse>(),
        interceptors: self.interceptors?.makeBitcannaidAllInterceptors() ?? [],
        userFunction: self.bitcannaidAll(request:context:)
      )

    case "Supplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse>(),
        interceptors: self.interceptors?.makeSupplychainInterceptors() ?? [],
        userFunction: self.supplychain(request:context:)
      )

    case "SupplychainAll":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse>(),
        interceptors: self.interceptors?.makeSupplychainAllInterceptors() ?? [],
        userFunction: self.supplychainAll(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol BitCannaGlobal_Bcna_Bcna_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'bitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBitcannaidInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryGetBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'bitcannaidAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBitcannaidAllInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidRequest, BitCannaGlobal_Bcna_Bcna_QueryAllBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'supplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplychainInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryGetSupplychainResponse>]

  /// - Returns: Interceptors to use when handling 'supplychainAll'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSupplychainAllInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainRequest, BitCannaGlobal_Bcna_Bcna_QueryAllSupplychainResponse>]
}
