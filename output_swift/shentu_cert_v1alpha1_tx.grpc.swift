//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/cert/v1alpha1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the shield Msg service.
///
/// Usage: instantiate `Shentu_Cert_V1alpha1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Cert_V1alpha1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Cert_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func proposeCertifier(
    _ request: Shentu_Cert_V1alpha1_MsgProposeCertifier,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgProposeCertifier, Shentu_Cert_V1alpha1_MsgProposeCertifierResponse>

  func issueCertificate(
    _ request: Shentu_Cert_V1alpha1_MsgIssueCertificate,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgIssueCertificate, Shentu_Cert_V1alpha1_MsgIssueCertificateResponse>

  func revokeCertificate(
    _ request: Shentu_Cert_V1alpha1_MsgRevokeCertificate,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgRevokeCertificate, Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse>

  func certifyPlatform(
    _ request: Shentu_Cert_V1alpha1_MsgCertifyPlatform,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgCertifyPlatform, Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse>
}

extension Shentu_Cert_V1alpha1_MsgClientProtocol {
  internal var serviceName: String {
    return "shentu.cert.v1alpha1.Msg"
  }

  /// Unary call to ProposeCertifier
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposeCertifier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposeCertifier(
    _ request: Shentu_Cert_V1alpha1_MsgProposeCertifier,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgProposeCertifier, Shentu_Cert_V1alpha1_MsgProposeCertifierResponse> {
    return self.makeUnaryCall(
      path: "/shentu.cert.v1alpha1.Msg/ProposeCertifier",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposeCertifierInterceptors() ?? []
    )
  }

  /// Unary call to IssueCertificate
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueCertificate(
    _ request: Shentu_Cert_V1alpha1_MsgIssueCertificate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgIssueCertificate, Shentu_Cert_V1alpha1_MsgIssueCertificateResponse> {
    return self.makeUnaryCall(
      path: "/shentu.cert.v1alpha1.Msg/IssueCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueCertificateInterceptors() ?? []
    )
  }

  /// Unary call to RevokeCertificate
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeCertificate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeCertificate(
    _ request: Shentu_Cert_V1alpha1_MsgRevokeCertificate,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgRevokeCertificate, Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse> {
    return self.makeUnaryCall(
      path: "/shentu.cert.v1alpha1.Msg/RevokeCertificate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeCertificateInterceptors() ?? []
    )
  }

  /// Unary call to CertifyPlatform
  ///
  /// - Parameters:
  ///   - request: Request to send to CertifyPlatform.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func certifyPlatform(
    _ request: Shentu_Cert_V1alpha1_MsgCertifyPlatform,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Cert_V1alpha1_MsgCertifyPlatform, Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse> {
    return self.makeUnaryCall(
      path: "/shentu.cert.v1alpha1.Msg/CertifyPlatform",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCertifyPlatformInterceptors() ?? []
    )
  }
}

internal protocol Shentu_Cert_V1alpha1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'proposeCertifier'.
  func makeProposeCertifierInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_MsgProposeCertifier, Shentu_Cert_V1alpha1_MsgProposeCertifierResponse>]

  /// - Returns: Interceptors to use when invoking 'issueCertificate'.
  func makeIssueCertificateInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_MsgIssueCertificate, Shentu_Cert_V1alpha1_MsgIssueCertificateResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeCertificate'.
  func makeRevokeCertificateInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_MsgRevokeCertificate, Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse>]

  /// - Returns: Interceptors to use when invoking 'certifyPlatform'.
  func makeCertifyPlatformInterceptors() -> [ClientInterceptor<Shentu_Cert_V1alpha1_MsgCertifyPlatform, Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse>]
}

internal final class Shentu_Cert_V1alpha1_MsgClient: Shentu_Cert_V1alpha1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Cert_V1alpha1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.cert.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Cert_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the shield Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Cert_V1alpha1_MsgProvider: CallHandlerProvider {
  var interceptors: Shentu_Cert_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  func proposeCertifier(request: Shentu_Cert_V1alpha1_MsgProposeCertifier, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_MsgProposeCertifierResponse>

  func issueCertificate(request: Shentu_Cert_V1alpha1_MsgIssueCertificate, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_MsgIssueCertificateResponse>

  func revokeCertificate(request: Shentu_Cert_V1alpha1_MsgRevokeCertificate, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse>

  func certifyPlatform(request: Shentu_Cert_V1alpha1_MsgCertifyPlatform, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse>
}

extension Shentu_Cert_V1alpha1_MsgProvider {
  internal var serviceName: Substring { return "shentu.cert.v1alpha1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProposeCertifier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_MsgProposeCertifier>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_MsgProposeCertifierResponse>(),
        interceptors: self.interceptors?.makeProposeCertifierInterceptors() ?? [],
        userFunction: self.proposeCertifier(request:context:)
      )

    case "IssueCertificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_MsgIssueCertificate>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_MsgIssueCertificateResponse>(),
        interceptors: self.interceptors?.makeIssueCertificateInterceptors() ?? [],
        userFunction: self.issueCertificate(request:context:)
      )

    case "RevokeCertificate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_MsgRevokeCertificate>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse>(),
        interceptors: self.interceptors?.makeRevokeCertificateInterceptors() ?? [],
        userFunction: self.revokeCertificate(request:context:)
      )

    case "CertifyPlatform":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Cert_V1alpha1_MsgCertifyPlatform>(),
        responseSerializer: ProtobufSerializer<Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse>(),
        interceptors: self.interceptors?.makeCertifyPlatformInterceptors() ?? [],
        userFunction: self.certifyPlatform(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Cert_V1alpha1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'proposeCertifier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProposeCertifierInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_MsgProposeCertifier, Shentu_Cert_V1alpha1_MsgProposeCertifierResponse>]

  /// - Returns: Interceptors to use when handling 'issueCertificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueCertificateInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_MsgIssueCertificate, Shentu_Cert_V1alpha1_MsgIssueCertificateResponse>]

  /// - Returns: Interceptors to use when handling 'revokeCertificate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeCertificateInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_MsgRevokeCertificate, Shentu_Cert_V1alpha1_MsgRevokeCertificateResponse>]

  /// - Returns: Interceptors to use when handling 'certifyPlatform'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCertifyPlatformInterceptors() -> [ServerInterceptor<Shentu_Cert_V1alpha1_MsgCertifyPlatform, Shentu_Cert_V1alpha1_MsgCertifyPlatformResponse>]
}
