//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: did/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the did Msg service.
///
/// Usage: instantiate `Did_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Did_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Did_MsgClientInterceptorFactoryProtocol? { get }

  func addDid(
    _ request: Did_MsgAddDid,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_MsgAddDid, Did_MsgAddDidResponse>

  func addCredential(
    _ request: Did_MsgAddCredential,
    callOptions: CallOptions?
  ) -> UnaryCall<Did_MsgAddCredential, Did_MsgAddCredentialResponse>
}

extension Did_MsgClientProtocol {
  internal var serviceName: String {
    return "did.Msg"
  }

  /// AddDid defines a method for adding a DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddDid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addDid(
    _ request: Did_MsgAddDid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_MsgAddDid, Did_MsgAddDidResponse> {
    return self.makeUnaryCall(
      path: "/did.Msg/AddDid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddDidInterceptors() ?? []
    )
  }

  /// AddCredential defines a method for adding a credential to the signer's DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCredential.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCredential(
    _ request: Did_MsgAddCredential,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Did_MsgAddCredential, Did_MsgAddCredentialResponse> {
    return self.makeUnaryCall(
      path: "/did.Msg/AddCredential",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCredentialInterceptors() ?? []
    )
  }
}

internal protocol Did_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'addDid'.
  func makeAddDidInterceptors() -> [ClientInterceptor<Did_MsgAddDid, Did_MsgAddDidResponse>]

  /// - Returns: Interceptors to use when invoking 'addCredential'.
  func makeAddCredentialInterceptors() -> [ClientInterceptor<Did_MsgAddCredential, Did_MsgAddCredentialResponse>]
}

internal final class Did_MsgClient: Did_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Did_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the did.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Did_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the did Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Did_MsgProvider: CallHandlerProvider {
  var interceptors: Did_MsgServerInterceptorFactoryProtocol? { get }

  /// AddDid defines a method for adding a DID.
  func addDid(request: Did_MsgAddDid, context: StatusOnlyCallContext) -> EventLoopFuture<Did_MsgAddDidResponse>

  /// AddCredential defines a method for adding a credential to the signer's DID.
  func addCredential(request: Did_MsgAddCredential, context: StatusOnlyCallContext) -> EventLoopFuture<Did_MsgAddCredentialResponse>
}

extension Did_MsgProvider {
  internal var serviceName: Substring { return "did.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddDid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_MsgAddDid>(),
        responseSerializer: ProtobufSerializer<Did_MsgAddDidResponse>(),
        interceptors: self.interceptors?.makeAddDidInterceptors() ?? [],
        userFunction: self.addDid(request:context:)
      )

    case "AddCredential":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Did_MsgAddCredential>(),
        responseSerializer: ProtobufSerializer<Did_MsgAddCredentialResponse>(),
        interceptors: self.interceptors?.makeAddCredentialInterceptors() ?? [],
        userFunction: self.addCredential(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Did_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addDid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddDidInterceptors() -> [ServerInterceptor<Did_MsgAddDid, Did_MsgAddDidResponse>]

  /// - Returns: Interceptors to use when handling 'addCredential'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCredentialInterceptors() -> [ServerInterceptor<Did_MsgAddCredential, Did_MsgAddCredentialResponse>]
}
