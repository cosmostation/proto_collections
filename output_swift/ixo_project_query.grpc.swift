//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ixo/project/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Project_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Project_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Project_QueryClientInterceptorFactoryProtocol? { get }

  func projectDoc(
    _ request: Project_QueryProjectDocRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Project_QueryProjectDocRequest, Project_QueryProjectDocResponse>

  func projectAccounts(
    _ request: Project_QueryProjectAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Project_QueryProjectAccountsRequest, Project_QueryProjectAccountsResponse>

  func projectTx(
    _ request: Project_QueryProjectTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Project_QueryProjectTxRequest, Project_QueryProjectTxResponse>

  func params(
    _ request: Project_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Project_QueryParamsRequest, Project_QueryParamsResponse>
}

extension Project_QueryClientProtocol {
  internal var serviceName: String {
    return "project.Query"
  }

  /// ProjectDoc queries info of a specific project.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProjectDoc.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func projectDoc(
    _ request: Project_QueryProjectDocRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Project_QueryProjectDocRequest, Project_QueryProjectDocResponse> {
    return self.makeUnaryCall(
      path: "/project.Query/ProjectDoc",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectDocInterceptors() ?? []
    )
  }

  /// ProjectAccounts lists a specific project's accounts.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProjectAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func projectAccounts(
    _ request: Project_QueryProjectAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Project_QueryProjectAccountsRequest, Project_QueryProjectAccountsResponse> {
    return self.makeUnaryCall(
      path: "/project.Query/ProjectAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectAccountsInterceptors() ?? []
    )
  }

  /// ProjectTx lists a specific project's transactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProjectTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func projectTx(
    _ request: Project_QueryProjectTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Project_QueryProjectTxRequest, Project_QueryProjectTxResponse> {
    return self.makeUnaryCall(
      path: "/project.Query/ProjectTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProjectTxInterceptors() ?? []
    )
  }

  /// Params queries the paramaters of x/project module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Project_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Project_QueryParamsRequest, Project_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/project.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Project_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'projectDoc'.
  func makeProjectDocInterceptors() -> [ClientInterceptor<Project_QueryProjectDocRequest, Project_QueryProjectDocResponse>]

  /// - Returns: Interceptors to use when invoking 'projectAccounts'.
  func makeProjectAccountsInterceptors() -> [ClientInterceptor<Project_QueryProjectAccountsRequest, Project_QueryProjectAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'projectTx'.
  func makeProjectTxInterceptors() -> [ClientInterceptor<Project_QueryProjectTxRequest, Project_QueryProjectTxResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Project_QueryParamsRequest, Project_QueryParamsResponse>]
}

internal final class Project_QueryClient: Project_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Project_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the project.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Project_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Project_QueryProvider: CallHandlerProvider {
  var interceptors: Project_QueryServerInterceptorFactoryProtocol? { get }

  /// ProjectDoc queries info of a specific project.
  func projectDoc(request: Project_QueryProjectDocRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Project_QueryProjectDocResponse>

  /// ProjectAccounts lists a specific project's accounts.
  func projectAccounts(request: Project_QueryProjectAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Project_QueryProjectAccountsResponse>

  /// ProjectTx lists a specific project's transactions.
  func projectTx(request: Project_QueryProjectTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Project_QueryProjectTxResponse>

  /// Params queries the paramaters of x/project module.
  func params(request: Project_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Project_QueryParamsResponse>
}

extension Project_QueryProvider {
  internal var serviceName: Substring { return "project.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ProjectDoc":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Project_QueryProjectDocRequest>(),
        responseSerializer: ProtobufSerializer<Project_QueryProjectDocResponse>(),
        interceptors: self.interceptors?.makeProjectDocInterceptors() ?? [],
        userFunction: self.projectDoc(request:context:)
      )

    case "ProjectAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Project_QueryProjectAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Project_QueryProjectAccountsResponse>(),
        interceptors: self.interceptors?.makeProjectAccountsInterceptors() ?? [],
        userFunction: self.projectAccounts(request:context:)
      )

    case "ProjectTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Project_QueryProjectTxRequest>(),
        responseSerializer: ProtobufSerializer<Project_QueryProjectTxResponse>(),
        interceptors: self.interceptors?.makeProjectTxInterceptors() ?? [],
        userFunction: self.projectTx(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Project_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Project_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Project_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'projectDoc'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProjectDocInterceptors() -> [ServerInterceptor<Project_QueryProjectDocRequest, Project_QueryProjectDocResponse>]

  /// - Returns: Interceptors to use when handling 'projectAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProjectAccountsInterceptors() -> [ServerInterceptor<Project_QueryProjectAccountsRequest, Project_QueryProjectAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'projectTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProjectTxInterceptors() -> [ServerInterceptor<Project_QueryProjectTxRequest, Project_QueryProjectTxResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Project_QueryParamsRequest, Project_QueryParamsResponse>]
}
