// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/tss/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Tss_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var params: Axelar_Tss_V1beta1_Params {
    get {return _storage._params ?? Axelar_Tss_V1beta1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var keyRecoveryInfos: [Axelar_Tss_V1beta1_KeyRecoveryInfo] {
    get {return _storage._keyRecoveryInfos}
    set {_uniqueStorage()._keyRecoveryInfos = newValue}
  }

  var keys: [Axelar_Tss_Exported_V1beta1_Key] {
    get {return _storage._keys}
    set {_uniqueStorage()._keys = newValue}
  }

  var multisigInfos: [Axelar_Tss_V1beta1_MultisigInfo] {
    get {return _storage._multisigInfos}
    set {_uniqueStorage()._multisigInfos = newValue}
  }

  var externalKeys: [Axelar_Tss_V1beta1_ExternalKeys] {
    get {return _storage._externalKeys}
    set {_uniqueStorage()._externalKeys = newValue}
  }

  var signatures: [Axelar_Tss_Exported_V1beta1_Signature] {
    get {return _storage._signatures}
    set {_uniqueStorage()._signatures = newValue}
  }

  var validatorStatuses: [Axelar_Tss_V1beta1_ValidatorStatus] {
    get {return _storage._validatorStatuses}
    set {_uniqueStorage()._validatorStatuses = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.tss.v1beta1"

extension Axelar_Tss_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "key_recovery_infos"),
    3: .same(proto: "keys"),
    4: .standard(proto: "multisig_infos"),
    5: .standard(proto: "external_keys"),
    6: .same(proto: "signatures"),
    7: .standard(proto: "validator_statuses"),
  ]

  fileprivate class _StorageClass {
    var _params: Axelar_Tss_V1beta1_Params? = nil
    var _keyRecoveryInfos: [Axelar_Tss_V1beta1_KeyRecoveryInfo] = []
    var _keys: [Axelar_Tss_Exported_V1beta1_Key] = []
    var _multisigInfos: [Axelar_Tss_V1beta1_MultisigInfo] = []
    var _externalKeys: [Axelar_Tss_V1beta1_ExternalKeys] = []
    var _signatures: [Axelar_Tss_Exported_V1beta1_Signature] = []
    var _validatorStatuses: [Axelar_Tss_V1beta1_ValidatorStatus] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _keyRecoveryInfos = source._keyRecoveryInfos
      _keys = source._keys
      _multisigInfos = source._multisigInfos
      _externalKeys = source._externalKeys
      _signatures = source._signatures
      _validatorStatuses = source._validatorStatuses
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._keyRecoveryInfos) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._keys) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._multisigInfos) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._externalKeys) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._signatures) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._validatorStatuses) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._keyRecoveryInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._keyRecoveryInfos, fieldNumber: 2)
      }
      if !_storage._keys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._keys, fieldNumber: 3)
      }
      if !_storage._multisigInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._multisigInfos, fieldNumber: 4)
      }
      if !_storage._externalKeys.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._externalKeys, fieldNumber: 5)
      }
      if !_storage._signatures.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._signatures, fieldNumber: 6)
      }
      if !_storage._validatorStatuses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validatorStatuses, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Tss_V1beta1_GenesisState, rhs: Axelar_Tss_V1beta1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._keyRecoveryInfos != rhs_storage._keyRecoveryInfos {return false}
        if _storage._keys != rhs_storage._keys {return false}
        if _storage._multisigInfos != rhs_storage._multisigInfos {return false}
        if _storage._externalKeys != rhs_storage._externalKeys {return false}
        if _storage._signatures != rhs_storage._signatures {return false}
        if _storage._validatorStatuses != rhs_storage._validatorStatuses {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
