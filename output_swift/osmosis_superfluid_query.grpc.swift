//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/superfluid/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Osmosis_Superfluid_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Superfluid_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>

  func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>

  func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>

  func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>

  func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>
}

extension Osmosis_Superfluid_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.superfluid.Query"
  }

  /// Params returns the total set of minting parameters.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Osmosis_Superfluid_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Returns superfluid asset type
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetType.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetType(
    _ request: Osmosis_Superfluid_AssetTypeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/AssetType",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? []
    )
  }

  /// Returns all superfluid asset types
  ///
  /// - Parameters:
  ///   - request: Request to send to AllAssets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allAssets(
    _ request: Osmosis_Superfluid_AllAssetsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/AllAssets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? []
    )
  }

  /// Returns superfluid asset Multiplier
  ///
  /// - Parameters:
  ///   - request: Request to send to AssetMultiplier.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assetMultiplier(
    _ request: Osmosis_Superfluid_AssetMultiplierRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/AssetMultiplier",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? []
    )
  }

  /// Returns all superfluid intermediary account
  ///
  /// - Parameters:
  ///   - request: Request to send to AllIntermediaryAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allIntermediaryAccounts(
    _ request: Osmosis_Superfluid_AllIntermediaryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/AllIntermediaryAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? []
    )
  }

  /// Returns intermediary account connected to a superfluid staked lock by id
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectedIntermediaryAccount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func connectedIntermediaryAccount(
    _ request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/ConnectedIntermediaryAccount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? []
    )
  }

  /// Returns the total amount of osmo superfluidly staked
  /// response denominated in uosmo
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalSuperfluidDelegations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalSuperfluidDelegations(
    _ request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/TotalSuperfluidDelegations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? []
    )
  }

  /// Returns the coins superfluid delegated for a delegator, validator, denom
  /// triplet
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationAmount(
    _ request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/SuperfluidDelegationAmount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? []
    )
  }

  /// Returns all the superfluid poistions for a specific delegator
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Unary call to SuperfluidUndelegationsByDelegator
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidUndelegationsByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidUndelegationsByDelegator(
    _ request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? []
    )
  }

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  ///
  /// - Parameters:
  ///   - request: Request to send to SuperfluidDelegationsByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func superfluidDelegationsByValidatorDenom(
    _ request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? []
    )
  }

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateSuperfluidDelegatedAmountByValidatorDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func estimateSuperfluidDelegatedAmountByValidatorDenom(
    _ request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? []
    )
  }
}

internal protocol Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetType'.
  func makeAssetTypeInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>]

  /// - Returns: Interceptors to use when invoking 'allAssets'.
  func makeAllAssetsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>]

  /// - Returns: Interceptors to use when invoking 'assetMultiplier'.
  func makeAssetMultiplierInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>]

  /// - Returns: Interceptors to use when invoking 'allIntermediaryAccounts'.
  func makeAllIntermediaryAccountsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'connectedIntermediaryAccount'.
  func makeConnectedIntermediaryAccountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>]

  /// - Returns: Interceptors to use when invoking 'totalSuperfluidDelegations'.
  func makeTotalSuperfluidDelegationsInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationAmount'.
  func makeSuperfluidDelegationAmountInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByDelegator'.
  func makeSuperfluidDelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidUndelegationsByDelegator'.
  func makeSuperfluidUndelegationsByDelegatorInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'superfluidDelegationsByValidatorDenom'.
  func makeSuperfluidDelegationsByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'estimateSuperfluidDelegatedAmountByValidatorDenom'.
  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() -> [ClientInterceptor<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>]
}

internal final class Osmosis_Superfluid_QueryClient: Osmosis_Superfluid_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.superfluid.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Superfluid_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Superfluid_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol? { get }

  /// Params returns the total set of minting parameters.
  func params(request: Osmosis_Superfluid_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_QueryParamsResponse>

  /// Returns superfluid asset type
  func assetType(request: Osmosis_Superfluid_AssetTypeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AssetTypeResponse>

  /// Returns all superfluid asset types
  func allAssets(request: Osmosis_Superfluid_AllAssetsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AllAssetsResponse>

  /// Returns superfluid asset Multiplier
  func assetMultiplier(request: Osmosis_Superfluid_AssetMultiplierRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AssetMultiplierResponse>

  /// Returns all superfluid intermediary account
  func allIntermediaryAccounts(request: Osmosis_Superfluid_AllIntermediaryAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_AllIntermediaryAccountsResponse>

  /// Returns intermediary account connected to a superfluid staked lock by id
  func connectedIntermediaryAccount(request: Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>

  /// Returns the total amount of osmo superfluidly staked
  /// response denominated in uosmo
  func totalSuperfluidDelegations(request: Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>

  /// Returns the coins superfluid delegated for a delegator, validator, denom
  /// triplet
  func superfluidDelegationAmount(request: Osmosis_Superfluid_SuperfluidDelegationAmountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationAmountResponse>

  /// Returns all the superfluid poistions for a specific delegator
  func superfluidDelegationsByDelegator(request: Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>

  func superfluidUndelegationsByDelegator(request: Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>

  /// Returns all the superfluid positions of a specific denom delegated to one
  /// validator
  func superfluidDelegationsByValidatorDenom(request: Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>

  /// Returns the amount of a specific denom delegated to a specific validator
  /// This is labeled an estimate, because the way it calculates the amount can
  /// lead rounding errors from the true delegated amount
  func estimateSuperfluidDelegatedAmountByValidatorDenom(request: Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>
}

extension Osmosis_Superfluid_QueryProvider {
  internal var serviceName: Substring { return "osmosis.superfluid.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "AssetType":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetTypeRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetTypeResponse>(),
        interceptors: self.interceptors?.makeAssetTypeInterceptors() ?? [],
        userFunction: self.assetType(request:context:)
      )

    case "AllAssets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllAssetsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllAssetsResponse>(),
        interceptors: self.interceptors?.makeAllAssetsInterceptors() ?? [],
        userFunction: self.allAssets(request:context:)
      )

    case "AssetMultiplier":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AssetMultiplierRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AssetMultiplierResponse>(),
        interceptors: self.interceptors?.makeAssetMultiplierInterceptors() ?? [],
        userFunction: self.assetMultiplier(request:context:)
      )

    case "AllIntermediaryAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_AllIntermediaryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_AllIntermediaryAccountsResponse>(),
        interceptors: self.interceptors?.makeAllIntermediaryAccountsInterceptors() ?? [],
        userFunction: self.allIntermediaryAccounts(request:context:)
      )

    case "ConnectedIntermediaryAccount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>(),
        interceptors: self.interceptors?.makeConnectedIntermediaryAccountInterceptors() ?? [],
        userFunction: self.connectedIntermediaryAccount(request:context:)
      )

    case "TotalSuperfluidDelegations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>(),
        interceptors: self.interceptors?.makeTotalSuperfluidDelegationsInterceptors() ?? [],
        userFunction: self.totalSuperfluidDelegations(request:context:)
      )

    case "SuperfluidDelegationAmount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationAmountRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationAmountResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationAmountInterceptors() ?? [],
        userFunction: self.superfluidDelegationAmount(request:context:)
      )

    case "SuperfluidDelegationsByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByDelegatorInterceptors() ?? [],
        userFunction: self.superfluidDelegationsByDelegator(request:context:)
      )

    case "SuperfluidUndelegationsByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>(),
        interceptors: self.interceptors?.makeSuperfluidUndelegationsByDelegatorInterceptors() ?? [],
        userFunction: self.superfluidUndelegationsByDelegator(request:context:)
      )

    case "SuperfluidDelegationsByValidatorDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeSuperfluidDelegationsByValidatorDenomInterceptors() ?? [],
        userFunction: self.superfluidDelegationsByValidatorDenom(request:context:)
      )

    case "EstimateSuperfluidDelegatedAmountByValidatorDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>(),
        interceptors: self.interceptors?.makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() ?? [],
        userFunction: self.estimateSuperfluidDelegatedAmountByValidatorDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Superfluid_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_QueryParamsRequest, Osmosis_Superfluid_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'assetType'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetTypeInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AssetTypeRequest, Osmosis_Superfluid_AssetTypeResponse>]

  /// - Returns: Interceptors to use when handling 'allAssets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllAssetsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AllAssetsRequest, Osmosis_Superfluid_AllAssetsResponse>]

  /// - Returns: Interceptors to use when handling 'assetMultiplier'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAssetMultiplierInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AssetMultiplierRequest, Osmosis_Superfluid_AssetMultiplierResponse>]

  /// - Returns: Interceptors to use when handling 'allIntermediaryAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllIntermediaryAccountsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_AllIntermediaryAccountsRequest, Osmosis_Superfluid_AllIntermediaryAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'connectedIntermediaryAccount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConnectedIntermediaryAccountInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_ConnectedIntermediaryAccountRequest, Osmosis_Superfluid_ConnectedIntermediaryAccountResponse>]

  /// - Returns: Interceptors to use when handling 'totalSuperfluidDelegations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalSuperfluidDelegationsInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_TotalSuperfluidDelegationsRequest, Osmosis_Superfluid_TotalSuperfluidDelegationsResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationAmount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationAmountInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationAmountRequest, Osmosis_Superfluid_SuperfluidDelegationAmountResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationsByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationsByDelegatorInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidDelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidUndelegationsByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidUndelegationsByDelegatorInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorRequest, Osmosis_Superfluid_SuperfluidUndelegationsByDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'superfluidDelegationsByValidatorDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSuperfluidDelegationsByValidatorDenomInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomRequest, Osmosis_Superfluid_SuperfluidDelegationsByValidatorDenomResponse>]

  /// - Returns: Interceptors to use when handling 'estimateSuperfluidDelegatedAmountByValidatorDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEstimateSuperfluidDelegatedAmountByValidatorDenomInterceptors() -> [ServerInterceptor<Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, Osmosis_Superfluid_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>]
}
