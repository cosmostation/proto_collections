// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/msgfees/v1/msgfees.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the set of params for the msgfees module.
struct Provenance_Msgfees_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// constant used to calculate fees when gas fees shares denom with msg fee
  var floorGasPrice: Cosmos_Base_V1beta1_Coin {
    get {return _floorGasPrice ?? Cosmos_Base_V1beta1_Coin()}
    set {_floorGasPrice = newValue}
  }
  /// Returns true if `floorGasPrice` has been explicitly set.
  var hasFloorGasPrice: Bool {return self._floorGasPrice != nil}
  /// Clears the value of `floorGasPrice`. Subsequent reads from it will return its default value.
  mutating func clearFloorGasPrice() {self._floorGasPrice = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _floorGasPrice: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgFee is the core of what gets stored on the blockchain
/// it consists of two parts
/// 1. the msg type url, i.e. /cosmos.bank.v1beta1.MsgSend
/// 2. minimum additional fees(can be of any denom)
struct Provenance_Msgfees_V1_MsgFee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msgTypeURL: String = String()

  /// additional_fee can pay in any Coin( basically a Denom and Amount, Amount can be zero)
  var additionalFee: Cosmos_Base_V1beta1_Coin {
    get {return _additionalFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_additionalFee = newValue}
  }
  /// Returns true if `additionalFee` has been explicitly set.
  var hasAdditionalFee: Bool {return self._additionalFee != nil}
  /// Clears the value of `additionalFee`. Subsequent reads from it will return its default value.
  mutating func clearAdditionalFee() {self._additionalFee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _additionalFee: Cosmos_Base_V1beta1_Coin? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "provenance.msgfees.v1"

extension Provenance_Msgfees_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "floor_gas_price"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._floorGasPrice) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._floorGasPrice {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Provenance_Msgfees_V1_Params, rhs: Provenance_Msgfees_V1_Params) -> Bool {
    if lhs._floorGasPrice != rhs._floorGasPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Msgfees_V1_MsgFee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgFee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "msg_type_url"),
    2: .standard(proto: "additional_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._additionalFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 1)
    }
    if let v = self._additionalFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Provenance_Msgfees_V1_MsgFee, rhs: Provenance_Msgfees_V1_MsgFee) -> Bool {
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs._additionalFee != rhs._additionalFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
