//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gravity/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Gravity_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Gravity_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Gravity_V1_ParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_ParamsRequest, Gravity_V1_ParamsResponse>

  func signerSetTx(
    _ request: Gravity_V1_SignerSetTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_SignerSetTxRequest, Gravity_V1_SignerSetTxResponse>

  func latestSignerSetTx(
    _ request: Gravity_V1_LatestSignerSetTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_LatestSignerSetTxRequest, Gravity_V1_SignerSetTxResponse>

  func batchTx(
    _ request: Gravity_V1_BatchTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_BatchTxRequest, Gravity_V1_BatchTxResponse>

  func contractCallTx(
    _ request: Gravity_V1_ContractCallTxRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_ContractCallTxRequest, Gravity_V1_ContractCallTxResponse>

  func signerSetTxs(
    _ request: Gravity_V1_SignerSetTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_SignerSetTxsRequest, Gravity_V1_SignerSetTxsResponse>

  func batchTxs(
    _ request: Gravity_V1_BatchTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_BatchTxsRequest, Gravity_V1_BatchTxsResponse>

  func contractCallTxs(
    _ request: Gravity_V1_ContractCallTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_ContractCallTxsRequest, Gravity_V1_ContractCallTxsResponse>

  func signerSetTxConfirmations(
    _ request: Gravity_V1_SignerSetTxConfirmationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_SignerSetTxConfirmationsRequest, Gravity_V1_SignerSetTxConfirmationsResponse>

  func batchTxConfirmations(
    _ request: Gravity_V1_BatchTxConfirmationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_BatchTxConfirmationsRequest, Gravity_V1_BatchTxConfirmationsResponse>

  func contractCallTxConfirmations(
    _ request: Gravity_V1_ContractCallTxConfirmationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_ContractCallTxConfirmationsRequest, Gravity_V1_ContractCallTxConfirmationsResponse>

  func unsignedSignerSetTxs(
    _ request: Gravity_V1_UnsignedSignerSetTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_UnsignedSignerSetTxsRequest, Gravity_V1_UnsignedSignerSetTxsResponse>

  func unsignedBatchTxs(
    _ request: Gravity_V1_UnsignedBatchTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_UnsignedBatchTxsRequest, Gravity_V1_UnsignedBatchTxsResponse>

  func unsignedContractCallTxs(
    _ request: Gravity_V1_UnsignedContractCallTxsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_UnsignedContractCallTxsRequest, Gravity_V1_UnsignedContractCallTxsResponse>

  func lastSubmittedEthereumEvent(
    _ request: Gravity_V1_LastSubmittedEthereumEventRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_LastSubmittedEthereumEventRequest, Gravity_V1_LastSubmittedEthereumEventResponse>

  func batchTxFees(
    _ request: Gravity_V1_BatchTxFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_BatchTxFeesRequest, Gravity_V1_BatchTxFeesResponse>

  func eRC20ToDenom(
    _ request: Gravity_V1_ERC20ToDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_ERC20ToDenomRequest, Gravity_V1_ERC20ToDenomResponse>

  func denomToERC20Params(
    _ request: Gravity_V1_DenomToERC20ParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DenomToERC20ParamsRequest, Gravity_V1_DenomToERC20ParamsResponse>

  func denomToERC20(
    _ request: Gravity_V1_DenomToERC20Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DenomToERC20Request, Gravity_V1_DenomToERC20Response>

  func batchedSendToEthereums(
    _ request: Gravity_V1_BatchedSendToEthereumsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_BatchedSendToEthereumsRequest, Gravity_V1_BatchedSendToEthereumsResponse>

  func unbatchedSendToEthereums(
    _ request: Gravity_V1_UnbatchedSendToEthereumsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_UnbatchedSendToEthereumsRequest, Gravity_V1_UnbatchedSendToEthereumsResponse>

  func delegateKeysByValidator(
    _ request: Gravity_V1_DelegateKeysByValidatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DelegateKeysByValidatorRequest, Gravity_V1_DelegateKeysByValidatorResponse>

  func delegateKeysByEthereumSigner(
    _ request: Gravity_V1_DelegateKeysByEthereumSignerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DelegateKeysByEthereumSignerRequest, Gravity_V1_DelegateKeysByEthereumSignerResponse>

  func delegateKeysByOrchestrator(
    _ request: Gravity_V1_DelegateKeysByOrchestratorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DelegateKeysByOrchestratorRequest, Gravity_V1_DelegateKeysByOrchestratorResponse>

  func delegateKeys(
    _ request: Gravity_V1_DelegateKeysRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_DelegateKeysRequest, Gravity_V1_DelegateKeysResponse>
}

extension Gravity_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "gravity.v1.Query"
  }

  /// Module parameters query
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Gravity_V1_ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_ParamsRequest, Gravity_V1_ParamsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// get info on individual outgoing data
  ///
  /// - Parameters:
  ///   - request: Request to send to SignerSetTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signerSetTx(
    _ request: Gravity_V1_SignerSetTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_SignerSetTxRequest, Gravity_V1_SignerSetTxResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/SignerSetTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignerSetTxInterceptors() ?? []
    )
  }

  /// option (google.api.http).get = "/gravity/v1/signer_set/latest";
  ///
  /// - Parameters:
  ///   - request: Request to send to LatestSignerSetTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func latestSignerSetTx(
    _ request: Gravity_V1_LatestSignerSetTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_LatestSignerSetTxRequest, Gravity_V1_SignerSetTxResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/LatestSignerSetTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLatestSignerSetTxInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/batch_txs/{token_contract}/{nonce}";
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchTx(
    _ request: Gravity_V1_BatchTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_BatchTxRequest, Gravity_V1_BatchTxResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/BatchTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchTxInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/contract_call_txs/{invalidation_id}/{invalidation_nonce}";
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractCallTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractCallTx(
    _ request: Gravity_V1_ContractCallTxRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_ContractCallTxRequest, Gravity_V1_ContractCallTxResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/ContractCallTx",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractCallTxInterceptors() ?? []
    )
  }

  /// get collections of outgoing traffic from the bridge
  ///
  /// - Parameters:
  ///   - request: Request to send to SignerSetTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signerSetTxs(
    _ request: Gravity_V1_SignerSetTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_SignerSetTxsRequest, Gravity_V1_SignerSetTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/SignerSetTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignerSetTxsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get = "/gravity/v1/batch/batch_txs";
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchTxs(
    _ request: Gravity_V1_BatchTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_BatchTxsRequest, Gravity_V1_BatchTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/BatchTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchTxsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get = "/gravity/v1/batch/contract_call_txs";
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractCallTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractCallTxs(
    _ request: Gravity_V1_ContractCallTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_ContractCallTxsRequest, Gravity_V1_ContractCallTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/ContractCallTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractCallTxsInterceptors() ?? []
    )
  }

  /// TODO: can/should we group these into one endpoint?
  ///
  /// - Parameters:
  ///   - request: Request to send to SignerSetTxConfirmations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signerSetTxConfirmations(
    _ request: Gravity_V1_SignerSetTxConfirmationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_SignerSetTxConfirmationsRequest, Gravity_V1_SignerSetTxConfirmationsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/SignerSetTxConfirmations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignerSetTxConfirmationsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/batch_txs/ethereum_signatures";
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchTxConfirmations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchTxConfirmations(
    _ request: Gravity_V1_BatchTxConfirmationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_BatchTxConfirmationsRequest, Gravity_V1_BatchTxConfirmationsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/BatchTxConfirmations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchTxConfirmationsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/logic_calls/ethereum_signatures";
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractCallTxConfirmations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractCallTxConfirmations(
    _ request: Gravity_V1_ContractCallTxConfirmationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_ContractCallTxConfirmationsRequest, Gravity_V1_ContractCallTxConfirmationsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/ContractCallTxConfirmations",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractCallTxConfirmationsInterceptors() ?? []
    )
  }

  /// pending ethereum signature queries for orchestrators to figure out which
  /// signatures they are missing
  /// TODO: can/should we group this into one endpoint?
  ///
  /// - Parameters:
  ///   - request: Request to send to UnsignedSignerSetTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unsignedSignerSetTxs(
    _ request: Gravity_V1_UnsignedSignerSetTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_UnsignedSignerSetTxsRequest, Gravity_V1_UnsignedSignerSetTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/UnsignedSignerSetTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsignedSignerSetTxsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get = "/gravity/v1/batches/{address}/pending";
  ///
  /// - Parameters:
  ///   - request: Request to send to UnsignedBatchTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unsignedBatchTxs(
    _ request: Gravity_V1_UnsignedBatchTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_UnsignedBatchTxsRequest, Gravity_V1_UnsignedBatchTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/UnsignedBatchTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsignedBatchTxsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/ContractCallTxs/{address}/pending";
  ///
  /// - Parameters:
  ///   - request: Request to send to UnsignedContractCallTxs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unsignedContractCallTxs(
    _ request: Gravity_V1_UnsignedContractCallTxsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_UnsignedContractCallTxsRequest, Gravity_V1_UnsignedContractCallTxsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/UnsignedContractCallTxs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnsignedContractCallTxsInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/oracle/event_nonce/{address}";
  ///
  /// - Parameters:
  ///   - request: Request to send to LastSubmittedEthereumEvent.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastSubmittedEthereumEvent(
    _ request: Gravity_V1_LastSubmittedEthereumEventRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_LastSubmittedEthereumEventRequest, Gravity_V1_LastSubmittedEthereumEventResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/LastSubmittedEthereumEvent",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastSubmittedEthereumEventInterceptors() ?? []
    )
  }

  /// Queries the fees for all pending batches, results are returned in sdk.Coin
  /// (fee_amount_int)(contract_address) style
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchTxFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchTxFees(
    _ request: Gravity_V1_BatchTxFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_BatchTxFeesRequest, Gravity_V1_BatchTxFeesResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/BatchTxFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchTxFeesInterceptors() ?? []
    )
  }

  /// Query for info about denoms tracked by gravity
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20ToDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20ToDenom(
    _ request: Gravity_V1_ERC20ToDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_ERC20ToDenomRequest, Gravity_V1_ERC20ToDenomResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/ERC20ToDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? []
    )
  }

  /// DenomToERC20Params implements a query that allows ERC-20 parameter information
  /// to be retrieved by a Cosmos base denomination.
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomToERC20Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomToERC20Params(
    _ request: Gravity_V1_DenomToERC20ParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DenomToERC20ParamsRequest, Gravity_V1_DenomToERC20ParamsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DenomToERC20Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20ParamsInterceptors() ?? []
    )
  }

  /// Query for info about denoms tracked by gravity
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomToERC20.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomToERC20(
    _ request: Gravity_V1_DenomToERC20Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DenomToERC20Request, Gravity_V1_DenomToERC20Response> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DenomToERC20",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? []
    )
  }

  /// Query for batch send to ethereums
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchedSendToEthereums.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchedSendToEthereums(
    _ request: Gravity_V1_BatchedSendToEthereumsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_BatchedSendToEthereumsRequest, Gravity_V1_BatchedSendToEthereumsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/BatchedSendToEthereums",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchedSendToEthereumsInterceptors() ?? []
    )
  }

  /// Query for unbatched send to ethereums
  ///
  /// - Parameters:
  ///   - request: Request to send to UnbatchedSendToEthereums.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unbatchedSendToEthereums(
    _ request: Gravity_V1_UnbatchedSendToEthereumsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_UnbatchedSendToEthereumsRequest, Gravity_V1_UnbatchedSendToEthereumsResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/UnbatchedSendToEthereums",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnbatchedSendToEthereumsInterceptors() ?? []
    )
  }

  /// delegate keys
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegateKeysByValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegateKeysByValidator(
    _ request: Gravity_V1_DelegateKeysByValidatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DelegateKeysByValidatorRequest, Gravity_V1_DelegateKeysByValidatorResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DelegateKeysByValidator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateKeysByValidatorInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys/ethereum/{ethereum_signer}";
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegateKeysByEthereumSigner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegateKeysByEthereumSigner(
    _ request: Gravity_V1_DelegateKeysByEthereumSignerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DelegateKeysByEthereumSignerRequest, Gravity_V1_DelegateKeysByEthereumSignerResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DelegateKeysByEthereumSigner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateKeysByEthereumSignerInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys/orchestrator/{orchestrator}";
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegateKeysByOrchestrator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegateKeysByOrchestrator(
    _ request: Gravity_V1_DelegateKeysByOrchestratorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DelegateKeysByOrchestratorRequest, Gravity_V1_DelegateKeysByOrchestratorResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DelegateKeysByOrchestrator",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateKeysByOrchestratorInterceptors() ?? []
    )
  }

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys";
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegateKeys.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegateKeys(
    _ request: Gravity_V1_DelegateKeysRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_DelegateKeysRequest, Gravity_V1_DelegateKeysResponse> {
    return self.makeUnaryCall(
      path: "/gravity.v1.Query/DelegateKeys",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegateKeysInterceptors() ?? []
    )
  }
}

internal protocol Gravity_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Gravity_V1_ParamsRequest, Gravity_V1_ParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'signerSetTx'.
  func makeSignerSetTxInterceptors() -> [ClientInterceptor<Gravity_V1_SignerSetTxRequest, Gravity_V1_SignerSetTxResponse>]

  /// - Returns: Interceptors to use when invoking 'latestSignerSetTx'.
  func makeLatestSignerSetTxInterceptors() -> [ClientInterceptor<Gravity_V1_LatestSignerSetTxRequest, Gravity_V1_SignerSetTxResponse>]

  /// - Returns: Interceptors to use when invoking 'batchTx'.
  func makeBatchTxInterceptors() -> [ClientInterceptor<Gravity_V1_BatchTxRequest, Gravity_V1_BatchTxResponse>]

  /// - Returns: Interceptors to use when invoking 'contractCallTx'.
  func makeContractCallTxInterceptors() -> [ClientInterceptor<Gravity_V1_ContractCallTxRequest, Gravity_V1_ContractCallTxResponse>]

  /// - Returns: Interceptors to use when invoking 'signerSetTxs'.
  func makeSignerSetTxsInterceptors() -> [ClientInterceptor<Gravity_V1_SignerSetTxsRequest, Gravity_V1_SignerSetTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'batchTxs'.
  func makeBatchTxsInterceptors() -> [ClientInterceptor<Gravity_V1_BatchTxsRequest, Gravity_V1_BatchTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'contractCallTxs'.
  func makeContractCallTxsInterceptors() -> [ClientInterceptor<Gravity_V1_ContractCallTxsRequest, Gravity_V1_ContractCallTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'signerSetTxConfirmations'.
  func makeSignerSetTxConfirmationsInterceptors() -> [ClientInterceptor<Gravity_V1_SignerSetTxConfirmationsRequest, Gravity_V1_SignerSetTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when invoking 'batchTxConfirmations'.
  func makeBatchTxConfirmationsInterceptors() -> [ClientInterceptor<Gravity_V1_BatchTxConfirmationsRequest, Gravity_V1_BatchTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when invoking 'contractCallTxConfirmations'.
  func makeContractCallTxConfirmationsInterceptors() -> [ClientInterceptor<Gravity_V1_ContractCallTxConfirmationsRequest, Gravity_V1_ContractCallTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when invoking 'unsignedSignerSetTxs'.
  func makeUnsignedSignerSetTxsInterceptors() -> [ClientInterceptor<Gravity_V1_UnsignedSignerSetTxsRequest, Gravity_V1_UnsignedSignerSetTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'unsignedBatchTxs'.
  func makeUnsignedBatchTxsInterceptors() -> [ClientInterceptor<Gravity_V1_UnsignedBatchTxsRequest, Gravity_V1_UnsignedBatchTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'unsignedContractCallTxs'.
  func makeUnsignedContractCallTxsInterceptors() -> [ClientInterceptor<Gravity_V1_UnsignedContractCallTxsRequest, Gravity_V1_UnsignedContractCallTxsResponse>]

  /// - Returns: Interceptors to use when invoking 'lastSubmittedEthereumEvent'.
  func makeLastSubmittedEthereumEventInterceptors() -> [ClientInterceptor<Gravity_V1_LastSubmittedEthereumEventRequest, Gravity_V1_LastSubmittedEthereumEventResponse>]

  /// - Returns: Interceptors to use when invoking 'batchTxFees'.
  func makeBatchTxFeesInterceptors() -> [ClientInterceptor<Gravity_V1_BatchTxFeesRequest, Gravity_V1_BatchTxFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20ToDenom'.
  func makeERC20ToDenomInterceptors() -> [ClientInterceptor<Gravity_V1_ERC20ToDenomRequest, Gravity_V1_ERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'denomToERC20Params'.
  func makeDenomToERC20ParamsInterceptors() -> [ClientInterceptor<Gravity_V1_DenomToERC20ParamsRequest, Gravity_V1_DenomToERC20ParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'denomToERC20'.
  func makeDenomToERC20Interceptors() -> [ClientInterceptor<Gravity_V1_DenomToERC20Request, Gravity_V1_DenomToERC20Response>]

  /// - Returns: Interceptors to use when invoking 'batchedSendToEthereums'.
  func makeBatchedSendToEthereumsInterceptors() -> [ClientInterceptor<Gravity_V1_BatchedSendToEthereumsRequest, Gravity_V1_BatchedSendToEthereumsResponse>]

  /// - Returns: Interceptors to use when invoking 'unbatchedSendToEthereums'.
  func makeUnbatchedSendToEthereumsInterceptors() -> [ClientInterceptor<Gravity_V1_UnbatchedSendToEthereumsRequest, Gravity_V1_UnbatchedSendToEthereumsResponse>]

  /// - Returns: Interceptors to use when invoking 'delegateKeysByValidator'.
  func makeDelegateKeysByValidatorInterceptors() -> [ClientInterceptor<Gravity_V1_DelegateKeysByValidatorRequest, Gravity_V1_DelegateKeysByValidatorResponse>]

  /// - Returns: Interceptors to use when invoking 'delegateKeysByEthereumSigner'.
  func makeDelegateKeysByEthereumSignerInterceptors() -> [ClientInterceptor<Gravity_V1_DelegateKeysByEthereumSignerRequest, Gravity_V1_DelegateKeysByEthereumSignerResponse>]

  /// - Returns: Interceptors to use when invoking 'delegateKeysByOrchestrator'.
  func makeDelegateKeysByOrchestratorInterceptors() -> [ClientInterceptor<Gravity_V1_DelegateKeysByOrchestratorRequest, Gravity_V1_DelegateKeysByOrchestratorResponse>]

  /// - Returns: Interceptors to use when invoking 'delegateKeys'.
  func makeDelegateKeysInterceptors() -> [ClientInterceptor<Gravity_V1_DelegateKeysRequest, Gravity_V1_DelegateKeysResponse>]
}

internal final class Gravity_V1_QueryClient: Gravity_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the gravity.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gravity_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Gravity_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Module parameters query
  func params(request: Gravity_V1_ParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_ParamsResponse>

  /// get info on individual outgoing data
  func signerSetTx(request: Gravity_V1_SignerSetTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_SignerSetTxResponse>

  /// option (google.api.http).get = "/gravity/v1/signer_set/latest";
  func latestSignerSetTx(request: Gravity_V1_LatestSignerSetTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_SignerSetTxResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/batch_txs/{token_contract}/{nonce}";
  func batchTx(request: Gravity_V1_BatchTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_BatchTxResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/contract_call_txs/{invalidation_id}/{invalidation_nonce}";
  func contractCallTx(request: Gravity_V1_ContractCallTxRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_ContractCallTxResponse>

  /// get collections of outgoing traffic from the bridge
  func signerSetTxs(request: Gravity_V1_SignerSetTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_SignerSetTxsResponse>

  /// option (google.api.http).get = "/gravity/v1/batch/batch_txs";
  func batchTxs(request: Gravity_V1_BatchTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_BatchTxsResponse>

  /// option (google.api.http).get = "/gravity/v1/batch/contract_call_txs";
  func contractCallTxs(request: Gravity_V1_ContractCallTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_ContractCallTxsResponse>

  /// TODO: can/should we group these into one endpoint?
  func signerSetTxConfirmations(request: Gravity_V1_SignerSetTxConfirmationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_SignerSetTxConfirmationsResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/batch_txs/ethereum_signatures";
  func batchTxConfirmations(request: Gravity_V1_BatchTxConfirmationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_BatchTxConfirmationsResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/logic_calls/ethereum_signatures";
  func contractCallTxConfirmations(request: Gravity_V1_ContractCallTxConfirmationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_ContractCallTxConfirmationsResponse>

  /// pending ethereum signature queries for orchestrators to figure out which
  /// signatures they are missing
  /// TODO: can/should we group this into one endpoint?
  func unsignedSignerSetTxs(request: Gravity_V1_UnsignedSignerSetTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_UnsignedSignerSetTxsResponse>

  /// option (google.api.http).get = "/gravity/v1/batches/{address}/pending";
  func unsignedBatchTxs(request: Gravity_V1_UnsignedBatchTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_UnsignedBatchTxsResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/ContractCallTxs/{address}/pending";
  func unsignedContractCallTxs(request: Gravity_V1_UnsignedContractCallTxsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_UnsignedContractCallTxsResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/oracle/event_nonce/{address}";
  func lastSubmittedEthereumEvent(request: Gravity_V1_LastSubmittedEthereumEventRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_LastSubmittedEthereumEventResponse>

  /// Queries the fees for all pending batches, results are returned in sdk.Coin
  /// (fee_amount_int)(contract_address) style
  func batchTxFees(request: Gravity_V1_BatchTxFeesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_BatchTxFeesResponse>

  /// Query for info about denoms tracked by gravity
  func eRC20ToDenom(request: Gravity_V1_ERC20ToDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_ERC20ToDenomResponse>

  /// DenomToERC20Params implements a query that allows ERC-20 parameter information
  /// to be retrieved by a Cosmos base denomination.
  func denomToERC20Params(request: Gravity_V1_DenomToERC20ParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DenomToERC20ParamsResponse>

  /// Query for info about denoms tracked by gravity
  func denomToERC20(request: Gravity_V1_DenomToERC20Request, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DenomToERC20Response>

  /// Query for batch send to ethereums
  func batchedSendToEthereums(request: Gravity_V1_BatchedSendToEthereumsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_BatchedSendToEthereumsResponse>

  /// Query for unbatched send to ethereums
  func unbatchedSendToEthereums(request: Gravity_V1_UnbatchedSendToEthereumsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_UnbatchedSendToEthereumsResponse>

  /// delegate keys
  func delegateKeysByValidator(request: Gravity_V1_DelegateKeysByValidatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DelegateKeysByValidatorResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys/ethereum/{ethereum_signer}";
  func delegateKeysByEthereumSigner(request: Gravity_V1_DelegateKeysByEthereumSignerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DelegateKeysByEthereumSignerResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys/orchestrator/{orchestrator}";
  func delegateKeysByOrchestrator(request: Gravity_V1_DelegateKeysByOrchestratorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DelegateKeysByOrchestratorResponse>

  /// option (google.api.http).get =
  /// "/gravity/v1/delegate_keys";
  func delegateKeys(request: Gravity_V1_DelegateKeysRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_DelegateKeysResponse>
}

extension Gravity_V1_QueryProvider {
  internal var serviceName: Substring { return "gravity.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_ParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "SignerSetTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_SignerSetTxRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_SignerSetTxResponse>(),
        interceptors: self.interceptors?.makeSignerSetTxInterceptors() ?? [],
        userFunction: self.signerSetTx(request:context:)
      )

    case "LatestSignerSetTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_LatestSignerSetTxRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_SignerSetTxResponse>(),
        interceptors: self.interceptors?.makeLatestSignerSetTxInterceptors() ?? [],
        userFunction: self.latestSignerSetTx(request:context:)
      )

    case "BatchTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_BatchTxRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_BatchTxResponse>(),
        interceptors: self.interceptors?.makeBatchTxInterceptors() ?? [],
        userFunction: self.batchTx(request:context:)
      )

    case "ContractCallTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_ContractCallTxRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_ContractCallTxResponse>(),
        interceptors: self.interceptors?.makeContractCallTxInterceptors() ?? [],
        userFunction: self.contractCallTx(request:context:)
      )

    case "SignerSetTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_SignerSetTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_SignerSetTxsResponse>(),
        interceptors: self.interceptors?.makeSignerSetTxsInterceptors() ?? [],
        userFunction: self.signerSetTxs(request:context:)
      )

    case "BatchTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_BatchTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_BatchTxsResponse>(),
        interceptors: self.interceptors?.makeBatchTxsInterceptors() ?? [],
        userFunction: self.batchTxs(request:context:)
      )

    case "ContractCallTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_ContractCallTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_ContractCallTxsResponse>(),
        interceptors: self.interceptors?.makeContractCallTxsInterceptors() ?? [],
        userFunction: self.contractCallTxs(request:context:)
      )

    case "SignerSetTxConfirmations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_SignerSetTxConfirmationsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_SignerSetTxConfirmationsResponse>(),
        interceptors: self.interceptors?.makeSignerSetTxConfirmationsInterceptors() ?? [],
        userFunction: self.signerSetTxConfirmations(request:context:)
      )

    case "BatchTxConfirmations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_BatchTxConfirmationsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_BatchTxConfirmationsResponse>(),
        interceptors: self.interceptors?.makeBatchTxConfirmationsInterceptors() ?? [],
        userFunction: self.batchTxConfirmations(request:context:)
      )

    case "ContractCallTxConfirmations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_ContractCallTxConfirmationsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_ContractCallTxConfirmationsResponse>(),
        interceptors: self.interceptors?.makeContractCallTxConfirmationsInterceptors() ?? [],
        userFunction: self.contractCallTxConfirmations(request:context:)
      )

    case "UnsignedSignerSetTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_UnsignedSignerSetTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_UnsignedSignerSetTxsResponse>(),
        interceptors: self.interceptors?.makeUnsignedSignerSetTxsInterceptors() ?? [],
        userFunction: self.unsignedSignerSetTxs(request:context:)
      )

    case "UnsignedBatchTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_UnsignedBatchTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_UnsignedBatchTxsResponse>(),
        interceptors: self.interceptors?.makeUnsignedBatchTxsInterceptors() ?? [],
        userFunction: self.unsignedBatchTxs(request:context:)
      )

    case "UnsignedContractCallTxs":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_UnsignedContractCallTxsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_UnsignedContractCallTxsResponse>(),
        interceptors: self.interceptors?.makeUnsignedContractCallTxsInterceptors() ?? [],
        userFunction: self.unsignedContractCallTxs(request:context:)
      )

    case "LastSubmittedEthereumEvent":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_LastSubmittedEthereumEventRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_LastSubmittedEthereumEventResponse>(),
        interceptors: self.interceptors?.makeLastSubmittedEthereumEventInterceptors() ?? [],
        userFunction: self.lastSubmittedEthereumEvent(request:context:)
      )

    case "BatchTxFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_BatchTxFeesRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_BatchTxFeesResponse>(),
        interceptors: self.interceptors?.makeBatchTxFeesInterceptors() ?? [],
        userFunction: self.batchTxFees(request:context:)
      )

    case "ERC20ToDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_ERC20ToDenomRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_ERC20ToDenomResponse>(),
        interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? [],
        userFunction: self.eRC20ToDenom(request:context:)
      )

    case "DenomToERC20Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DenomToERC20ParamsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DenomToERC20ParamsResponse>(),
        interceptors: self.interceptors?.makeDenomToERC20ParamsInterceptors() ?? [],
        userFunction: self.denomToERC20Params(request:context:)
      )

    case "DenomToERC20":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DenomToERC20Request>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DenomToERC20Response>(),
        interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? [],
        userFunction: self.denomToERC20(request:context:)
      )

    case "BatchedSendToEthereums":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_BatchedSendToEthereumsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_BatchedSendToEthereumsResponse>(),
        interceptors: self.interceptors?.makeBatchedSendToEthereumsInterceptors() ?? [],
        userFunction: self.batchedSendToEthereums(request:context:)
      )

    case "UnbatchedSendToEthereums":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_UnbatchedSendToEthereumsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_UnbatchedSendToEthereumsResponse>(),
        interceptors: self.interceptors?.makeUnbatchedSendToEthereumsInterceptors() ?? [],
        userFunction: self.unbatchedSendToEthereums(request:context:)
      )

    case "DelegateKeysByValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DelegateKeysByValidatorRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DelegateKeysByValidatorResponse>(),
        interceptors: self.interceptors?.makeDelegateKeysByValidatorInterceptors() ?? [],
        userFunction: self.delegateKeysByValidator(request:context:)
      )

    case "DelegateKeysByEthereumSigner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DelegateKeysByEthereumSignerRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DelegateKeysByEthereumSignerResponse>(),
        interceptors: self.interceptors?.makeDelegateKeysByEthereumSignerInterceptors() ?? [],
        userFunction: self.delegateKeysByEthereumSigner(request:context:)
      )

    case "DelegateKeysByOrchestrator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DelegateKeysByOrchestratorRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DelegateKeysByOrchestratorResponse>(),
        interceptors: self.interceptors?.makeDelegateKeysByOrchestratorInterceptors() ?? [],
        userFunction: self.delegateKeysByOrchestrator(request:context:)
      )

    case "DelegateKeys":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_DelegateKeysRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_DelegateKeysResponse>(),
        interceptors: self.interceptors?.makeDelegateKeysInterceptors() ?? [],
        userFunction: self.delegateKeys(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Gravity_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Gravity_V1_ParamsRequest, Gravity_V1_ParamsResponse>]

  /// - Returns: Interceptors to use when handling 'signerSetTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignerSetTxInterceptors() -> [ServerInterceptor<Gravity_V1_SignerSetTxRequest, Gravity_V1_SignerSetTxResponse>]

  /// - Returns: Interceptors to use when handling 'latestSignerSetTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLatestSignerSetTxInterceptors() -> [ServerInterceptor<Gravity_V1_LatestSignerSetTxRequest, Gravity_V1_SignerSetTxResponse>]

  /// - Returns: Interceptors to use when handling 'batchTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchTxInterceptors() -> [ServerInterceptor<Gravity_V1_BatchTxRequest, Gravity_V1_BatchTxResponse>]

  /// - Returns: Interceptors to use when handling 'contractCallTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractCallTxInterceptors() -> [ServerInterceptor<Gravity_V1_ContractCallTxRequest, Gravity_V1_ContractCallTxResponse>]

  /// - Returns: Interceptors to use when handling 'signerSetTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignerSetTxsInterceptors() -> [ServerInterceptor<Gravity_V1_SignerSetTxsRequest, Gravity_V1_SignerSetTxsResponse>]

  /// - Returns: Interceptors to use when handling 'batchTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchTxsInterceptors() -> [ServerInterceptor<Gravity_V1_BatchTxsRequest, Gravity_V1_BatchTxsResponse>]

  /// - Returns: Interceptors to use when handling 'contractCallTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractCallTxsInterceptors() -> [ServerInterceptor<Gravity_V1_ContractCallTxsRequest, Gravity_V1_ContractCallTxsResponse>]

  /// - Returns: Interceptors to use when handling 'signerSetTxConfirmations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignerSetTxConfirmationsInterceptors() -> [ServerInterceptor<Gravity_V1_SignerSetTxConfirmationsRequest, Gravity_V1_SignerSetTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when handling 'batchTxConfirmations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchTxConfirmationsInterceptors() -> [ServerInterceptor<Gravity_V1_BatchTxConfirmationsRequest, Gravity_V1_BatchTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when handling 'contractCallTxConfirmations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractCallTxConfirmationsInterceptors() -> [ServerInterceptor<Gravity_V1_ContractCallTxConfirmationsRequest, Gravity_V1_ContractCallTxConfirmationsResponse>]

  /// - Returns: Interceptors to use when handling 'unsignedSignerSetTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnsignedSignerSetTxsInterceptors() -> [ServerInterceptor<Gravity_V1_UnsignedSignerSetTxsRequest, Gravity_V1_UnsignedSignerSetTxsResponse>]

  /// - Returns: Interceptors to use when handling 'unsignedBatchTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnsignedBatchTxsInterceptors() -> [ServerInterceptor<Gravity_V1_UnsignedBatchTxsRequest, Gravity_V1_UnsignedBatchTxsResponse>]

  /// - Returns: Interceptors to use when handling 'unsignedContractCallTxs'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnsignedContractCallTxsInterceptors() -> [ServerInterceptor<Gravity_V1_UnsignedContractCallTxsRequest, Gravity_V1_UnsignedContractCallTxsResponse>]

  /// - Returns: Interceptors to use when handling 'lastSubmittedEthereumEvent'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastSubmittedEthereumEventInterceptors() -> [ServerInterceptor<Gravity_V1_LastSubmittedEthereumEventRequest, Gravity_V1_LastSubmittedEthereumEventResponse>]

  /// - Returns: Interceptors to use when handling 'batchTxFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchTxFeesInterceptors() -> [ServerInterceptor<Gravity_V1_BatchTxFeesRequest, Gravity_V1_BatchTxFeesResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20ToDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20ToDenomInterceptors() -> [ServerInterceptor<Gravity_V1_ERC20ToDenomRequest, Gravity_V1_ERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when handling 'denomToERC20Params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomToERC20ParamsInterceptors() -> [ServerInterceptor<Gravity_V1_DenomToERC20ParamsRequest, Gravity_V1_DenomToERC20ParamsResponse>]

  /// - Returns: Interceptors to use when handling 'denomToERC20'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomToERC20Interceptors() -> [ServerInterceptor<Gravity_V1_DenomToERC20Request, Gravity_V1_DenomToERC20Response>]

  /// - Returns: Interceptors to use when handling 'batchedSendToEthereums'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchedSendToEthereumsInterceptors() -> [ServerInterceptor<Gravity_V1_BatchedSendToEthereumsRequest, Gravity_V1_BatchedSendToEthereumsResponse>]

  /// - Returns: Interceptors to use when handling 'unbatchedSendToEthereums'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnbatchedSendToEthereumsInterceptors() -> [ServerInterceptor<Gravity_V1_UnbatchedSendToEthereumsRequest, Gravity_V1_UnbatchedSendToEthereumsResponse>]

  /// - Returns: Interceptors to use when handling 'delegateKeysByValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegateKeysByValidatorInterceptors() -> [ServerInterceptor<Gravity_V1_DelegateKeysByValidatorRequest, Gravity_V1_DelegateKeysByValidatorResponse>]

  /// - Returns: Interceptors to use when handling 'delegateKeysByEthereumSigner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegateKeysByEthereumSignerInterceptors() -> [ServerInterceptor<Gravity_V1_DelegateKeysByEthereumSignerRequest, Gravity_V1_DelegateKeysByEthereumSignerResponse>]

  /// - Returns: Interceptors to use when handling 'delegateKeysByOrchestrator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegateKeysByOrchestratorInterceptors() -> [ServerInterceptor<Gravity_V1_DelegateKeysByOrchestratorRequest, Gravity_V1_DelegateKeysByOrchestratorResponse>]

  /// - Returns: Interceptors to use when handling 'delegateKeys'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegateKeysInterceptors() -> [ServerInterceptor<Gravity_V1_DelegateKeysRequest, Gravity_V1_DelegateKeysResponse>]
}
