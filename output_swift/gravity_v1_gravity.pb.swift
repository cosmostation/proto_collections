// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gravity/v1/gravity.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EthereumEventVoteRecord is an event that is pending of confirmation by 2/3 of
/// the signer set. The event is then attested and executed in the state machine
/// once the required threshold is met.
struct Gravity_V1_EthereumEventVoteRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: Google_Protobuf_Any {
    get {return _event ?? Google_Protobuf_Any()}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  var votes: [String] = []

  var accepted: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _event: Google_Protobuf_Any? = nil
}

/// LatestEthereumBlockHeight defines the latest observed ethereum block height
/// and the corresponding timestamp value in nanoseconds.
struct Gravity_V1_LatestEthereumBlockHeight {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ethereumHeight: UInt64 = 0

  var cosmosHeight: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EthereumSigner represents a cosmos validator with its corresponding bridge
/// operator ethereum address and its staking consensus power.
struct Gravity_V1_EthereumSigner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var power: UInt64 = 0

  var ethereumAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SignerSetTx is the Ethereum Bridge multisig set that relays
/// transactions the two chains. The staking validators keep ethereum keys which
/// are used to check signatures on Ethereum in order to get significant gas
/// savings.
struct Gravity_V1_SignerSetTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonce: UInt64 = 0

  var height: UInt64 = 0

  var signers: [Gravity_V1_EthereumSigner] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BatchTx represents a batch of transactions going from Cosmos to Ethereum.
/// Batch txs are are identified by a unique hash and the token contract that is
/// shared by all the SendToEthereum
struct Gravity_V1_BatchTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var batchNonce: UInt64 = 0

  var timeout: UInt64 = 0

  var transactions: [Gravity_V1_SendToEthereum] = []

  var tokenContract: String = String()

  var height: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SendToEthereum represents an individual SendToEthereum from Cosmos to
/// Ethereum
struct Gravity_V1_SendToEthereum {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var sender: String = String()

  var ethereumRecipient: String = String()

  var erc20Token: Gravity_V1_ERC20Token {
    get {return _erc20Token ?? Gravity_V1_ERC20Token()}
    set {_erc20Token = newValue}
  }
  /// Returns true if `erc20Token` has been explicitly set.
  var hasErc20Token: Bool {return self._erc20Token != nil}
  /// Clears the value of `erc20Token`. Subsequent reads from it will return its default value.
  mutating func clearErc20Token() {self._erc20Token = nil}

  var erc20Fee: Gravity_V1_ERC20Token {
    get {return _erc20Fee ?? Gravity_V1_ERC20Token()}
    set {_erc20Fee = newValue}
  }
  /// Returns true if `erc20Fee` has been explicitly set.
  var hasErc20Fee: Bool {return self._erc20Fee != nil}
  /// Clears the value of `erc20Fee`. Subsequent reads from it will return its default value.
  mutating func clearErc20Fee() {self._erc20Fee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _erc20Token: Gravity_V1_ERC20Token? = nil
  fileprivate var _erc20Fee: Gravity_V1_ERC20Token? = nil
}

/// ContractCallTx represents an individual arbitrary logic call transaction
/// from Cosmos to Ethereum.
struct Gravity_V1_ContractCallTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var invalidationNonce: UInt64 = 0

  var invalidationScope: Data = Data()

  var address: String = String()

  var payload: Data = Data()

  var timeout: UInt64 = 0

  var tokens: [Gravity_V1_ERC20Token] = []

  var fees: [Gravity_V1_ERC20Token] = []

  var height: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gravity_V1_ERC20Token {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contract: String = String()

  var amount: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Gravity_V1_IDSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ids: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gravity.v1"

extension Gravity_V1_EthereumEventVoteRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EthereumEventVoteRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "votes"),
    3: .same(proto: "accepted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._event) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.votes) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.accepted) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._event {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedStringField(value: self.votes, fieldNumber: 2)
    }
    if self.accepted != false {
      try visitor.visitSingularBoolField(value: self.accepted, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_EthereumEventVoteRecord, rhs: Gravity_V1_EthereumEventVoteRecord) -> Bool {
    if lhs._event != rhs._event {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.accepted != rhs.accepted {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_LatestEthereumBlockHeight: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatestEthereumBlockHeight"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ethereum_height"),
    2: .standard(proto: "cosmos_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.ethereumHeight) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.cosmosHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.ethereumHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.ethereumHeight, fieldNumber: 1)
    }
    if self.cosmosHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.cosmosHeight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_LatestEthereumBlockHeight, rhs: Gravity_V1_LatestEthereumBlockHeight) -> Bool {
    if lhs.ethereumHeight != rhs.ethereumHeight {return false}
    if lhs.cosmosHeight != rhs.cosmosHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_EthereumSigner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EthereumSigner"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "power"),
    2: .standard(proto: "ethereum_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.power) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ethereumAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.power != 0 {
      try visitor.visitSingularUInt64Field(value: self.power, fieldNumber: 1)
    }
    if !self.ethereumAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ethereumAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_EthereumSigner, rhs: Gravity_V1_EthereumSigner) -> Bool {
    if lhs.power != rhs.power {return false}
    if lhs.ethereumAddress != rhs.ethereumAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_SignerSetTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignerSetTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
    2: .same(proto: "height"),
    3: .same(proto: "signers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nonce) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.signers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.nonce, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 2)
    }
    if !self.signers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_SignerSetTx, rhs: Gravity_V1_SignerSetTx) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs.height != rhs.height {return false}
    if lhs.signers != rhs.signers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_BatchTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatchTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "batch_nonce"),
    2: .same(proto: "timeout"),
    3: .same(proto: "transactions"),
    4: .standard(proto: "token_contract"),
    5: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.batchNonce) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.timeout) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.transactions) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.tokenContract) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.batchNonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.batchNonce, fieldNumber: 1)
    }
    if self.timeout != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeout, fieldNumber: 2)
    }
    if !self.transactions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.transactions, fieldNumber: 3)
    }
    if !self.tokenContract.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenContract, fieldNumber: 4)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_BatchTx, rhs: Gravity_V1_BatchTx) -> Bool {
    if lhs.batchNonce != rhs.batchNonce {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.transactions != rhs.transactions {return false}
    if lhs.tokenContract != rhs.tokenContract {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_SendToEthereum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendToEthereum"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "sender"),
    3: .standard(proto: "ethereum_recipient"),
    4: .standard(proto: "erc20_token"),
    5: .standard(proto: "erc20_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.ethereumRecipient) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._erc20Token) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._erc20Fee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 2)
    }
    if !self.ethereumRecipient.isEmpty {
      try visitor.visitSingularStringField(value: self.ethereumRecipient, fieldNumber: 3)
    }
    if let v = self._erc20Token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._erc20Fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_SendToEthereum, rhs: Gravity_V1_SendToEthereum) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.ethereumRecipient != rhs.ethereumRecipient {return false}
    if lhs._erc20Token != rhs._erc20Token {return false}
    if lhs._erc20Fee != rhs._erc20Fee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_ContractCallTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCallTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "invalidation_nonce"),
    2: .standard(proto: "invalidation_scope"),
    3: .same(proto: "address"),
    4: .same(proto: "payload"),
    5: .same(proto: "timeout"),
    6: .same(proto: "tokens"),
    7: .same(proto: "fees"),
    8: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.invalidationNonce) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.invalidationScope) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.timeout) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.tokens) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.invalidationNonce != 0 {
      try visitor.visitSingularUInt64Field(value: self.invalidationNonce, fieldNumber: 1)
    }
    if !self.invalidationScope.isEmpty {
      try visitor.visitSingularBytesField(value: self.invalidationScope, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 4)
    }
    if self.timeout != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeout, fieldNumber: 5)
    }
    if !self.tokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tokens, fieldNumber: 6)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 7)
    }
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_ContractCallTx, rhs: Gravity_V1_ContractCallTx) -> Bool {
    if lhs.invalidationNonce != rhs.invalidationNonce {return false}
    if lhs.invalidationScope != rhs.invalidationScope {return false}
    if lhs.address != rhs.address {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.timeout != rhs.timeout {return false}
    if lhs.tokens != rhs.tokens {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_ERC20Token: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ERC20Token"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "contract"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contract) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_ERC20Token, rhs: Gravity_V1_ERC20Token) -> Bool {
    if lhs.contract != rhs.contract {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gravity_V1_IDSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IDSet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ids"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt64Field(value: &self.ids) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ids.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.ids, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gravity_V1_IDSet, rhs: Gravity_V1_IDSet) -> Bool {
    if lhs.ids != rhs.ids {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
