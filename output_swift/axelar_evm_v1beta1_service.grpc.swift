//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: axelar/evm/v1beta1/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the evm Msg service.
///
/// Usage: instantiate `Axelar_Evm_V1beta1_MsgServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Evm_V1beta1_MsgServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? { get }

  func link(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>

  func confirmChain(
    _ request: Axelar_Evm_V1beta1_ConfirmChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmChainRequest, Axelar_Evm_V1beta1_ConfirmChainResponse>

  func confirmGatewayDeployment(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse>

  func confirmToken(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>

  func confirmDeposit(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>

  func confirmTransferKey(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>

  func voteConfirmChain(
    _ request: Axelar_Evm_V1beta1_VoteConfirmChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmChainRequest, Axelar_Evm_V1beta1_VoteConfirmChainResponse>

  func voteConfirmGatewayDeployment(
    _ request: Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse>

  func voteConfirmDeposit(
    _ request: Axelar_Evm_V1beta1_VoteConfirmDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmDepositRequest, Axelar_Evm_V1beta1_VoteConfirmDepositResponse>

  func voteConfirmToken(
    _ request: Axelar_Evm_V1beta1_VoteConfirmTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmTokenRequest, Axelar_Evm_V1beta1_VoteConfirmTokenResponse>

  func voteConfirmTransferKey(
    _ request: Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest, Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse>

  func createDeployToken(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>

  func createBurnTokens(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>

  func createPendingTransfers(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>

  func createTransferOwnership(
    _ request: Axelar_Evm_V1beta1_CreateTransferOwnershipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOwnershipRequest, Axelar_Evm_V1beta1_CreateTransferOwnershipResponse>

  func createTransferOperatorship(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>

  func signCommands(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>

  func addChain(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>
}

extension Axelar_Evm_V1beta1_MsgServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.evm.v1beta1.MsgService"
  }

  /// Unary call to Link
  ///
  /// - Parameters:
  ///   - request: Request to send to Link.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func link(
    _ request: Axelar_Evm_V1beta1_LinkRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/Link",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLinkInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmChain
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmChain(
    _ request: Axelar_Evm_V1beta1_ConfirmChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmChainRequest, Axelar_Evm_V1beta1_ConfirmChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/ConfirmChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmChainInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmGatewayDeployment
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmGatewayDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmGatewayDeployment(
    _ request: Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/ConfirmGatewayDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmGatewayDeploymentInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmToken
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmToken(
    _ request: Axelar_Evm_V1beta1_ConfirmTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/ConfirmToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmDeposit
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmDeposit(
    _ request: Axelar_Evm_V1beta1_ConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/ConfirmDeposit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? []
    )
  }

  /// Unary call to ConfirmTransferKey
  ///
  /// - Parameters:
  ///   - request: Request to send to ConfirmTransferKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func confirmTransferKey(
    _ request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/ConfirmTransferKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? []
    )
  }

  /// Unary call to VoteConfirmChain
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteConfirmChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteConfirmChain(
    _ request: Axelar_Evm_V1beta1_VoteConfirmChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmChainRequest, Axelar_Evm_V1beta1_VoteConfirmChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/VoteConfirmChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteConfirmChainInterceptors() ?? []
    )
  }

  /// Unary call to VoteConfirmGatewayDeployment
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteConfirmGatewayDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteConfirmGatewayDeployment(
    _ request: Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/VoteConfirmGatewayDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteConfirmGatewayDeploymentInterceptors() ?? []
    )
  }

  /// Unary call to VoteConfirmDeposit
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteConfirmDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteConfirmDeposit(
    _ request: Axelar_Evm_V1beta1_VoteConfirmDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmDepositRequest, Axelar_Evm_V1beta1_VoteConfirmDepositResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/VoteConfirmDeposit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteConfirmDepositInterceptors() ?? []
    )
  }

  /// Unary call to VoteConfirmToken
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteConfirmToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteConfirmToken(
    _ request: Axelar_Evm_V1beta1_VoteConfirmTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmTokenRequest, Axelar_Evm_V1beta1_VoteConfirmTokenResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/VoteConfirmToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteConfirmTokenInterceptors() ?? []
    )
  }

  /// Unary call to VoteConfirmTransferKey
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteConfirmTransferKey.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteConfirmTransferKey(
    _ request: Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest, Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/VoteConfirmTransferKey",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteConfirmTransferKeyInterceptors() ?? []
    )
  }

  /// Unary call to CreateDeployToken
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDeployToken(
    _ request: Axelar_Evm_V1beta1_CreateDeployTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/CreateDeployToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? []
    )
  }

  /// Unary call to CreateBurnTokens
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBurnTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBurnTokens(
    _ request: Axelar_Evm_V1beta1_CreateBurnTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/CreateBurnTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? []
    )
  }

  /// Unary call to CreatePendingTransfers
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePendingTransfers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPendingTransfers(
    _ request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/CreatePendingTransfers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? []
    )
  }

  /// Unary call to CreateTransferOwnership
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransferOwnership.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTransferOwnership(
    _ request: Axelar_Evm_V1beta1_CreateTransferOwnershipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOwnershipRequest, Axelar_Evm_V1beta1_CreateTransferOwnershipResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/CreateTransferOwnership",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransferOwnershipInterceptors() ?? []
    )
  }

  /// Unary call to CreateTransferOperatorship
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTransferOperatorship.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTransferOperatorship(
    _ request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/CreateTransferOperatorship",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? []
    )
  }

  /// Unary call to SignCommands
  ///
  /// - Parameters:
  ///   - request: Request to send to SignCommands.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signCommands(
    _ request: Axelar_Evm_V1beta1_SignCommandsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/SignCommands",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? []
    )
  }

  /// Unary call to AddChain
  ///
  /// - Parameters:
  ///   - request: Request to send to AddChain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addChain(
    _ request: Axelar_Evm_V1beta1_AddChainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.MsgService/AddChain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddChainInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'link'.
  func makeLinkInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmChain'.
  func makeConfirmChainInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmChainRequest, Axelar_Evm_V1beta1_ConfirmChainResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmGatewayDeployment'.
  func makeConfirmGatewayDeploymentInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmToken'.
  func makeConfirmTokenInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmDeposit'.
  func makeConfirmDepositInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'confirmTransferKey'.
  func makeConfirmTransferKeyInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'voteConfirmChain'.
  func makeVoteConfirmChainInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_VoteConfirmChainRequest, Axelar_Evm_V1beta1_VoteConfirmChainResponse>]

  /// - Returns: Interceptors to use when invoking 'voteConfirmGatewayDeployment'.
  func makeVoteConfirmGatewayDeploymentInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse>]

  /// - Returns: Interceptors to use when invoking 'voteConfirmDeposit'.
  func makeVoteConfirmDepositInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_VoteConfirmDepositRequest, Axelar_Evm_V1beta1_VoteConfirmDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'voteConfirmToken'.
  func makeVoteConfirmTokenInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_VoteConfirmTokenRequest, Axelar_Evm_V1beta1_VoteConfirmTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'voteConfirmTransferKey'.
  func makeVoteConfirmTransferKeyInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest, Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when invoking 'createDeployToken'.
  func makeCreateDeployTokenInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'createBurnTokens'.
  func makeCreateBurnTokensInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'createPendingTransfers'.
  func makeCreatePendingTransfersInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>]

  /// - Returns: Interceptors to use when invoking 'createTransferOwnership'.
  func makeCreateTransferOwnershipInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateTransferOwnershipRequest, Axelar_Evm_V1beta1_CreateTransferOwnershipResponse>]

  /// - Returns: Interceptors to use when invoking 'createTransferOperatorship'.
  func makeCreateTransferOperatorshipInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>]

  /// - Returns: Interceptors to use when invoking 'signCommands'.
  func makeSignCommandsInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>]

  /// - Returns: Interceptors to use when invoking 'addChain'.
  func makeAddChainInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>]
}

internal final class Axelar_Evm_V1beta1_MsgServiceClient: Axelar_Evm_V1beta1_MsgServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.evm.v1beta1.MsgService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_MsgServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryService defines the gRPC querier service.
///
/// Usage: instantiate `Axelar_Evm_V1beta1_QueryServiceClient`, then call methods of this protocol to make API calls.
internal protocol Axelar_Evm_V1beta1_QueryServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? { get }

  func burnerInfo(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>
}

extension Axelar_Evm_V1beta1_QueryServiceClientProtocol {
  internal var serviceName: String {
    return "axelar.evm.v1beta1.QueryService"
  }

  /// BurnerInfo queries the burner info for the specified address
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnerInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnerInfo(
    _ request: Axelar_Evm_V1beta1_BurnerInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse> {
    return self.makeUnaryCall(
      path: "/axelar.evm.v1beta1.QueryService/BurnerInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? []
    )
  }
}

internal protocol Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'burnerInfo'.
  func makeBurnerInfoInterceptors() -> [ClientInterceptor<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>]
}

internal final class Axelar_Evm_V1beta1_QueryServiceClient: Axelar_Evm_V1beta1_QueryServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the axelar.evm.v1beta1.QueryService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Axelar_Evm_V1beta1_QueryServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the evm Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Evm_V1beta1_MsgServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol? { get }

  func link(request: Axelar_Evm_V1beta1_LinkRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_LinkResponse>

  func confirmChain(request: Axelar_Evm_V1beta1_ConfirmChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmChainResponse>

  func confirmGatewayDeployment(request: Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse>

  func confirmToken(request: Axelar_Evm_V1beta1_ConfirmTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmTokenResponse>

  func confirmDeposit(request: Axelar_Evm_V1beta1_ConfirmDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmDepositResponse>

  func confirmTransferKey(request: Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>

  func voteConfirmChain(request: Axelar_Evm_V1beta1_VoteConfirmChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_VoteConfirmChainResponse>

  func voteConfirmGatewayDeployment(request: Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse>

  func voteConfirmDeposit(request: Axelar_Evm_V1beta1_VoteConfirmDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_VoteConfirmDepositResponse>

  func voteConfirmToken(request: Axelar_Evm_V1beta1_VoteConfirmTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_VoteConfirmTokenResponse>

  func voteConfirmTransferKey(request: Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse>

  func createDeployToken(request: Axelar_Evm_V1beta1_CreateDeployTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateDeployTokenResponse>

  func createBurnTokens(request: Axelar_Evm_V1beta1_CreateBurnTokensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateBurnTokensResponse>

  func createPendingTransfers(request: Axelar_Evm_V1beta1_CreatePendingTransfersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreatePendingTransfersResponse>

  func createTransferOwnership(request: Axelar_Evm_V1beta1_CreateTransferOwnershipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateTransferOwnershipResponse>

  func createTransferOperatorship(request: Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>

  func signCommands(request: Axelar_Evm_V1beta1_SignCommandsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_SignCommandsResponse>

  func addChain(request: Axelar_Evm_V1beta1_AddChainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_AddChainResponse>
}

extension Axelar_Evm_V1beta1_MsgServiceProvider {
  internal var serviceName: Substring { return "axelar.evm.v1beta1.MsgService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Link":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_LinkRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_LinkResponse>(),
        interceptors: self.interceptors?.makeLinkInterceptors() ?? [],
        userFunction: self.link(request:context:)
      )

    case "ConfirmChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmChainResponse>(),
        interceptors: self.interceptors?.makeConfirmChainInterceptors() ?? [],
        userFunction: self.confirmChain(request:context:)
      )

    case "ConfirmGatewayDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse>(),
        interceptors: self.interceptors?.makeConfirmGatewayDeploymentInterceptors() ?? [],
        userFunction: self.confirmGatewayDeployment(request:context:)
      )

    case "ConfirmToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTokenResponse>(),
        interceptors: self.interceptors?.makeConfirmTokenInterceptors() ?? [],
        userFunction: self.confirmToken(request:context:)
      )

    case "ConfirmDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeConfirmDepositInterceptors() ?? [],
        userFunction: self.confirmDeposit(request:context:)
      )

    case "ConfirmTransferKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>(),
        interceptors: self.interceptors?.makeConfirmTransferKeyInterceptors() ?? [],
        userFunction: self.confirmTransferKey(request:context:)
      )

    case "VoteConfirmChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_VoteConfirmChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_VoteConfirmChainResponse>(),
        interceptors: self.interceptors?.makeVoteConfirmChainInterceptors() ?? [],
        userFunction: self.voteConfirmChain(request:context:)
      )

    case "VoteConfirmGatewayDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse>(),
        interceptors: self.interceptors?.makeVoteConfirmGatewayDeploymentInterceptors() ?? [],
        userFunction: self.voteConfirmGatewayDeployment(request:context:)
      )

    case "VoteConfirmDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_VoteConfirmDepositRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_VoteConfirmDepositResponse>(),
        interceptors: self.interceptors?.makeVoteConfirmDepositInterceptors() ?? [],
        userFunction: self.voteConfirmDeposit(request:context:)
      )

    case "VoteConfirmToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_VoteConfirmTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_VoteConfirmTokenResponse>(),
        interceptors: self.interceptors?.makeVoteConfirmTokenInterceptors() ?? [],
        userFunction: self.voteConfirmToken(request:context:)
      )

    case "VoteConfirmTransferKey":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse>(),
        interceptors: self.interceptors?.makeVoteConfirmTransferKeyInterceptors() ?? [],
        userFunction: self.voteConfirmTransferKey(request:context:)
      )

    case "CreateDeployToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateDeployTokenRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateDeployTokenResponse>(),
        interceptors: self.interceptors?.makeCreateDeployTokenInterceptors() ?? [],
        userFunction: self.createDeployToken(request:context:)
      )

    case "CreateBurnTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateBurnTokensRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateBurnTokensResponse>(),
        interceptors: self.interceptors?.makeCreateBurnTokensInterceptors() ?? [],
        userFunction: self.createBurnTokens(request:context:)
      )

    case "CreatePendingTransfers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreatePendingTransfersRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreatePendingTransfersResponse>(),
        interceptors: self.interceptors?.makeCreatePendingTransfersInterceptors() ?? [],
        userFunction: self.createPendingTransfers(request:context:)
      )

    case "CreateTransferOwnership":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateTransferOwnershipRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateTransferOwnershipResponse>(),
        interceptors: self.interceptors?.makeCreateTransferOwnershipInterceptors() ?? [],
        userFunction: self.createTransferOwnership(request:context:)
      )

    case "CreateTransferOperatorship":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>(),
        interceptors: self.interceptors?.makeCreateTransferOperatorshipInterceptors() ?? [],
        userFunction: self.createTransferOperatorship(request:context:)
      )

    case "SignCommands":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_SignCommandsRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_SignCommandsResponse>(),
        interceptors: self.interceptors?.makeSignCommandsInterceptors() ?? [],
        userFunction: self.signCommands(request:context:)
      )

    case "AddChain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_AddChainRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_AddChainResponse>(),
        interceptors: self.interceptors?.makeAddChainInterceptors() ?? [],
        userFunction: self.addChain(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Evm_V1beta1_MsgServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'link'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLinkInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_LinkRequest, Axelar_Evm_V1beta1_LinkResponse>]

  /// - Returns: Interceptors to use when handling 'confirmChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmChainInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmChainRequest, Axelar_Evm_V1beta1_ConfirmChainResponse>]

  /// - Returns: Interceptors to use when handling 'confirmGatewayDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmGatewayDeploymentInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_ConfirmGatewayDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'confirmToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmTokenInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmTokenRequest, Axelar_Evm_V1beta1_ConfirmTokenResponse>]

  /// - Returns: Interceptors to use when handling 'confirmDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmDepositInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmDepositRequest, Axelar_Evm_V1beta1_ConfirmDepositResponse>]

  /// - Returns: Interceptors to use when handling 'confirmTransferKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConfirmTransferKeyInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_ConfirmTransferKeyRequest, Axelar_Evm_V1beta1_ConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when handling 'voteConfirmChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteConfirmChainInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_VoteConfirmChainRequest, Axelar_Evm_V1beta1_VoteConfirmChainResponse>]

  /// - Returns: Interceptors to use when handling 'voteConfirmGatewayDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteConfirmGatewayDeploymentInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentRequest, Axelar_Evm_V1beta1_VoteConfirmGatewayDeploymentResponse>]

  /// - Returns: Interceptors to use when handling 'voteConfirmDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteConfirmDepositInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_VoteConfirmDepositRequest, Axelar_Evm_V1beta1_VoteConfirmDepositResponse>]

  /// - Returns: Interceptors to use when handling 'voteConfirmToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteConfirmTokenInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_VoteConfirmTokenRequest, Axelar_Evm_V1beta1_VoteConfirmTokenResponse>]

  /// - Returns: Interceptors to use when handling 'voteConfirmTransferKey'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeVoteConfirmTransferKeyInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_VoteConfirmTransferKeyRequest, Axelar_Evm_V1beta1_VoteConfirmTransferKeyResponse>]

  /// - Returns: Interceptors to use when handling 'createDeployToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeployTokenInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateDeployTokenRequest, Axelar_Evm_V1beta1_CreateDeployTokenResponse>]

  /// - Returns: Interceptors to use when handling 'createBurnTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBurnTokensInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateBurnTokensRequest, Axelar_Evm_V1beta1_CreateBurnTokensResponse>]

  /// - Returns: Interceptors to use when handling 'createPendingTransfers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePendingTransfersInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreatePendingTransfersRequest, Axelar_Evm_V1beta1_CreatePendingTransfersResponse>]

  /// - Returns: Interceptors to use when handling 'createTransferOwnership'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTransferOwnershipInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateTransferOwnershipRequest, Axelar_Evm_V1beta1_CreateTransferOwnershipResponse>]

  /// - Returns: Interceptors to use when handling 'createTransferOperatorship'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTransferOperatorshipInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_CreateTransferOperatorshipRequest, Axelar_Evm_V1beta1_CreateTransferOperatorshipResponse>]

  /// - Returns: Interceptors to use when handling 'signCommands'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignCommandsInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_SignCommandsRequest, Axelar_Evm_V1beta1_SignCommandsResponse>]

  /// - Returns: Interceptors to use when handling 'addChain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddChainInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_AddChainRequest, Axelar_Evm_V1beta1_AddChainResponse>]
}
/// QueryService defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Axelar_Evm_V1beta1_QueryServiceProvider: CallHandlerProvider {
  var interceptors: Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol? { get }

  /// BurnerInfo queries the burner info for the specified address
  func burnerInfo(request: Axelar_Evm_V1beta1_BurnerInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Axelar_Evm_V1beta1_BurnerInfoResponse>
}

extension Axelar_Evm_V1beta1_QueryServiceProvider {
  internal var serviceName: Substring { return "axelar.evm.v1beta1.QueryService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "BurnerInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Axelar_Evm_V1beta1_BurnerInfoRequest>(),
        responseSerializer: ProtobufSerializer<Axelar_Evm_V1beta1_BurnerInfoResponse>(),
        interceptors: self.interceptors?.makeBurnerInfoInterceptors() ?? [],
        userFunction: self.burnerInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Axelar_Evm_V1beta1_QueryServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'burnerInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnerInfoInterceptors() -> [ServerInterceptor<Axelar_Evm_V1beta1_BurnerInfoRequest, Axelar_Evm_V1beta1_BurnerInfoResponse>]
}
