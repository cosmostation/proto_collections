// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/swap/v1beta1/swap.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the swap module.
struct Kava_Swap_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// allowed_pools defines that pools that are allowed to be created
  var allowedPools: [Kava_Swap_V1beta1_AllowedPool] = []

  /// swap_fee defines the swap fee for all pools
  var swapFee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AllowedPool defines a pool that is allowed to be created
struct Kava_Swap_V1beta1_AllowedPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// token_a represents the a token allowed
  var tokenA: String = String()

  /// token_b represents the b token allowed
  var tokenB: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PoolRecord represents the state of a liquidity pool
/// and is used to store the state of a denominated pool
struct Kava_Swap_V1beta1_PoolRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// pool_id represents the unique id of the pool
  var poolID: String = String()

  /// reserves_a is the a token coin reserves
  var reservesA: Cosmos_Base_V1beta1_Coin {
    get {return _reservesA ?? Cosmos_Base_V1beta1_Coin()}
    set {_reservesA = newValue}
  }
  /// Returns true if `reservesA` has been explicitly set.
  var hasReservesA: Bool {return self._reservesA != nil}
  /// Clears the value of `reservesA`. Subsequent reads from it will return its default value.
  mutating func clearReservesA() {self._reservesA = nil}

  /// reserves_b is the a token coin reserves
  var reservesB: Cosmos_Base_V1beta1_Coin {
    get {return _reservesB ?? Cosmos_Base_V1beta1_Coin()}
    set {_reservesB = newValue}
  }
  /// Returns true if `reservesB` has been explicitly set.
  var hasReservesB: Bool {return self._reservesB != nil}
  /// Clears the value of `reservesB`. Subsequent reads from it will return its default value.
  mutating func clearReservesB() {self._reservesB = nil}

  /// total_shares is the total distrubuted shares of the pool
  var totalShares: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reservesA: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _reservesB: Cosmos_Base_V1beta1_Coin? = nil
}

/// ShareRecord stores the shares owned for a depositor and pool
struct Kava_Swap_V1beta1_ShareRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// depositor represents the owner of the shares
  var depositor: Data = Data()

  /// pool_id represents the pool the shares belong to
  var poolID: String = String()

  /// shares_owned represents the number of shares owned by depsoitor for the pool_id
  var sharesOwned: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.swap.v1beta1"

extension Kava_Swap_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "allowed_pools"),
    2: .standard(proto: "swap_fee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.allowedPools) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.swapFee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.allowedPools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.allowedPools, fieldNumber: 1)
    }
    if !self.swapFee.isEmpty {
      try visitor.visitSingularStringField(value: self.swapFee, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_Params, rhs: Kava_Swap_V1beta1_Params) -> Bool {
    if lhs.allowedPools != rhs.allowedPools {return false}
    if lhs.swapFee != rhs.swapFee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_AllowedPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowedPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "token_a"),
    2: .standard(proto: "token_b"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.tokenA) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.tokenB) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tokenA.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenA, fieldNumber: 1)
    }
    if !self.tokenB.isEmpty {
      try visitor.visitSingularStringField(value: self.tokenB, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_AllowedPool, rhs: Kava_Swap_V1beta1_AllowedPool) -> Bool {
    if lhs.tokenA != rhs.tokenA {return false}
    if lhs.tokenB != rhs.tokenB {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_PoolRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PoolRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_id"),
    2: .standard(proto: "reserves_a"),
    3: .standard(proto: "reserves_b"),
    4: .standard(proto: "total_shares"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.poolID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._reservesA) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._reservesB) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.totalShares) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.poolID.isEmpty {
      try visitor.visitSingularStringField(value: self.poolID, fieldNumber: 1)
    }
    if let v = self._reservesA {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._reservesB {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.totalShares.isEmpty {
      try visitor.visitSingularStringField(value: self.totalShares, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_PoolRecord, rhs: Kava_Swap_V1beta1_PoolRecord) -> Bool {
    if lhs.poolID != rhs.poolID {return false}
    if lhs._reservesA != rhs._reservesA {return false}
    if lhs._reservesB != rhs._reservesB {return false}
    if lhs.totalShares != rhs.totalShares {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_ShareRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShareRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .standard(proto: "pool_id"),
    3: .standard(proto: "shares_owned"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.poolID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sharesOwned) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularBytesField(value: self.depositor, fieldNumber: 1)
    }
    if !self.poolID.isEmpty {
      try visitor.visitSingularStringField(value: self.poolID, fieldNumber: 2)
    }
    if !self.sharesOwned.isEmpty {
      try visitor.visitSingularStringField(value: self.sharesOwned, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_ShareRecord, rhs: Kava_Swap_V1beta1_ShareRecord) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.poolID != rhs.poolID {return false}
    if lhs.sharesOwned != rhs.sharesOwned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
