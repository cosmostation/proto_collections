//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/farming/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the farming Msg service.
///
/// Usage: instantiate `Crescent_Farming_V1beta1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Farming_V1beta1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Farming_V1beta1_MsgClientInterceptorFactoryProtocol? { get }

  func createFixedAmountPlan(
    _ request: Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan, Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse>

  func createRatioPlan(
    _ request: Crescent_Farming_V1beta1_MsgCreateRatioPlan,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgCreateRatioPlan, Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse>

  func stake(
    _ request: Crescent_Farming_V1beta1_MsgStake,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgStake, Crescent_Farming_V1beta1_MsgStakeResponse>

  func unstake(
    _ request: Crescent_Farming_V1beta1_MsgUnstake,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgUnstake, Crescent_Farming_V1beta1_MsgUnstakeResponse>

  func harvest(
    _ request: Crescent_Farming_V1beta1_MsgHarvest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgHarvest, Crescent_Farming_V1beta1_MsgHarvestResponse>

  func removePlan(
    _ request: Crescent_Farming_V1beta1_MsgRemovePlan,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgRemovePlan, Crescent_Farming_V1beta1_MsgRemovePlanResponse>

  func advanceEpoch(
    _ request: Crescent_Farming_V1beta1_MsgAdvanceEpoch,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgAdvanceEpoch, Crescent_Farming_V1beta1_MsgAdvanceEpochResponse>
}

extension Crescent_Farming_V1beta1_MsgClientProtocol {
  internal var serviceName: String {
    return "crescent.farming.v1beta1.Msg"
  }

  /// CreateFixedAmountPlan defines a method for creating a new fixed amount
  /// farming plan
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFixedAmountPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFixedAmountPlan(
    _ request: Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan, Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/CreateFixedAmountPlan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFixedAmountPlanInterceptors() ?? []
    )
  }

  /// CreateRatioPlan defines a method for creating a new ratio farming plan
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRatioPlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRatioPlan(
    _ request: Crescent_Farming_V1beta1_MsgCreateRatioPlan,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgCreateRatioPlan, Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/CreateRatioPlan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRatioPlanInterceptors() ?? []
    )
  }

  /// Stake defines a method for staking coins into the farming plan
  ///
  /// - Parameters:
  ///   - request: Request to send to Stake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stake(
    _ request: Crescent_Farming_V1beta1_MsgStake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgStake, Crescent_Farming_V1beta1_MsgStakeResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/Stake",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeInterceptors() ?? []
    )
  }

  /// Unstake defines a method for unstaking coins from the farming plan
  ///
  /// - Parameters:
  ///   - request: Request to send to Unstake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unstake(
    _ request: Crescent_Farming_V1beta1_MsgUnstake,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgUnstake, Crescent_Farming_V1beta1_MsgUnstakeResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/Unstake",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnstakeInterceptors() ?? []
    )
  }

  /// Harvest defines a method for claiming farming rewards
  ///
  /// - Parameters:
  ///   - request: Request to send to Harvest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func harvest(
    _ request: Crescent_Farming_V1beta1_MsgHarvest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgHarvest, Crescent_Farming_V1beta1_MsgHarvestResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/Harvest",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeHarvestInterceptors() ?? []
    )
  }

  /// RemovePlan defines a method for removing a terminated plan.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemovePlan.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removePlan(
    _ request: Crescent_Farming_V1beta1_MsgRemovePlan,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgRemovePlan, Crescent_Farming_V1beta1_MsgRemovePlanResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/RemovePlan",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemovePlanInterceptors() ?? []
    )
  }

  /// AdvanceEpoch defines a method for advancing epoch by one, just for testing purpose
  /// and shouldn't be used in real world
  ///
  /// - Parameters:
  ///   - request: Request to send to AdvanceEpoch.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func advanceEpoch(
    _ request: Crescent_Farming_V1beta1_MsgAdvanceEpoch,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Farming_V1beta1_MsgAdvanceEpoch, Crescent_Farming_V1beta1_MsgAdvanceEpochResponse> {
    return self.makeUnaryCall(
      path: "/crescent.farming.v1beta1.Msg/AdvanceEpoch",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdvanceEpochInterceptors() ?? []
    )
  }
}

internal protocol Crescent_Farming_V1beta1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createFixedAmountPlan'.
  func makeCreateFixedAmountPlanInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan, Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'createRatioPlan'.
  func makeCreateRatioPlanInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgCreateRatioPlan, Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse>]

  /// - Returns: Interceptors to use when invoking 'stake'.
  func makeStakeInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgStake, Crescent_Farming_V1beta1_MsgStakeResponse>]

  /// - Returns: Interceptors to use when invoking 'unstake'.
  func makeUnstakeInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgUnstake, Crescent_Farming_V1beta1_MsgUnstakeResponse>]

  /// - Returns: Interceptors to use when invoking 'harvest'.
  func makeHarvestInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgHarvest, Crescent_Farming_V1beta1_MsgHarvestResponse>]

  /// - Returns: Interceptors to use when invoking 'removePlan'.
  func makeRemovePlanInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgRemovePlan, Crescent_Farming_V1beta1_MsgRemovePlanResponse>]

  /// - Returns: Interceptors to use when invoking 'advanceEpoch'.
  func makeAdvanceEpochInterceptors() -> [ClientInterceptor<Crescent_Farming_V1beta1_MsgAdvanceEpoch, Crescent_Farming_V1beta1_MsgAdvanceEpochResponse>]
}

internal final class Crescent_Farming_V1beta1_MsgClient: Crescent_Farming_V1beta1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Farming_V1beta1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.farming.v1beta1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Farming_V1beta1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the farming Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Farming_V1beta1_MsgProvider: CallHandlerProvider {
  var interceptors: Crescent_Farming_V1beta1_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateFixedAmountPlan defines a method for creating a new fixed amount
  /// farming plan
  func createFixedAmountPlan(request: Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse>

  /// CreateRatioPlan defines a method for creating a new ratio farming plan
  func createRatioPlan(request: Crescent_Farming_V1beta1_MsgCreateRatioPlan, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse>

  /// Stake defines a method for staking coins into the farming plan
  func stake(request: Crescent_Farming_V1beta1_MsgStake, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgStakeResponse>

  /// Unstake defines a method for unstaking coins from the farming plan
  func unstake(request: Crescent_Farming_V1beta1_MsgUnstake, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgUnstakeResponse>

  /// Harvest defines a method for claiming farming rewards
  func harvest(request: Crescent_Farming_V1beta1_MsgHarvest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgHarvestResponse>

  /// RemovePlan defines a method for removing a terminated plan.
  func removePlan(request: Crescent_Farming_V1beta1_MsgRemovePlan, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgRemovePlanResponse>

  /// AdvanceEpoch defines a method for advancing epoch by one, just for testing purpose
  /// and shouldn't be used in real world
  func advanceEpoch(request: Crescent_Farming_V1beta1_MsgAdvanceEpoch, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Farming_V1beta1_MsgAdvanceEpochResponse>
}

extension Crescent_Farming_V1beta1_MsgProvider {
  internal var serviceName: Substring { return "crescent.farming.v1beta1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateFixedAmountPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse>(),
        interceptors: self.interceptors?.makeCreateFixedAmountPlanInterceptors() ?? [],
        userFunction: self.createFixedAmountPlan(request:context:)
      )

    case "CreateRatioPlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgCreateRatioPlan>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse>(),
        interceptors: self.interceptors?.makeCreateRatioPlanInterceptors() ?? [],
        userFunction: self.createRatioPlan(request:context:)
      )

    case "Stake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgStake>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgStakeResponse>(),
        interceptors: self.interceptors?.makeStakeInterceptors() ?? [],
        userFunction: self.stake(request:context:)
      )

    case "Unstake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgUnstake>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgUnstakeResponse>(),
        interceptors: self.interceptors?.makeUnstakeInterceptors() ?? [],
        userFunction: self.unstake(request:context:)
      )

    case "Harvest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgHarvest>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgHarvestResponse>(),
        interceptors: self.interceptors?.makeHarvestInterceptors() ?? [],
        userFunction: self.harvest(request:context:)
      )

    case "RemovePlan":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgRemovePlan>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgRemovePlanResponse>(),
        interceptors: self.interceptors?.makeRemovePlanInterceptors() ?? [],
        userFunction: self.removePlan(request:context:)
      )

    case "AdvanceEpoch":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Farming_V1beta1_MsgAdvanceEpoch>(),
        responseSerializer: ProtobufSerializer<Crescent_Farming_V1beta1_MsgAdvanceEpochResponse>(),
        interceptors: self.interceptors?.makeAdvanceEpochInterceptors() ?? [],
        userFunction: self.advanceEpoch(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Farming_V1beta1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createFixedAmountPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFixedAmountPlanInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgCreateFixedAmountPlan, Crescent_Farming_V1beta1_MsgCreateFixedAmountPlanResponse>]

  /// - Returns: Interceptors to use when handling 'createRatioPlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRatioPlanInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgCreateRatioPlan, Crescent_Farming_V1beta1_MsgCreateRatioPlanResponse>]

  /// - Returns: Interceptors to use when handling 'stake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgStake, Crescent_Farming_V1beta1_MsgStakeResponse>]

  /// - Returns: Interceptors to use when handling 'unstake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnstakeInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgUnstake, Crescent_Farming_V1beta1_MsgUnstakeResponse>]

  /// - Returns: Interceptors to use when handling 'harvest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeHarvestInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgHarvest, Crescent_Farming_V1beta1_MsgHarvestResponse>]

  /// - Returns: Interceptors to use when handling 'removePlan'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemovePlanInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgRemovePlan, Crescent_Farming_V1beta1_MsgRemovePlanResponse>]

  /// - Returns: Interceptors to use when handling 'advanceEpoch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdvanceEpochInterceptors() -> [ServerInterceptor<Crescent_Farming_V1beta1_MsgAdvanceEpoch, Crescent_Farming_V1beta1_MsgAdvanceEpochResponse>]
}
