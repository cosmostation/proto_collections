// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/bep3/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateAtomicSwap defines the Msg/CreateAtomicSwap request type.
struct Kava_Bep3_V1beta1_MsgCreateAtomicSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var to: String = String()

  var recipientOtherChain: String = String()

  var senderOtherChain: String = String()

  var randomNumberHash: String = String()

  var timestamp: Int64 = 0

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var heightSpan: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgCreateAtomicSwapResponse defines the Msg/CreateAtomicSwap response type.
struct Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClaimAtomicSwap defines the Msg/ClaimAtomicSwap request type.
struct Kava_Bep3_V1beta1_MsgClaimAtomicSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var swapID: String = String()

  var randomNumber: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgClaimAtomicSwapResponse defines the Msg/ClaimAtomicSwap response type.
struct Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRefundAtomicSwap defines the Msg/RefundAtomicSwap request type.
struct Kava_Bep3_V1beta1_MsgRefundAtomicSwap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var from: String = String()

  var swapID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgRefundAtomicSwapResponse defines the Msg/RefundAtomicSwap response type.
struct Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.bep3.v1beta1"

extension Kava_Bep3_V1beta1_MsgCreateAtomicSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateAtomicSwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .standard(proto: "recipient_other_chain"),
    4: .standard(proto: "sender_other_chain"),
    5: .standard(proto: "random_number_hash"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "amount"),
    8: .standard(proto: "height_span"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.recipientOtherChain) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.senderOtherChain) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.randomNumberHash) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.heightSpan) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 2)
    }
    if !self.recipientOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientOtherChain, fieldNumber: 3)
    }
    if !self.senderOtherChain.isEmpty {
      try visitor.visitSingularStringField(value: self.senderOtherChain, fieldNumber: 4)
    }
    if !self.randomNumberHash.isEmpty {
      try visitor.visitSingularStringField(value: self.randomNumberHash, fieldNumber: 5)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 6)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 7)
    }
    if self.heightSpan != 0 {
      try visitor.visitSingularUInt64Field(value: self.heightSpan, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgCreateAtomicSwap, rhs: Kava_Bep3_V1beta1_MsgCreateAtomicSwap) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.recipientOtherChain != rhs.recipientOtherChain {return false}
    if lhs.senderOtherChain != rhs.senderOtherChain {return false}
    if lhs.randomNumberHash != rhs.randomNumberHash {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.heightSpan != rhs.heightSpan {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateAtomicSwapResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse, rhs: Kava_Bep3_V1beta1_MsgCreateAtomicSwapResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_MsgClaimAtomicSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimAtomicSwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "swap_id"),
    3: .standard(proto: "random_number"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.swapID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.randomNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.swapID.isEmpty {
      try visitor.visitSingularStringField(value: self.swapID, fieldNumber: 2)
    }
    if !self.randomNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.randomNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgClaimAtomicSwap, rhs: Kava_Bep3_V1beta1_MsgClaimAtomicSwap) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.swapID != rhs.swapID {return false}
    if lhs.randomNumber != rhs.randomNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimAtomicSwapResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse, rhs: Kava_Bep3_V1beta1_MsgClaimAtomicSwapResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_MsgRefundAtomicSwap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRefundAtomicSwap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .standard(proto: "swap_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.swapID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.swapID.isEmpty {
      try visitor.visitSingularStringField(value: self.swapID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgRefundAtomicSwap, rhs: Kava_Bep3_V1beta1_MsgRefundAtomicSwap) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.swapID != rhs.swapID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRefundAtomicSwapResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse, rhs: Kava_Bep3_V1beta1_MsgRefundAtomicSwapResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
