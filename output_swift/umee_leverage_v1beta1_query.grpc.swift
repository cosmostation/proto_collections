//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: umee/leverage/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Umeenetwork_Umee_Leverage_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Umeenetwork_Umee_Leverage_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Umeenetwork_Umee_Leverage_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func registeredTokens(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens, Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse>

  func params(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse>

  func borrowed(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse>

  func reserveAmount(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse>
}

extension Umeenetwork_Umee_Leverage_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "umeenetwork.umee.leverage.v1beta1.Query"
  }

  /// RegisteredTokens queries for all the registered tokens.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisteredTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registeredTokens(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens, Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Query/RegisteredTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? []
    )
  }

  /// Params queries the parameters of the x/leverage module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Borrowed queries for the borrowed amount of a user by token denomination.
  /// If the denomination is not supplied, the total for each borrowed token is
  /// returned.
  ///
  /// - Parameters:
  ///   - request: Request to send to Borrowed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func borrowed(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Query/Borrowed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBorrowedInterceptors() ?? []
    )
  }

  /// ReserveAmount queries for the amount reserved of a specified denomination.
  /// If the token is not valid, the reserved amount is zero.
  ///
  /// - Parameters:
  ///   - request: Request to send to ReserveAmount.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reserveAmount(
    _ request: Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse> {
    return self.makeUnaryCall(
      path: "/umeenetwork.umee.leverage.v1beta1.Query/ReserveAmount",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReserveAmountInterceptors() ?? []
    )
  }
}

internal protocol Umeenetwork_Umee_Leverage_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registeredTokens'.
  func makeRegisteredTokensInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens, Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'borrowed'.
  func makeBorrowedInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse>]

  /// - Returns: Interceptors to use when invoking 'reserveAmount'.
  func makeReserveAmountInterceptors() -> [ClientInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse>]
}

internal final class Umeenetwork_Umee_Leverage_V1beta1_QueryClient: Umeenetwork_Umee_Leverage_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Umeenetwork_Umee_Leverage_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the umeenetwork.umee.leverage.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Umeenetwork_Umee_Leverage_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Umeenetwork_Umee_Leverage_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Umeenetwork_Umee_Leverage_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// RegisteredTokens queries for all the registered tokens.
  func registeredTokens(request: Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse>

  /// Params queries the parameters of the x/leverage module.
  func params(request: Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse>

  /// Borrowed queries for the borrowed amount of a user by token denomination.
  /// If the denomination is not supplied, the total for each borrowed token is
  /// returned.
  func borrowed(request: Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse>

  /// ReserveAmount queries for the amount reserved of a specified denomination.
  /// If the token is not valid, the reserved amount is zero.
  func reserveAmount(request: Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse>
}

extension Umeenetwork_Umee_Leverage_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "umeenetwork.umee.leverage.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisteredTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse>(),
        interceptors: self.interceptors?.makeRegisteredTokensInterceptors() ?? [],
        userFunction: self.registeredTokens(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Borrowed":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse>(),
        interceptors: self.interceptors?.makeBorrowedInterceptors() ?? [],
        userFunction: self.borrowed(request:context:)
      )

    case "ReserveAmount":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest>(),
        responseSerializer: ProtobufSerializer<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse>(),
        interceptors: self.interceptors?.makeReserveAmountInterceptors() ?? [],
        userFunction: self.reserveAmount(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Umeenetwork_Umee_Leverage_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registeredTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisteredTokensInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokens, Umeenetwork_Umee_Leverage_V1beta1_QueryRegisteredTokensResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryParamsRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'borrowed'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBorrowedInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryBorrowedResponse>]

  /// - Returns: Interceptors to use when handling 'reserveAmount'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReserveAmountInterceptors() -> [ServerInterceptor<Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountRequest, Umeenetwork_Umee_Leverage_V1beta1_QueryReserveAmountResponse>]
}
