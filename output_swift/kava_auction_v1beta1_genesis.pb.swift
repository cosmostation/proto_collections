// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/auction/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the auction module's genesis state.
struct Kava_Auction_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nextAuctionID: UInt64 = 0

  var params: Kava_Auction_V1beta1_Params {
    get {return _params ?? Kava_Auction_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// Genesis auctions
  var auctions: [Google_Protobuf2_Any] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Kava_Auction_V1beta1_Params? = nil
}

/// Params defines the parameters for the issuance module.
struct Kava_Auction_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var maxAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _maxAuctionDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_maxAuctionDuration = newValue}
  }
  /// Returns true if `maxAuctionDuration` has been explicitly set.
  var hasMaxAuctionDuration: Bool {return self._maxAuctionDuration != nil}
  /// Clears the value of `maxAuctionDuration`. Subsequent reads from it will return its default value.
  mutating func clearMaxAuctionDuration() {self._maxAuctionDuration = nil}

  var bidDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _bidDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_bidDuration = newValue}
  }
  /// Returns true if `bidDuration` has been explicitly set.
  var hasBidDuration: Bool {return self._bidDuration != nil}
  /// Clears the value of `bidDuration`. Subsequent reads from it will return its default value.
  mutating func clearBidDuration() {self._bidDuration = nil}

  var incrementSurplus: Data = Data()

  var incrementDebt: Data = Data()

  var incrementCollateral: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _maxAuctionDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _bidDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.auction.v1beta1"

extension Kava_Auction_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "next_auction_id"),
    2: .same(proto: "params"),
    3: .same(proto: "auctions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.nextAuctionID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.auctions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.nextAuctionID != 0 {
      try visitor.visitSingularUInt64Field(value: self.nextAuctionID, fieldNumber: 1)
    }
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.auctions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.auctions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Auction_V1beta1_GenesisState, rhs: Kava_Auction_V1beta1_GenesisState) -> Bool {
    if lhs.nextAuctionID != rhs.nextAuctionID {return false}
    if lhs._params != rhs._params {return false}
    if lhs.auctions != rhs.auctions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Auction_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_auction_duration"),
    2: .standard(proto: "bid_duration"),
    3: .standard(proto: "increment_surplus"),
    4: .standard(proto: "increment_debt"),
    5: .standard(proto: "increment_collateral"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._maxAuctionDuration) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._bidDuration) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.incrementSurplus) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.incrementDebt) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.incrementCollateral) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxAuctionDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._bidDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.incrementSurplus.isEmpty {
      try visitor.visitSingularBytesField(value: self.incrementSurplus, fieldNumber: 3)
    }
    if !self.incrementDebt.isEmpty {
      try visitor.visitSingularBytesField(value: self.incrementDebt, fieldNumber: 4)
    }
    if !self.incrementCollateral.isEmpty {
      try visitor.visitSingularBytesField(value: self.incrementCollateral, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Auction_V1beta1_Params, rhs: Kava_Auction_V1beta1_Params) -> Bool {
    if lhs._maxAuctionDuration != rhs._maxAuctionDuration {return false}
    if lhs._bidDuration != rhs._bidDuration {return false}
    if lhs.incrementSurplus != rhs.incrementSurplus {return false}
    if lhs.incrementDebt != rhs.incrementDebt {return false}
    if lhs.incrementCollateral != rhs.incrementCollateral {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
