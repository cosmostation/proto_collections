//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: injective/exchange/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Injective_Exchange_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Injective_Exchange_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func queryExchangeParams(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>

  func subaccountDeposits(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>

  func subaccountDeposit(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>

  func exchangeBalances(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>

  func spotMarkets(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>

  func spotMarket(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>

  func spotOrderbook(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>

  func traderSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  func derivativeOrderbook(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>

  func traderDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  func derivativeMarkets(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>

  func derivativeMarket(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>

  func subaccountTradeNonce(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>

  func exchangeModuleState(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>

  func positions(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>

  func subaccountPositions(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>

  func tradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  func tradeRewardCampaign(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>

  func feeDiscountAccountInfo(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>

  func feeDiscountSchedule(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>
}

extension Injective_Exchange_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "injective.exchange.v1beta1.Query"
  }

  /// Retrieves exchange params
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryExchangeParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func queryExchangeParams(
    _ request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/QueryExchangeParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? []
    )
  }

  /// Retrieves a Subaccount's Deposits
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountDeposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountDeposits(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposits",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? []
    )
  }

  /// Retrieves a Subaccount's Deposits
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountDeposit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountDeposit(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SubaccountDeposit",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? []
    )
  }

  /// Retrieves all of the balances of all users on the exchange.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeBalances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeBalances(
    _ request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/ExchangeBalances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? []
    )
  }

  /// Retrieves a list of spot markets.
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotMarkets(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SpotMarkets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a spot market by ticker
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotMarket(
    _ request: Injective_Exchange_V1beta1_QuerySpotMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SpotMarket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? []
    )
  }

  /// Retrieves a spot market's orderbook by marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to SpotOrderbook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func spotOrderbook(
    _ request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SpotOrderbook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? []
    )
  }

  /// Retrieves a trader's spot orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderSpotOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderSpotOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/TraderSpotOrders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market's orderbook by marketID
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeOrderbook.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeOrderbook(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? []
    )
  }

  /// Retrieves a trader's derivative orders
  ///
  /// - Parameters:
  ///   - request: Request to send to TraderDerivativeOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func traderDerivativeOrders(
    _ request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? []
    )
  }

  /// Retrieves a list of derivative markets.
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMarkets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMarkets(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/DerivativeMarkets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? []
    )
  }

  /// Retrieves a derivative market by ticker
  ///
  /// - Parameters:
  ///   - request: Request to send to DerivativeMarket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func derivativeMarket(
    _ request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/DerivativeMarket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? []
    )
  }

  /// Retrieves a subaccount's trade nonce
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountTradeNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountTradeNonce(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? []
    )
  }

  /// Retrieves the entire exchange module's state
  ///
  /// - Parameters:
  ///   - request: Request to send to ExchangeModuleState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exchangeModuleState(
    _ request: Injective_Exchange_V1beta1_QueryModuleStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/ExchangeModuleState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? []
    )
  }

  /// Retrieves the entire exchange module's positions
  ///
  /// - Parameters:
  ///   - request: Request to send to Positions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func positions(
    _ request: Injective_Exchange_V1beta1_QueryPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/Positions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePositionsInterceptors() ?? []
    )
  }

  /// Retrieves subaccount's positions
  ///
  /// - Parameters:
  ///   - request: Request to send to SubaccountPositions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subaccountPositions(
    _ request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/SubaccountPositions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? []
    )
  }

  /// Retrieves the account and total liquidity mining points
  ///
  /// - Parameters:
  ///   - request: Request to send to TradeRewardPoints.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tradeRewardPoints(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/TradeRewardPoints",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? []
    )
  }

  /// Retrieves the trade reward campaign
  ///
  /// - Parameters:
  ///   - request: Request to send to TradeRewardCampaign.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tradeRewardCampaign(
    _ request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? []
    )
  }

  /// Retrieves the account's fee discount info
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeDiscountAccountInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeDiscountAccountInfo(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? []
    )
  }

  /// Retrieves the fee discount schedule
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeDiscountSchedule.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeDiscountSchedule(
    _ request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse> {
    return self.makeUnaryCall(
      path: "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? []
    )
  }
}

internal protocol Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'queryExchangeParams'.
  func makeQueryExchangeParamsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountDeposits'.
  func makeSubaccountDepositsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountDeposit'.
  func makeSubaccountDepositInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeBalances'.
  func makeExchangeBalancesInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>]

  /// - Returns: Interceptors to use when invoking 'spotMarkets'.
  func makeSpotMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'spotMarket'.
  func makeSpotMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'spotOrderbook'.
  func makeSpotOrderbookInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>]

  /// - Returns: Interceptors to use when invoking 'traderSpotOrders'.
  func makeTraderSpotOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeOrderbook'.
  func makeDerivativeOrderbookInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>]

  /// - Returns: Interceptors to use when invoking 'traderDerivativeOrders'.
  func makeTraderDerivativeOrdersInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMarkets'.
  func makeDerivativeMarketsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>]

  /// - Returns: Interceptors to use when invoking 'derivativeMarket'.
  func makeDerivativeMarketInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountTradeNonce'.
  func makeSubaccountTradeNonceInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'exchangeModuleState'.
  func makeExchangeModuleStateInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when invoking 'positions'.
  func makePositionsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'subaccountPositions'.
  func makeSubaccountPositionsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>]

  /// - Returns: Interceptors to use when invoking 'tradeRewardPoints'.
  func makeTradeRewardPointsInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when invoking 'tradeRewardCampaign'.
  func makeTradeRewardCampaignInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>]

  /// - Returns: Interceptors to use when invoking 'feeDiscountAccountInfo'.
  func makeFeeDiscountAccountInfoInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'feeDiscountSchedule'.
  func makeFeeDiscountScheduleInterceptors() -> [ClientInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>]
}

internal final class Injective_Exchange_V1beta1_QueryClient: Injective_Exchange_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the injective.exchange.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Injective_Exchange_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Injective_Exchange_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Retrieves exchange params
  func queryExchangeParams(request: Injective_Exchange_V1beta1_QueryExchangeParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryExchangeParamsResponse>

  /// Retrieves a Subaccount's Deposits
  func subaccountDeposits(request: Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>

  /// Retrieves a Subaccount's Deposits
  func subaccountDeposit(request: Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>

  /// Retrieves all of the balances of all users on the exchange.
  func exchangeBalances(request: Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>

  /// Retrieves a list of spot markets.
  func spotMarkets(request: Injective_Exchange_V1beta1_QuerySpotMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotMarketsResponse>

  /// Retrieves a spot market by ticker
  func spotMarket(request: Injective_Exchange_V1beta1_QuerySpotMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotMarketResponse>

  /// Retrieves a spot market's orderbook by marketID
  func spotOrderbook(request: Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>

  /// Retrieves a trader's spot orders
  func traderSpotOrders(request: Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>

  /// Retrieves a derivative market's orderbook by marketID
  func derivativeOrderbook(request: Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>

  /// Retrieves a trader's derivative orders
  func traderDerivativeOrders(request: Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>

  /// Retrieves a list of derivative markets.
  func derivativeMarkets(request: Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>

  /// Retrieves a derivative market by ticker
  func derivativeMarket(request: Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>

  /// Retrieves a subaccount's trade nonce
  func subaccountTradeNonce(request: Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>

  /// Retrieves the entire exchange module's state
  func exchangeModuleState(request: Injective_Exchange_V1beta1_QueryModuleStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryModuleStateResponse>

  /// Retrieves the entire exchange module's positions
  func positions(request: Injective_Exchange_V1beta1_QueryPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryPositionsResponse>

  /// Retrieves subaccount's positions
  func subaccountPositions(request: Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>

  /// Retrieves the account and total liquidity mining points
  func tradeRewardPoints(request: Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>

  /// Retrieves the trade reward campaign
  func tradeRewardCampaign(request: Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>

  /// Retrieves the account's fee discount info
  func feeDiscountAccountInfo(request: Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>

  /// Retrieves the fee discount schedule
  func feeDiscountSchedule(request: Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>
}

extension Injective_Exchange_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "injective.exchange.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "QueryExchangeParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeParamsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeParamsResponse>(),
        interceptors: self.interceptors?.makeQueryExchangeParamsInterceptors() ?? [],
        userFunction: self.queryExchangeParams(request:context:)
      )

    case "SubaccountDeposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositsInterceptors() ?? [],
        userFunction: self.subaccountDeposits(request:context:)
      )

    case "SubaccountDeposit":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>(),
        interceptors: self.interceptors?.makeSubaccountDepositInterceptors() ?? [],
        userFunction: self.subaccountDeposit(request:context:)
      )

    case "ExchangeBalances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>(),
        interceptors: self.interceptors?.makeExchangeBalancesInterceptors() ?? [],
        userFunction: self.exchangeBalances(request:context:)
      )

    case "SpotMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketsResponse>(),
        interceptors: self.interceptors?.makeSpotMarketsInterceptors() ?? [],
        userFunction: self.spotMarkets(request:context:)
      )

    case "SpotMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotMarketResponse>(),
        interceptors: self.interceptors?.makeSpotMarketInterceptors() ?? [],
        userFunction: self.spotMarket(request:context:)
      )

    case "SpotOrderbook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>(),
        interceptors: self.interceptors?.makeSpotOrderbookInterceptors() ?? [],
        userFunction: self.spotOrderbook(request:context:)
      )

    case "TraderSpotOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderSpotOrdersInterceptors() ?? [],
        userFunction: self.traderSpotOrders(request:context:)
      )

    case "DerivativeOrderbook":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>(),
        interceptors: self.interceptors?.makeDerivativeOrderbookInterceptors() ?? [],
        userFunction: self.derivativeOrderbook(request:context:)
      )

    case "TraderDerivativeOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>(),
        interceptors: self.interceptors?.makeTraderDerivativeOrdersInterceptors() ?? [],
        userFunction: self.traderDerivativeOrders(request:context:)
      )

    case "DerivativeMarkets":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketsInterceptors() ?? [],
        userFunction: self.derivativeMarkets(request:context:)
      )

    case "DerivativeMarket":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>(),
        interceptors: self.interceptors?.makeDerivativeMarketInterceptors() ?? [],
        userFunction: self.derivativeMarket(request:context:)
      )

    case "SubaccountTradeNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>(),
        interceptors: self.interceptors?.makeSubaccountTradeNonceInterceptors() ?? [],
        userFunction: self.subaccountTradeNonce(request:context:)
      )

    case "ExchangeModuleState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryModuleStateRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryModuleStateResponse>(),
        interceptors: self.interceptors?.makeExchangeModuleStateInterceptors() ?? [],
        userFunction: self.exchangeModuleState(request:context:)
      )

    case "Positions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryPositionsResponse>(),
        interceptors: self.interceptors?.makePositionsInterceptors() ?? [],
        userFunction: self.positions(request:context:)
      )

    case "SubaccountPositions":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>(),
        interceptors: self.interceptors?.makeSubaccountPositionsInterceptors() ?? [],
        userFunction: self.subaccountPositions(request:context:)
      )

    case "TradeRewardPoints":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>(),
        interceptors: self.interceptors?.makeTradeRewardPointsInterceptors() ?? [],
        userFunction: self.tradeRewardPoints(request:context:)
      )

    case "TradeRewardCampaign":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>(),
        interceptors: self.interceptors?.makeTradeRewardCampaignInterceptors() ?? [],
        userFunction: self.tradeRewardCampaign(request:context:)
      )

    case "FeeDiscountAccountInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountAccountInfoInterceptors() ?? [],
        userFunction: self.feeDiscountAccountInfo(request:context:)
      )

    case "FeeDiscountSchedule":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest>(),
        responseSerializer: ProtobufSerializer<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>(),
        interceptors: self.interceptors?.makeFeeDiscountScheduleInterceptors() ?? [],
        userFunction: self.feeDiscountSchedule(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Injective_Exchange_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'queryExchangeParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQueryExchangeParamsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryExchangeParamsRequest, Injective_Exchange_V1beta1_QueryExchangeParamsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountDeposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountDepositsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositsRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountDeposit'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountDepositInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountDepositRequest, Injective_Exchange_V1beta1_QuerySubaccountDepositResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeBalances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeBalancesInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryExchangeBalancesRequest, Injective_Exchange_V1beta1_QueryExchangeBalancesResponse>]

  /// - Returns: Interceptors to use when handling 'spotMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketsRequest, Injective_Exchange_V1beta1_QuerySpotMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'spotMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotMarketRequest, Injective_Exchange_V1beta1_QuerySpotMarketResponse>]

  /// - Returns: Interceptors to use when handling 'spotOrderbook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSpotOrderbookInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySpotOrderbookRequest, Injective_Exchange_V1beta1_QuerySpotOrderbookResponse>]

  /// - Returns: Interceptors to use when handling 'traderSpotOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderSpotOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderSpotOrdersRequest, Injective_Exchange_V1beta1_QueryTraderSpotOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeOrderbook'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeOrderbookInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeOrderbookRequest, Injective_Exchange_V1beta1_QueryDerivativeOrderbookResponse>]

  /// - Returns: Interceptors to use when handling 'traderDerivativeOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTraderDerivativeOrdersInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersRequest, Injective_Exchange_V1beta1_QueryTraderDerivativeOrdersResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMarkets'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMarketsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketsRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketsResponse>]

  /// - Returns: Interceptors to use when handling 'derivativeMarket'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDerivativeMarketInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryDerivativeMarketRequest, Injective_Exchange_V1beta1_QueryDerivativeMarketResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountTradeNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountTradeNonceInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountTradeNonceRequest, Injective_Exchange_V1beta1_QuerySubaccountTradeNonceResponse>]

  /// - Returns: Interceptors to use when handling 'exchangeModuleState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeExchangeModuleStateInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryModuleStateRequest, Injective_Exchange_V1beta1_QueryModuleStateResponse>]

  /// - Returns: Interceptors to use when handling 'positions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePositionsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryPositionsRequest, Injective_Exchange_V1beta1_QueryPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'subaccountPositions'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubaccountPositionsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QuerySubaccountPositionsRequest, Injective_Exchange_V1beta1_QuerySubaccountPositionsResponse>]

  /// - Returns: Interceptors to use when handling 'tradeRewardPoints'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTradeRewardPointsInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardPointsRequest, Injective_Exchange_V1beta1_QueryTradeRewardPointsResponse>]

  /// - Returns: Interceptors to use when handling 'tradeRewardCampaign'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTradeRewardCampaignInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryTradeRewardCampaignRequest, Injective_Exchange_V1beta1_QueryTradeRewardCampaignResponse>]

  /// - Returns: Interceptors to use when handling 'feeDiscountAccountInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeDiscountAccountInfoInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoRequest, Injective_Exchange_V1beta1_QueryFeeDiscountAccountInfoResponse>]

  /// - Returns: Interceptors to use when handling 'feeDiscountSchedule'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeDiscountScheduleInterceptors() -> [ServerInterceptor<Injective_Exchange_V1beta1_QueryFeeDiscountScheduleRequest, Injective_Exchange_V1beta1_QueryFeeDiscountScheduleResponse>]
}
