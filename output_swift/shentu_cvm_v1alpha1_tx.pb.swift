// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/cvm/v1alpha1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Shentu_Cvm_V1alpha1_MsgCall {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var caller: String = String()

  var callee: String = String()

  var value: UInt64 = 0

  var data: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Cvm_V1alpha1_MsgCallResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Cvm_V1alpha1_MsgDeploy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Caller is the sender of the CVM-message.
  var caller: String = String()

  /// Value is the amount of CTK transferred with the call.
  var value: UInt64 = 0

  /// Code is the contract byte code.
  var code: Data = Data()

  /// Abi is the Solidity ABI bytes for the contract code.
  var abi: String = String()

  /// Meta is the metadata for the contract.
  var meta: [Payload_ContractMeta] = []

  /// is_eWASM is true if the code is EWASM code.
  var isEWasm: Bool = false

  /// is_runtime is true if the code is runtime code.
  var isRuntime: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Shentu_Cvm_V1alpha1_MsgDeployResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "shentu.cvm.v1alpha1"

extension Shentu_Cvm_V1alpha1_MsgCall: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCall"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "caller"),
    2: .same(proto: "callee"),
    3: .same(proto: "value"),
    4: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.caller) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.callee) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.caller.isEmpty {
      try visitor.visitSingularStringField(value: self.caller, fieldNumber: 1)
    }
    if !self.callee.isEmpty {
      try visitor.visitSingularStringField(value: self.callee, fieldNumber: 2)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Cvm_V1alpha1_MsgCall, rhs: Shentu_Cvm_V1alpha1_MsgCall) -> Bool {
    if lhs.caller != rhs.caller {return false}
    if lhs.callee != rhs.callee {return false}
    if lhs.value != rhs.value {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Cvm_V1alpha1_MsgCallResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCallResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.result.isEmpty {
      try visitor.visitSingularBytesField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Cvm_V1alpha1_MsgCallResponse, rhs: Shentu_Cvm_V1alpha1_MsgCallResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Cvm_V1alpha1_MsgDeploy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeploy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "caller"),
    2: .same(proto: "value"),
    3: .same(proto: "code"),
    4: .same(proto: "abi"),
    5: .same(proto: "meta"),
    6: .standard(proto: "is_eWASM"),
    7: .standard(proto: "is_runtime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.caller) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.code) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.abi) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.meta) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.isEWasm) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.isRuntime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.caller.isEmpty {
      try visitor.visitSingularStringField(value: self.caller, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 2)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularBytesField(value: self.code, fieldNumber: 3)
    }
    if !self.abi.isEmpty {
      try visitor.visitSingularStringField(value: self.abi, fieldNumber: 4)
    }
    if !self.meta.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.meta, fieldNumber: 5)
    }
    if self.isEWasm != false {
      try visitor.visitSingularBoolField(value: self.isEWasm, fieldNumber: 6)
    }
    if self.isRuntime != false {
      try visitor.visitSingularBoolField(value: self.isRuntime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Cvm_V1alpha1_MsgDeploy, rhs: Shentu_Cvm_V1alpha1_MsgDeploy) -> Bool {
    if lhs.caller != rhs.caller {return false}
    if lhs.value != rhs.value {return false}
    if lhs.code != rhs.code {return false}
    if lhs.abi != rhs.abi {return false}
    if lhs.meta != rhs.meta {return false}
    if lhs.isEWasm != rhs.isEWasm {return false}
    if lhs.isRuntime != rhs.isRuntime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Shentu_Cvm_V1alpha1_MsgDeployResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeployResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.result) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.result.isEmpty {
      try visitor.visitSingularBytesField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Shentu_Cvm_V1alpha1_MsgDeployResponse, rhs: Shentu_Cvm_V1alpha1_MsgDeployResponse) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
