//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/core/client/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query provides defines the gRPC querier service
///
/// Usage: instantiate `Ibc_Core_Client_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Core_Client_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? { get }

  func clientState(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>

  func clientStates(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>

  func consensusState(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>

  func consensusStates(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>

  func clientStatus(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>

  func clientParams(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>

  func upgradedClientState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>

  func upgradedConsensusState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>
}

extension Ibc_Core_Client_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.core.client.v1.Query"
  }

  /// ClientState queries an IBC light client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clientState(
    _ request: Ibc_Core_Client_V1_QueryClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ClientState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStateInterceptors() ?? []
    )
  }

  /// ClientStates queries all the IBC light clients of a chain.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clientStates(
    _ request: Ibc_Core_Client_V1_QueryClientStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ClientStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatesInterceptors() ?? []
    )
  }

  /// ConsensusState queries a consensus state associated with a client state at
  /// a given height.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsensusState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func consensusState(
    _ request: Ibc_Core_Client_V1_QueryConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ConsensusState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? []
    )
  }

  /// ConsensusStates queries all the consensus state associated with a given
  /// client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConsensusStates.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func consensusStates(
    _ request: Ibc_Core_Client_V1_QueryConsensusStatesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ConsensusStates",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? []
    )
  }

  /// Status queries the status of an IBC client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clientStatus(
    _ request: Ibc_Core_Client_V1_QueryClientStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ClientStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientStatusInterceptors() ?? []
    )
  }

  /// ClientParams queries all parameters of the ibc client.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClientParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func clientParams(
    _ request: Ibc_Core_Client_V1_QueryClientParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/ClientParams",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClientParamsInterceptors() ?? []
    )
  }

  /// UpgradedClientState queries an Upgraded IBC light client.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradedClientState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upgradedClientState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/UpgradedClientState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? []
    )
  }

  /// UpgradedConsensusState queries an Upgraded IBC consensus state.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpgradedConsensusState.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func upgradedConsensusState(
    _ request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse> {
    return self.makeUnaryCall(
      path: "/ibc.core.client.v1.Query/UpgradedConsensusState",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? []
    )
  }
}

internal protocol Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'clientState'.
  func makeClientStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>]

  /// - Returns: Interceptors to use when invoking 'clientStates'.
  func makeClientStatesInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'consensusState'.
  func makeConsensusStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>]

  /// - Returns: Interceptors to use when invoking 'consensusStates'.
  func makeConsensusStatesInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>]

  /// - Returns: Interceptors to use when invoking 'clientStatus'.
  func makeClientStatusInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>]

  /// - Returns: Interceptors to use when invoking 'clientParams'.
  func makeClientParamsInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'upgradedClientState'.
  func makeUpgradedClientStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>]

  /// - Returns: Interceptors to use when invoking 'upgradedConsensusState'.
  func makeUpgradedConsensusStateInterceptors() -> [ClientInterceptor<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>]
}

internal final class Ibc_Core_Client_V1_QueryClient: Ibc_Core_Client_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.core.client.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Core_Client_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query provides defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ibc_Core_Client_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// ClientState queries an IBC light client.
  func clientState(request: Ibc_Core_Client_V1_QueryClientStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStateResponse>

  /// ClientStates queries all the IBC light clients of a chain.
  func clientStates(request: Ibc_Core_Client_V1_QueryClientStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStatesResponse>

  /// ConsensusState queries a consensus state associated with a client state at
  /// a given height.
  func consensusState(request: Ibc_Core_Client_V1_QueryConsensusStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryConsensusStateResponse>

  /// ConsensusStates queries all the consensus state associated with a given
  /// client.
  func consensusStates(request: Ibc_Core_Client_V1_QueryConsensusStatesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryConsensusStatesResponse>

  /// Status queries the status of an IBC client.
  func clientStatus(request: Ibc_Core_Client_V1_QueryClientStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientStatusResponse>

  /// ClientParams queries all parameters of the ibc client.
  func clientParams(request: Ibc_Core_Client_V1_QueryClientParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryClientParamsResponse>

  /// UpgradedClientState queries an Upgraded IBC light client.
  func upgradedClientState(request: Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>

  /// UpgradedConsensusState queries an Upgraded IBC consensus state.
  func upgradedConsensusState(request: Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>
}

extension Ibc_Core_Client_V1_QueryProvider {
  internal var serviceName: Substring { return "ibc.core.client.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ClientState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStateResponse>(),
        interceptors: self.interceptors?.makeClientStateInterceptors() ?? [],
        userFunction: self.clientState(request:context:)
      )

    case "ClientStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatesResponse>(),
        interceptors: self.interceptors?.makeClientStatesInterceptors() ?? [],
        userFunction: self.clientStates(request:context:)
      )

    case "ConsensusState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStateResponse>(),
        interceptors: self.interceptors?.makeConsensusStateInterceptors() ?? [],
        userFunction: self.consensusState(request:context:)
      )

    case "ConsensusStates":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryConsensusStatesRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryConsensusStatesResponse>(),
        interceptors: self.interceptors?.makeConsensusStatesInterceptors() ?? [],
        userFunction: self.consensusStates(request:context:)
      )

    case "ClientStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientStatusRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientStatusResponse>(),
        interceptors: self.interceptors?.makeClientStatusInterceptors() ?? [],
        userFunction: self.clientStatus(request:context:)
      )

    case "ClientParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryClientParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryClientParamsResponse>(),
        interceptors: self.interceptors?.makeClientParamsInterceptors() ?? [],
        userFunction: self.clientParams(request:context:)
      )

    case "UpgradedClientState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedClientStateInterceptors() ?? [],
        userFunction: self.upgradedClientState(request:context:)
      )

    case "UpgradedConsensusState":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest>(),
        responseSerializer: ProtobufSerializer<Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>(),
        interceptors: self.interceptors?.makeUpgradedConsensusStateInterceptors() ?? [],
        userFunction: self.upgradedConsensusState(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ibc_Core_Client_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'clientState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStateRequest, Ibc_Core_Client_V1_QueryClientStateResponse>]

  /// - Returns: Interceptors to use when handling 'clientStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStatesInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStatesRequest, Ibc_Core_Client_V1_QueryClientStatesResponse>]

  /// - Returns: Interceptors to use when handling 'consensusState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsensusStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryConsensusStateRequest, Ibc_Core_Client_V1_QueryConsensusStateResponse>]

  /// - Returns: Interceptors to use when handling 'consensusStates'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConsensusStatesInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryConsensusStatesRequest, Ibc_Core_Client_V1_QueryConsensusStatesResponse>]

  /// - Returns: Interceptors to use when handling 'clientStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientStatusInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientStatusRequest, Ibc_Core_Client_V1_QueryClientStatusResponse>]

  /// - Returns: Interceptors to use when handling 'clientParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClientParamsInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryClientParamsRequest, Ibc_Core_Client_V1_QueryClientParamsResponse>]

  /// - Returns: Interceptors to use when handling 'upgradedClientState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpgradedClientStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryUpgradedClientStateRequest, Ibc_Core_Client_V1_QueryUpgradedClientStateResponse>]

  /// - Returns: Interceptors to use when handling 'upgradedConsensusState'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpgradedConsensusStateInterceptors() -> [ServerInterceptor<Ibc_Core_Client_V1_QueryUpgradedConsensusStateRequest, Ibc_Core_Client_V1_QueryUpgradedConsensusStateResponse>]
}
