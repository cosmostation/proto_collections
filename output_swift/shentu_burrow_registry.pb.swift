// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shentu/burrow/registry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// NodeIdentity stores and establishes a binding between 4 different types of identifiers, a human readable name,
/// a advertised network address, a p2p station-to-station key, and a validator key. Updates must be signed
/// by the node key and the validator key to prove the update is consensual.
struct Registry_NodeIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Peer moniker name
  var moniker: String = String()

  /// Peer network address
  var networkAddress: String = String()

  /// The Tendermint p2p node ID
  var tendermintNodeID: Data = Data()

  /// The public key that this node will validate with if it becomes a validator 
  /// (use this to create a binding between p2p node ID and validator)
  var validatorPublicKey: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "registry"

extension Registry_NodeIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeIdentity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Moniker"),
    2: .same(proto: "NetworkAddress"),
    3: .same(proto: "TendermintNodeID"),
    4: .same(proto: "ValidatorPublicKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.networkAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.tendermintNodeID) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.validatorPublicKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 1)
    }
    if !self.networkAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.networkAddress, fieldNumber: 2)
    }
    if !self.tendermintNodeID.isEmpty {
      try visitor.visitSingularBytesField(value: self.tendermintNodeID, fieldNumber: 3)
    }
    if !self.validatorPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.validatorPublicKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Registry_NodeIdentity, rhs: Registry_NodeIdentity) -> Bool {
    if lhs.moniker != rhs.moniker {return false}
    if lhs.networkAddress != rhs.networkAddress {return false}
    if lhs.tendermintNodeID != rhs.tendermintNodeID {return false}
    if lhs.validatorPublicKey != rhs.validatorPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
