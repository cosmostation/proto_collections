// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/swap/v1beta1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgDeposit represents a message for depositing liquidity into a pool
struct Kava_Swap_V1beta1_MsgDeposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// depositor represents the address to deposit funds from
  var depositor: String = String()

  /// token_a represents one token of deposit pair
  var tokenA: Cosmos_Base_V1beta1_Coin {
    get {return _tokenA ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenA = newValue}
  }
  /// Returns true if `tokenA` has been explicitly set.
  var hasTokenA: Bool {return self._tokenA != nil}
  /// Clears the value of `tokenA`. Subsequent reads from it will return its default value.
  mutating func clearTokenA() {self._tokenA = nil}

  /// token_b represents one token of deposit pair
  var tokenB: Cosmos_Base_V1beta1_Coin {
    get {return _tokenB ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenB = newValue}
  }
  /// Returns true if `tokenB` has been explicitly set.
  var hasTokenB: Bool {return self._tokenB != nil}
  /// Clears the value of `tokenB`. Subsequent reads from it will return its default value.
  mutating func clearTokenB() {self._tokenB = nil}

  /// slippage represents the max decimal percentage price change
  var slippage: String = String()

  /// deadline represents the unix timestamp to complete the deposit by
  var deadline: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenA: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _tokenB: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgDepositResponse defines the Msg/Deposit response type.
struct Kava_Swap_V1beta1_MsgDepositResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgWithdraw represents a message for withdrawing liquidity from a pool
struct Kava_Swap_V1beta1_MsgWithdraw {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// from represents the address we are withdrawing for
  var from: String = String()

  /// shares represents the amount of shares to withdraw
  var shares: String = String()

  /// min_token_a represents the minimum a token to withdraw
  var minTokenA: Cosmos_Base_V1beta1_Coin {
    get {return _minTokenA ?? Cosmos_Base_V1beta1_Coin()}
    set {_minTokenA = newValue}
  }
  /// Returns true if `minTokenA` has been explicitly set.
  var hasMinTokenA: Bool {return self._minTokenA != nil}
  /// Clears the value of `minTokenA`. Subsequent reads from it will return its default value.
  mutating func clearMinTokenA() {self._minTokenA = nil}

  /// min_token_a represents the minimum a token to withdraw
  var minTokenB: Cosmos_Base_V1beta1_Coin {
    get {return _minTokenB ?? Cosmos_Base_V1beta1_Coin()}
    set {_minTokenB = newValue}
  }
  /// Returns true if `minTokenB` has been explicitly set.
  var hasMinTokenB: Bool {return self._minTokenB != nil}
  /// Clears the value of `minTokenB`. Subsequent reads from it will return its default value.
  mutating func clearMinTokenB() {self._minTokenB = nil}

  /// deadline represents the unix timestamp to complete the withdraw by
  var deadline: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minTokenA: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _minTokenB: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgWithdrawResponse defines the Msg/Withdraw response type.
struct Kava_Swap_V1beta1_MsgWithdrawResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSwapExactForTokens represents a message for trading exact coinA for coinB
struct Kava_Swap_V1beta1_MsgSwapExactForTokens {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// represents the address swaping the tokens
  var requester: String = String()

  /// exact_token_a represents the exact amount to swap for token_b
  var exactTokenA: Cosmos_Base_V1beta1_Coin {
    get {return _exactTokenA ?? Cosmos_Base_V1beta1_Coin()}
    set {_exactTokenA = newValue}
  }
  /// Returns true if `exactTokenA` has been explicitly set.
  var hasExactTokenA: Bool {return self._exactTokenA != nil}
  /// Clears the value of `exactTokenA`. Subsequent reads from it will return its default value.
  mutating func clearExactTokenA() {self._exactTokenA = nil}

  /// token_b represents the desired token_b to swap for
  var tokenB: Cosmos_Base_V1beta1_Coin {
    get {return _tokenB ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenB = newValue}
  }
  /// Returns true if `tokenB` has been explicitly set.
  var hasTokenB: Bool {return self._tokenB != nil}
  /// Clears the value of `tokenB`. Subsequent reads from it will return its default value.
  mutating func clearTokenB() {self._tokenB = nil}

  /// slippage represents the maximum change in token_b allowed
  var slippage: String = String()

  /// deadline represents the unix timestamp to complete the swap by
  var deadline: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exactTokenA: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _tokenB: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSwapExactForTokensResponse defines the Msg/SwapExactForTokens response
/// type.
struct Kava_Swap_V1beta1_MsgSwapExactForTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSwapForExactTokens represents a message for trading coinA for an exact
/// coinB
struct Kava_Swap_V1beta1_MsgSwapForExactTokens {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// represents the address swaping the tokens
  var requester: String = String()

  /// token_a represents the desired token_a to swap for
  var tokenA: Cosmos_Base_V1beta1_Coin {
    get {return _tokenA ?? Cosmos_Base_V1beta1_Coin()}
    set {_tokenA = newValue}
  }
  /// Returns true if `tokenA` has been explicitly set.
  var hasTokenA: Bool {return self._tokenA != nil}
  /// Clears the value of `tokenA`. Subsequent reads from it will return its default value.
  mutating func clearTokenA() {self._tokenA = nil}

  /// exact_token_b represents the exact token b amount to swap for token a
  var exactTokenB: Cosmos_Base_V1beta1_Coin {
    get {return _exactTokenB ?? Cosmos_Base_V1beta1_Coin()}
    set {_exactTokenB = newValue}
  }
  /// Returns true if `exactTokenB` has been explicitly set.
  var hasExactTokenB: Bool {return self._exactTokenB != nil}
  /// Clears the value of `exactTokenB`. Subsequent reads from it will return its default value.
  mutating func clearExactTokenB() {self._exactTokenB = nil}

  /// slippage represents the maximum change in token_a allowed
  var slippage: String = String()

  /// deadline represents the unix timestamp to complete the swap by
  var deadline: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tokenA: Cosmos_Base_V1beta1_Coin? = nil
  fileprivate var _exactTokenB: Cosmos_Base_V1beta1_Coin? = nil
}

/// MsgSwapForExactTokensResponse defines the Msg/SwapForExactTokensResponse
/// response type.
struct Kava_Swap_V1beta1_MsgSwapForExactTokensResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.swap.v1beta1"

extension Kava_Swap_V1beta1_MsgDeposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .standard(proto: "token_a"),
    3: .standard(proto: "token_b"),
    4: .same(proto: "slippage"),
    5: .same(proto: "deadline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tokenA) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenB) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.slippage) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.deadline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if let v = self._tokenA {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tokenB {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.slippage.isEmpty {
      try visitor.visitSingularStringField(value: self.slippage, fieldNumber: 4)
    }
    if self.deadline != 0 {
      try visitor.visitSingularInt64Field(value: self.deadline, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgDeposit, rhs: Kava_Swap_V1beta1_MsgDeposit) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs._tokenA != rhs._tokenA {return false}
    if lhs._tokenB != rhs._tokenB {return false}
    if lhs.slippage != rhs.slippage {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgDepositResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDepositResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgDepositResponse, rhs: Kava_Swap_V1beta1_MsgDepositResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgWithdraw: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdraw"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "shares"),
    3: .standard(proto: "min_token_a"),
    4: .standard(proto: "min_token_b"),
    5: .same(proto: "deadline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.from) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.shares) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._minTokenA) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._minTokenB) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.deadline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.from.isEmpty {
      try visitor.visitSingularStringField(value: self.from, fieldNumber: 1)
    }
    if !self.shares.isEmpty {
      try visitor.visitSingularStringField(value: self.shares, fieldNumber: 2)
    }
    if let v = self._minTokenA {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._minTokenB {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if self.deadline != 0 {
      try visitor.visitSingularInt64Field(value: self.deadline, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgWithdraw, rhs: Kava_Swap_V1beta1_MsgWithdraw) -> Bool {
    if lhs.from != rhs.from {return false}
    if lhs.shares != rhs.shares {return false}
    if lhs._minTokenA != rhs._minTokenA {return false}
    if lhs._minTokenB != rhs._minTokenB {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgWithdrawResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgWithdrawResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgWithdrawResponse, rhs: Kava_Swap_V1beta1_MsgWithdrawResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgSwapExactForTokens: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactForTokens"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requester"),
    2: .standard(proto: "exact_token_a"),
    3: .standard(proto: "token_b"),
    4: .same(proto: "slippage"),
    5: .same(proto: "deadline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requester) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._exactTokenA) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tokenB) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.slippage) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.deadline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requester.isEmpty {
      try visitor.visitSingularStringField(value: self.requester, fieldNumber: 1)
    }
    if let v = self._exactTokenA {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._tokenB {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.slippage.isEmpty {
      try visitor.visitSingularStringField(value: self.slippage, fieldNumber: 4)
    }
    if self.deadline != 0 {
      try visitor.visitSingularInt64Field(value: self.deadline, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgSwapExactForTokens, rhs: Kava_Swap_V1beta1_MsgSwapExactForTokens) -> Bool {
    if lhs.requester != rhs.requester {return false}
    if lhs._exactTokenA != rhs._exactTokenA {return false}
    if lhs._tokenB != rhs._tokenB {return false}
    if lhs.slippage != rhs.slippage {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgSwapExactForTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapExactForTokensResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgSwapExactForTokensResponse, rhs: Kava_Swap_V1beta1_MsgSwapExactForTokensResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgSwapForExactTokens: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapForExactTokens"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "requester"),
    2: .standard(proto: "token_a"),
    3: .standard(proto: "exact_token_b"),
    4: .same(proto: "slippage"),
    5: .same(proto: "deadline"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.requester) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tokenA) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._exactTokenB) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.slippage) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.deadline) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.requester.isEmpty {
      try visitor.visitSingularStringField(value: self.requester, fieldNumber: 1)
    }
    if let v = self._tokenA {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._exactTokenB {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.slippage.isEmpty {
      try visitor.visitSingularStringField(value: self.slippage, fieldNumber: 4)
    }
    if self.deadline != 0 {
      try visitor.visitSingularInt64Field(value: self.deadline, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgSwapForExactTokens, rhs: Kava_Swap_V1beta1_MsgSwapForExactTokens) -> Bool {
    if lhs.requester != rhs.requester {return false}
    if lhs._tokenA != rhs._tokenA {return false}
    if lhs._exactTokenB != rhs._exactTokenB {return false}
    if lhs.slippage != rhs.slippage {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Swap_V1beta1_MsgSwapForExactTokensResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapForExactTokensResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Swap_V1beta1_MsgSwapForExactTokensResponse, rhs: Kava_Swap_V1beta1_MsgSwapForExactTokensResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
