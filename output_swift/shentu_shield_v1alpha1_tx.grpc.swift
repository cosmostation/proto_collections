//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/shield/v1alpha1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the shield Msg service.
///
/// Usage: instantiate `Shentu_Shield_V1alpha1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Shield_V1alpha1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Shield_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func createPool(
    _ request: Shentu_Shield_V1alpha1_MsgCreatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgCreatePool, Shentu_Shield_V1alpha1_MsgCreatePoolResponse>

  func updatePool(
    _ request: Shentu_Shield_V1alpha1_MsgUpdatePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUpdatePool, Shentu_Shield_V1alpha1_MsgUpdatePoolResponse>

  func pausePool(
    _ request: Shentu_Shield_V1alpha1_MsgPausePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgPausePool, Shentu_Shield_V1alpha1_MsgPausePoolResponse>

  func resumePool(
    _ request: Shentu_Shield_V1alpha1_MsgResumePool,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgResumePool, Shentu_Shield_V1alpha1_MsgResumePoolResponse>

  func depositCollateral(
    _ request: Shentu_Shield_V1alpha1_MsgDepositCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgDepositCollateral, Shentu_Shield_V1alpha1_MsgDepositCollateralResponse>

  func withdrawCollateral(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawCollateral, Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse>

  func withdrawRewards(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawRewards, Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse>

  func withdrawForeignRewards(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards, Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse>

  func purchaseShield(
    _ request: Shentu_Shield_V1alpha1_MsgPurchaseShield,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgPurchaseShield, Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse>

  func withdrawReimbursement(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawReimbursement,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawReimbursement, Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse>

  func updateSponsor(
    _ request: Shentu_Shield_V1alpha1_MsgUpdateSponsor,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUpdateSponsor, Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse>

  func stakeForShield(
    _ request: Shentu_Shield_V1alpha1_MsgStakeForShield,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgStakeForShield, Shentu_Shield_V1alpha1_MsgStakeForShieldResponse>

  func unstakeFromShield(
    _ request: Shentu_Shield_V1alpha1_MsgUnstakeFromShield,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUnstakeFromShield, Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse>
}

extension Shentu_Shield_V1alpha1_MsgClientProtocol {
  internal var serviceName: String {
    return "shentu.shield.v1alpha1.Msg"
  }

  /// Unary call to CreatePool
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPool(
    _ request: Shentu_Shield_V1alpha1_MsgCreatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgCreatePool, Shentu_Shield_V1alpha1_MsgCreatePoolResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/CreatePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? []
    )
  }

  /// Unary call to UpdatePool
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updatePool(
    _ request: Shentu_Shield_V1alpha1_MsgUpdatePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUpdatePool, Shentu_Shield_V1alpha1_MsgUpdatePoolResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/UpdatePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? []
    )
  }

  /// Unary call to PausePool
  ///
  /// - Parameters:
  ///   - request: Request to send to PausePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pausePool(
    _ request: Shentu_Shield_V1alpha1_MsgPausePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgPausePool, Shentu_Shield_V1alpha1_MsgPausePoolResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/PausePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePausePoolInterceptors() ?? []
    )
  }

  /// Unary call to ResumePool
  ///
  /// - Parameters:
  ///   - request: Request to send to ResumePool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resumePool(
    _ request: Shentu_Shield_V1alpha1_MsgResumePool,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgResumePool, Shentu_Shield_V1alpha1_MsgResumePoolResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/ResumePool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResumePoolInterceptors() ?? []
    )
  }

  /// Unary call to DepositCollateral
  ///
  /// - Parameters:
  ///   - request: Request to send to DepositCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func depositCollateral(
    _ request: Shentu_Shield_V1alpha1_MsgDepositCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgDepositCollateral, Shentu_Shield_V1alpha1_MsgDepositCollateralResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/DepositCollateral",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositCollateralInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawCollateral
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawCollateral(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawCollateral, Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/WithdrawCollateral",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawCollateralInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawRewards
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawRewards(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawRewards, Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/WithdrawRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRewardsInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawForeignRewards
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawForeignRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawForeignRewards(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards, Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/WithdrawForeignRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawForeignRewardsInterceptors() ?? []
    )
  }

  /// Unary call to PurchaseShield
  ///
  /// - Parameters:
  ///   - request: Request to send to PurchaseShield.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func purchaseShield(
    _ request: Shentu_Shield_V1alpha1_MsgPurchaseShield,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgPurchaseShield, Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/PurchaseShield",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePurchaseShieldInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawReimbursement
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawReimbursement.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawReimbursement(
    _ request: Shentu_Shield_V1alpha1_MsgWithdrawReimbursement,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgWithdrawReimbursement, Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/WithdrawReimbursement",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawReimbursementInterceptors() ?? []
    )
  }

  /// Unary call to UpdateSponsor
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSponsor.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSponsor(
    _ request: Shentu_Shield_V1alpha1_MsgUpdateSponsor,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUpdateSponsor, Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/UpdateSponsor",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSponsorInterceptors() ?? []
    )
  }

  /// Unary call to StakeForShield
  ///
  /// - Parameters:
  ///   - request: Request to send to StakeForShield.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakeForShield(
    _ request: Shentu_Shield_V1alpha1_MsgStakeForShield,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgStakeForShield, Shentu_Shield_V1alpha1_MsgStakeForShieldResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/StakeForShield",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakeForShieldInterceptors() ?? []
    )
  }

  /// Unary call to UnstakeFromShield
  ///
  /// - Parameters:
  ///   - request: Request to send to UnstakeFromShield.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func unstakeFromShield(
    _ request: Shentu_Shield_V1alpha1_MsgUnstakeFromShield,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Shield_V1alpha1_MsgUnstakeFromShield, Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse> {
    return self.makeUnaryCall(
      path: "/shentu.shield.v1alpha1.Msg/UnstakeFromShield",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUnstakeFromShieldInterceptors() ?? []
    )
  }
}

internal protocol Shentu_Shield_V1alpha1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createPool'.
  func makeCreatePoolInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgCreatePool, Shentu_Shield_V1alpha1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'updatePool'.
  func makeUpdatePoolInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgUpdatePool, Shentu_Shield_V1alpha1_MsgUpdatePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'pausePool'.
  func makePausePoolInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgPausePool, Shentu_Shield_V1alpha1_MsgPausePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'resumePool'.
  func makeResumePoolInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgResumePool, Shentu_Shield_V1alpha1_MsgResumePoolResponse>]

  /// - Returns: Interceptors to use when invoking 'depositCollateral'.
  func makeDepositCollateralInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgDepositCollateral, Shentu_Shield_V1alpha1_MsgDepositCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawCollateral'.
  func makeWithdrawCollateralInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawCollateral, Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawRewards'.
  func makeWithdrawRewardsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawRewards, Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawForeignRewards'.
  func makeWithdrawForeignRewardsInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards, Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'purchaseShield'.
  func makePurchaseShieldInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgPurchaseShield, Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawReimbursement'.
  func makeWithdrawReimbursementInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawReimbursement, Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse>]

  /// - Returns: Interceptors to use when invoking 'updateSponsor'.
  func makeUpdateSponsorInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgUpdateSponsor, Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse>]

  /// - Returns: Interceptors to use when invoking 'stakeForShield'.
  func makeStakeForShieldInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgStakeForShield, Shentu_Shield_V1alpha1_MsgStakeForShieldResponse>]

  /// - Returns: Interceptors to use when invoking 'unstakeFromShield'.
  func makeUnstakeFromShieldInterceptors() -> [ClientInterceptor<Shentu_Shield_V1alpha1_MsgUnstakeFromShield, Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse>]
}

internal final class Shentu_Shield_V1alpha1_MsgClient: Shentu_Shield_V1alpha1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Shield_V1alpha1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.shield.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Shield_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the shield Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Shield_V1alpha1_MsgProvider: CallHandlerProvider {
  var interceptors: Shentu_Shield_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  func createPool(request: Shentu_Shield_V1alpha1_MsgCreatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgCreatePoolResponse>

  func updatePool(request: Shentu_Shield_V1alpha1_MsgUpdatePool, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgUpdatePoolResponse>

  func pausePool(request: Shentu_Shield_V1alpha1_MsgPausePool, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgPausePoolResponse>

  func resumePool(request: Shentu_Shield_V1alpha1_MsgResumePool, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgResumePoolResponse>

  func depositCollateral(request: Shentu_Shield_V1alpha1_MsgDepositCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgDepositCollateralResponse>

  func withdrawCollateral(request: Shentu_Shield_V1alpha1_MsgWithdrawCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse>

  func withdrawRewards(request: Shentu_Shield_V1alpha1_MsgWithdrawRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse>

  func withdrawForeignRewards(request: Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse>

  func purchaseShield(request: Shentu_Shield_V1alpha1_MsgPurchaseShield, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse>

  func withdrawReimbursement(request: Shentu_Shield_V1alpha1_MsgWithdrawReimbursement, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse>

  func updateSponsor(request: Shentu_Shield_V1alpha1_MsgUpdateSponsor, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse>

  func stakeForShield(request: Shentu_Shield_V1alpha1_MsgStakeForShield, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgStakeForShieldResponse>

  func unstakeFromShield(request: Shentu_Shield_V1alpha1_MsgUnstakeFromShield, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse>
}

extension Shentu_Shield_V1alpha1_MsgProvider {
  internal var serviceName: Substring { return "shentu.shield.v1alpha1.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgCreatePool>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgCreatePoolResponse>(),
        interceptors: self.interceptors?.makeCreatePoolInterceptors() ?? [],
        userFunction: self.createPool(request:context:)
      )

    case "UpdatePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgUpdatePool>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgUpdatePoolResponse>(),
        interceptors: self.interceptors?.makeUpdatePoolInterceptors() ?? [],
        userFunction: self.updatePool(request:context:)
      )

    case "PausePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgPausePool>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgPausePoolResponse>(),
        interceptors: self.interceptors?.makePausePoolInterceptors() ?? [],
        userFunction: self.pausePool(request:context:)
      )

    case "ResumePool":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgResumePool>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgResumePoolResponse>(),
        interceptors: self.interceptors?.makeResumePoolInterceptors() ?? [],
        userFunction: self.resumePool(request:context:)
      )

    case "DepositCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgDepositCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgDepositCollateralResponse>(),
        interceptors: self.interceptors?.makeDepositCollateralInterceptors() ?? [],
        userFunction: self.depositCollateral(request:context:)
      )

    case "WithdrawCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgWithdrawCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse>(),
        interceptors: self.interceptors?.makeWithdrawCollateralInterceptors() ?? [],
        userFunction: self.withdrawCollateral(request:context:)
      )

    case "WithdrawRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgWithdrawRewards>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse>(),
        interceptors: self.interceptors?.makeWithdrawRewardsInterceptors() ?? [],
        userFunction: self.withdrawRewards(request:context:)
      )

    case "WithdrawForeignRewards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse>(),
        interceptors: self.interceptors?.makeWithdrawForeignRewardsInterceptors() ?? [],
        userFunction: self.withdrawForeignRewards(request:context:)
      )

    case "PurchaseShield":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgPurchaseShield>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse>(),
        interceptors: self.interceptors?.makePurchaseShieldInterceptors() ?? [],
        userFunction: self.purchaseShield(request:context:)
      )

    case "WithdrawReimbursement":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgWithdrawReimbursement>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse>(),
        interceptors: self.interceptors?.makeWithdrawReimbursementInterceptors() ?? [],
        userFunction: self.withdrawReimbursement(request:context:)
      )

    case "UpdateSponsor":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgUpdateSponsor>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse>(),
        interceptors: self.interceptors?.makeUpdateSponsorInterceptors() ?? [],
        userFunction: self.updateSponsor(request:context:)
      )

    case "StakeForShield":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgStakeForShield>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgStakeForShieldResponse>(),
        interceptors: self.interceptors?.makeStakeForShieldInterceptors() ?? [],
        userFunction: self.stakeForShield(request:context:)
      )

    case "UnstakeFromShield":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Shield_V1alpha1_MsgUnstakeFromShield>(),
        responseSerializer: ProtobufSerializer<Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse>(),
        interceptors: self.interceptors?.makeUnstakeFromShieldInterceptors() ?? [],
        userFunction: self.unstakeFromShield(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Shield_V1alpha1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createPool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePoolInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgCreatePool, Shentu_Shield_V1alpha1_MsgCreatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'updatePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatePoolInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgUpdatePool, Shentu_Shield_V1alpha1_MsgUpdatePoolResponse>]

  /// - Returns: Interceptors to use when handling 'pausePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePausePoolInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgPausePool, Shentu_Shield_V1alpha1_MsgPausePoolResponse>]

  /// - Returns: Interceptors to use when handling 'resumePool'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResumePoolInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgResumePool, Shentu_Shield_V1alpha1_MsgResumePoolResponse>]

  /// - Returns: Interceptors to use when handling 'depositCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositCollateralInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgDepositCollateral, Shentu_Shield_V1alpha1_MsgDepositCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawCollateralInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawCollateral, Shentu_Shield_V1alpha1_MsgWithdrawCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawRewardsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawRewards, Shentu_Shield_V1alpha1_MsgWithdrawRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawForeignRewards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawForeignRewardsInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawForeignRewards, Shentu_Shield_V1alpha1_MsgWithdrawForeignRewardsResponse>]

  /// - Returns: Interceptors to use when handling 'purchaseShield'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePurchaseShieldInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgPurchaseShield, Shentu_Shield_V1alpha1_MsgPurchaseShieldResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawReimbursement'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawReimbursementInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgWithdrawReimbursement, Shentu_Shield_V1alpha1_MsgWithdrawReimbursementResponse>]

  /// - Returns: Interceptors to use when handling 'updateSponsor'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateSponsorInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgUpdateSponsor, Shentu_Shield_V1alpha1_MsgUpdateSponsorResponse>]

  /// - Returns: Interceptors to use when handling 'stakeForShield'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakeForShieldInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgStakeForShield, Shentu_Shield_V1alpha1_MsgStakeForShieldResponse>]

  /// - Returns: Interceptors to use when handling 'unstakeFromShield'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUnstakeFromShieldInterceptors() -> [ServerInterceptor<Shentu_Shield_V1alpha1_MsgUnstakeFromShield, Shentu_Shield_V1alpha1_MsgUnstakeFromShieldResponse>]
}
