//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: panacea/did/v2/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Panacea_Did_V2_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Panacea_Did_V2_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Panacea_Did_V2_MsgClientInterceptorFactoryProtocol? { get }

  func createDID(
    _ request: Panacea_Did_V2_MsgCreateDID,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Did_V2_MsgCreateDID, Panacea_Did_V2_MsgCreateDIDResponse>

  func updateDID(
    _ request: Panacea_Did_V2_MsgUpdateDID,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Did_V2_MsgUpdateDID, Panacea_Did_V2_MsgUpdateDIDResponse>

  func deactivateDID(
    _ request: Panacea_Did_V2_MsgDeactivateDID,
    callOptions: CallOptions?
  ) -> UnaryCall<Panacea_Did_V2_MsgDeactivateDID, Panacea_Did_V2_MsgDeactivateDIDResponse>
}

extension Panacea_Did_V2_MsgClientProtocol {
  internal var serviceName: String {
    return "panacea.did.v2.Msg"
  }

  /// CreateDID defines a method for creating a DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createDID(
    _ request: Panacea_Did_V2_MsgCreateDID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Did_V2_MsgCreateDID, Panacea_Did_V2_MsgCreateDIDResponse> {
    return self.makeUnaryCall(
      path: "/panacea.did.v2.Msg/CreateDID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDIDInterceptors() ?? []
    )
  }

  /// UpdateDID defines a method for updating a DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateDID(
    _ request: Panacea_Did_V2_MsgUpdateDID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Did_V2_MsgUpdateDID, Panacea_Did_V2_MsgUpdateDIDResponse> {
    return self.makeUnaryCall(
      path: "/panacea.did.v2.Msg/UpdateDID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDIDInterceptors() ?? []
    )
  }

  /// DeactivateDID defines a method for deactivating a DID.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateDID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateDID(
    _ request: Panacea_Did_V2_MsgDeactivateDID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Panacea_Did_V2_MsgDeactivateDID, Panacea_Did_V2_MsgDeactivateDIDResponse> {
    return self.makeUnaryCall(
      path: "/panacea.did.v2.Msg/DeactivateDID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateDIDInterceptors() ?? []
    )
  }
}

internal protocol Panacea_Did_V2_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createDID'.
  func makeCreateDIDInterceptors() -> [ClientInterceptor<Panacea_Did_V2_MsgCreateDID, Panacea_Did_V2_MsgCreateDIDResponse>]

  /// - Returns: Interceptors to use when invoking 'updateDID'.
  func makeUpdateDIDInterceptors() -> [ClientInterceptor<Panacea_Did_V2_MsgUpdateDID, Panacea_Did_V2_MsgUpdateDIDResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateDID'.
  func makeDeactivateDIDInterceptors() -> [ClientInterceptor<Panacea_Did_V2_MsgDeactivateDID, Panacea_Did_V2_MsgDeactivateDIDResponse>]
}

internal final class Panacea_Did_V2_MsgClient: Panacea_Did_V2_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Panacea_Did_V2_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the panacea.did.v2.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Panacea_Did_V2_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Panacea_Did_V2_MsgProvider: CallHandlerProvider {
  var interceptors: Panacea_Did_V2_MsgServerInterceptorFactoryProtocol? { get }

  /// CreateDID defines a method for creating a DID.
  func createDID(request: Panacea_Did_V2_MsgCreateDID, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Did_V2_MsgCreateDIDResponse>

  /// UpdateDID defines a method for updating a DID.
  func updateDID(request: Panacea_Did_V2_MsgUpdateDID, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Did_V2_MsgUpdateDIDResponse>

  /// DeactivateDID defines a method for deactivating a DID.
  func deactivateDID(request: Panacea_Did_V2_MsgDeactivateDID, context: StatusOnlyCallContext) -> EventLoopFuture<Panacea_Did_V2_MsgDeactivateDIDResponse>
}

extension Panacea_Did_V2_MsgProvider {
  internal var serviceName: Substring { return "panacea.did.v2.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateDID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Did_V2_MsgCreateDID>(),
        responseSerializer: ProtobufSerializer<Panacea_Did_V2_MsgCreateDIDResponse>(),
        interceptors: self.interceptors?.makeCreateDIDInterceptors() ?? [],
        userFunction: self.createDID(request:context:)
      )

    case "UpdateDID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Did_V2_MsgUpdateDID>(),
        responseSerializer: ProtobufSerializer<Panacea_Did_V2_MsgUpdateDIDResponse>(),
        interceptors: self.interceptors?.makeUpdateDIDInterceptors() ?? [],
        userFunction: self.updateDID(request:context:)
      )

    case "DeactivateDID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Panacea_Did_V2_MsgDeactivateDID>(),
        responseSerializer: ProtobufSerializer<Panacea_Did_V2_MsgDeactivateDIDResponse>(),
        interceptors: self.interceptors?.makeDeactivateDIDInterceptors() ?? [],
        userFunction: self.deactivateDID(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Panacea_Did_V2_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createDID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDIDInterceptors() -> [ServerInterceptor<Panacea_Did_V2_MsgCreateDID, Panacea_Did_V2_MsgCreateDIDResponse>]

  /// - Returns: Interceptors to use when handling 'updateDID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDIDInterceptors() -> [ServerInterceptor<Panacea_Did_V2_MsgUpdateDID, Panacea_Did_V2_MsgUpdateDIDResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateDID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateDIDInterceptors() -> [ServerInterceptor<Panacea_Did_V2_MsgDeactivateDID, Panacea_Did_V2_MsgDeactivateDIDResponse>]
}
