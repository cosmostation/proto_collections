//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: evmos/incentives/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Evmos_Incentives_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Evmos_Incentives_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? { get }

  func incentives(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>

  func incentive(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>

  func gasMeters(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>

  func gasMeter(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>

  func allocationMeters(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>

  func allocationMeter(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>

  func params(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>
}

extension Evmos_Incentives_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "evmos.incentives.v1.Query"
  }

  /// Incentives retrieves registered incentives
  ///
  /// - Parameters:
  ///   - request: Request to send to Incentives.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentives(
    _ request: Evmos_Incentives_V1_QueryIncentivesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/Incentives",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivesInterceptors() ?? []
    )
  }

  /// Incentive retrieves a registered incentive
  ///
  /// - Parameters:
  ///   - request: Request to send to Incentive.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentive(
    _ request: Evmos_Incentives_V1_QueryIncentiveRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/Incentive",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentiveInterceptors() ?? []
    )
  }

  /// GasMeters retrieves active gas meters for a given contract
  ///
  /// - Parameters:
  ///   - request: Request to send to GasMeters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gasMeters(
    _ request: Evmos_Incentives_V1_QueryGasMetersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/GasMeters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMetersInterceptors() ?? []
    )
  }

  /// GasMeter Retrieves a active gas meter
  ///
  /// - Parameters:
  ///   - request: Request to send to GasMeter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func gasMeter(
    _ request: Evmos_Incentives_V1_QueryGasMeterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/GasMeter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGasMeterInterceptors() ?? []
    )
  }

  /// AllocationMeters retrieves active allocation meters for a given
  /// denomination
  ///
  /// - Parameters:
  ///   - request: Request to send to AllocationMeters.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allocationMeters(
    _ request: Evmos_Incentives_V1_QueryAllocationMetersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/AllocationMeters",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMetersInterceptors() ?? []
    )
  }

  /// AllocationMeter Retrieves a active gas meter
  ///
  /// - Parameters:
  ///   - request: Request to send to AllocationMeter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allocationMeter(
    _ request: Evmos_Incentives_V1_QueryAllocationMeterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/AllocationMeter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllocationMeterInterceptors() ?? []
    )
  }

  /// Params retrieves the incentives module params
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Evmos_Incentives_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/evmos.incentives.v1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }
}

internal protocol Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'incentives'.
  func makeIncentivesInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>]

  /// - Returns: Interceptors to use when invoking 'incentive'.
  func makeIncentiveInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>]

  /// - Returns: Interceptors to use when invoking 'gasMeters'.
  func makeGasMetersInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>]

  /// - Returns: Interceptors to use when invoking 'gasMeter'.
  func makeGasMeterInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>]

  /// - Returns: Interceptors to use when invoking 'allocationMeters'.
  func makeAllocationMetersInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>]

  /// - Returns: Interceptors to use when invoking 'allocationMeter'.
  func makeAllocationMeterInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>]

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>]
}

internal final class Evmos_Incentives_V1_QueryClient: Evmos_Incentives_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the evmos.incentives.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Evmos_Incentives_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Evmos_Incentives_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Evmos_Incentives_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Incentives retrieves registered incentives
  func incentives(request: Evmos_Incentives_V1_QueryIncentivesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryIncentivesResponse>

  /// Incentive retrieves a registered incentive
  func incentive(request: Evmos_Incentives_V1_QueryIncentiveRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryIncentiveResponse>

  /// GasMeters retrieves active gas meters for a given contract
  func gasMeters(request: Evmos_Incentives_V1_QueryGasMetersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryGasMetersResponse>

  /// GasMeter Retrieves a active gas meter
  func gasMeter(request: Evmos_Incentives_V1_QueryGasMeterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryGasMeterResponse>

  /// AllocationMeters retrieves active allocation meters for a given
  /// denomination
  func allocationMeters(request: Evmos_Incentives_V1_QueryAllocationMetersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryAllocationMetersResponse>

  /// AllocationMeter Retrieves a active gas meter
  func allocationMeter(request: Evmos_Incentives_V1_QueryAllocationMeterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryAllocationMeterResponse>

  /// Params retrieves the incentives module params
  func params(request: Evmos_Incentives_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Evmos_Incentives_V1_QueryParamsResponse>
}

extension Evmos_Incentives_V1_QueryProvider {
  internal var serviceName: Substring { return "evmos.incentives.v1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Incentives":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryIncentivesRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryIncentivesResponse>(),
        interceptors: self.interceptors?.makeIncentivesInterceptors() ?? [],
        userFunction: self.incentives(request:context:)
      )

    case "Incentive":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryIncentiveRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryIncentiveResponse>(),
        interceptors: self.interceptors?.makeIncentiveInterceptors() ?? [],
        userFunction: self.incentive(request:context:)
      )

    case "GasMeters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryGasMetersRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryGasMetersResponse>(),
        interceptors: self.interceptors?.makeGasMetersInterceptors() ?? [],
        userFunction: self.gasMeters(request:context:)
      )

    case "GasMeter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryGasMeterRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryGasMeterResponse>(),
        interceptors: self.interceptors?.makeGasMeterInterceptors() ?? [],
        userFunction: self.gasMeter(request:context:)
      )

    case "AllocationMeters":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryAllocationMetersRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryAllocationMetersResponse>(),
        interceptors: self.interceptors?.makeAllocationMetersInterceptors() ?? [],
        userFunction: self.allocationMeters(request:context:)
      )

    case "AllocationMeter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryAllocationMeterRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryAllocationMeterResponse>(),
        interceptors: self.interceptors?.makeAllocationMeterInterceptors() ?? [],
        userFunction: self.allocationMeter(request:context:)
      )

    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Evmos_Incentives_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Evmos_Incentives_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Evmos_Incentives_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'incentives'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentivesInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryIncentivesRequest, Evmos_Incentives_V1_QueryIncentivesResponse>]

  /// - Returns: Interceptors to use when handling 'incentive'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIncentiveInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryIncentiveRequest, Evmos_Incentives_V1_QueryIncentiveResponse>]

  /// - Returns: Interceptors to use when handling 'gasMeters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGasMetersInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryGasMetersRequest, Evmos_Incentives_V1_QueryGasMetersResponse>]

  /// - Returns: Interceptors to use when handling 'gasMeter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGasMeterInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryGasMeterRequest, Evmos_Incentives_V1_QueryGasMeterResponse>]

  /// - Returns: Interceptors to use when handling 'allocationMeters'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllocationMetersInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryAllocationMetersRequest, Evmos_Incentives_V1_QueryAllocationMetersResponse>]

  /// - Returns: Interceptors to use when handling 'allocationMeter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllocationMeterInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryAllocationMeterRequest, Evmos_Incentives_V1_QueryAllocationMeterResponse>]

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Evmos_Incentives_V1_QueryParamsRequest, Evmos_Incentives_V1_QueryParamsResponse>]
}
