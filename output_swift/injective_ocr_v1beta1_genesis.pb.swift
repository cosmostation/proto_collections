// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: injective/ocr/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the OCR module's genesis state.
struct Injective_Ocr_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the parameters of related to OCR.
  var params: Injective_Ocr_V1beta1_Params {
    get {return _params ?? Injective_Ocr_V1beta1_Params()}
    set {_params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return self._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {self._params = nil}

  /// feed_configs stores all of the supported OCR feeds
  var feedConfigs: [Injective_Ocr_V1beta1_FeedConfig] = []

  /// latest_epoch_and_rounds stores the latest epoch and round for each feedId
  var latestEpochAndRounds: [Injective_Ocr_V1beta1_FeedEpochAndRound] = []

  /// feed_transmissions stores the last transmission for each feed
  var feedTransmissions: [Injective_Ocr_V1beta1_FeedTransmission] = []

  /// latest_aggregator_round_ids stores the latest aggregator round ID for each feedId
  var latestAggregatorRoundIds: [Injective_Ocr_V1beta1_FeedLatestAggregatorRoundIDs] = []

  /// reward_pools stores the reward pools
  var rewardPools: [Injective_Ocr_V1beta1_RewardPool] = []

  /// feed_observation_counts stores the feed observation counts
  var feedObservationCounts: [Injective_Ocr_V1beta1_FeedCounts] = []

  /// feed_transmission_counts stores the feed transmission counts
  var feedTransmissionCounts: [Injective_Ocr_V1beta1_FeedCounts] = []

  /// pending_payeeships stores the pending payeeships
  var pendingPayeeships: [Injective_Ocr_V1beta1_PendingPayeeship] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _params: Injective_Ocr_V1beta1_Params? = nil
}

struct Injective_Ocr_V1beta1_FeedTransmission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var transmission: Injective_Ocr_V1beta1_Transmission {
    get {return _transmission ?? Injective_Ocr_V1beta1_Transmission()}
    set {_transmission = newValue}
  }
  /// Returns true if `transmission` has been explicitly set.
  var hasTransmission: Bool {return self._transmission != nil}
  /// Clears the value of `transmission`. Subsequent reads from it will return its default value.
  mutating func clearTransmission() {self._transmission = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _transmission: Injective_Ocr_V1beta1_Transmission? = nil
}

struct Injective_Ocr_V1beta1_FeedEpochAndRound {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var epochAndRound: Injective_Ocr_V1beta1_EpochAndRound {
    get {return _epochAndRound ?? Injective_Ocr_V1beta1_EpochAndRound()}
    set {_epochAndRound = newValue}
  }
  /// Returns true if `epochAndRound` has been explicitly set.
  var hasEpochAndRound: Bool {return self._epochAndRound != nil}
  /// Clears the value of `epochAndRound`. Subsequent reads from it will return its default value.
  mutating func clearEpochAndRound() {self._epochAndRound = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _epochAndRound: Injective_Ocr_V1beta1_EpochAndRound? = nil
}

struct Injective_Ocr_V1beta1_FeedLatestAggregatorRoundIDs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var aggregatorRoundID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_RewardPool {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Injective_Ocr_V1beta1_FeedCounts {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var counts: [Injective_Ocr_V1beta1_Count] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_Count {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var count: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Injective_Ocr_V1beta1_PendingPayeeship {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedID: String = String()

  var transmitter: String = String()

  var proposedPayee: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "injective.ocr.v1beta1"

extension Injective_Ocr_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .standard(proto: "feed_configs"),
    3: .standard(proto: "latest_epoch_and_rounds"),
    4: .standard(proto: "feed_transmissions"),
    5: .standard(proto: "latest_aggregator_round_ids"),
    6: .standard(proto: "reward_pools"),
    7: .standard(proto: "feed_observation_counts"),
    8: .standard(proto: "feed_transmission_counts"),
    9: .standard(proto: "pending_payeeships"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._params) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.feedConfigs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.latestEpochAndRounds) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.feedTransmissions) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.latestAggregatorRoundIds) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.rewardPools) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.feedObservationCounts) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.feedTransmissionCounts) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.pendingPayeeships) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._params {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.feedConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedConfigs, fieldNumber: 2)
    }
    if !self.latestEpochAndRounds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.latestEpochAndRounds, fieldNumber: 3)
    }
    if !self.feedTransmissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedTransmissions, fieldNumber: 4)
    }
    if !self.latestAggregatorRoundIds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.latestAggregatorRoundIds, fieldNumber: 5)
    }
    if !self.rewardPools.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardPools, fieldNumber: 6)
    }
    if !self.feedObservationCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedObservationCounts, fieldNumber: 7)
    }
    if !self.feedTransmissionCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedTransmissionCounts, fieldNumber: 8)
    }
    if !self.pendingPayeeships.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pendingPayeeships, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_GenesisState, rhs: Injective_Ocr_V1beta1_GenesisState) -> Bool {
    if lhs._params != rhs._params {return false}
    if lhs.feedConfigs != rhs.feedConfigs {return false}
    if lhs.latestEpochAndRounds != rhs.latestEpochAndRounds {return false}
    if lhs.feedTransmissions != rhs.feedTransmissions {return false}
    if lhs.latestAggregatorRoundIds != rhs.latestAggregatorRoundIds {return false}
    if lhs.rewardPools != rhs.rewardPools {return false}
    if lhs.feedObservationCounts != rhs.feedObservationCounts {return false}
    if lhs.feedTransmissionCounts != rhs.feedTransmissionCounts {return false}
    if lhs.pendingPayeeships != rhs.pendingPayeeships {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedTransmission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedTransmission"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .same(proto: "transmission"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._transmission) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if let v = self._transmission {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedTransmission, rhs: Injective_Ocr_V1beta1_FeedTransmission) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs._transmission != rhs._transmission {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedEpochAndRound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedEpochAndRound"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .standard(proto: "epoch_and_round"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._epochAndRound) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if let v = self._epochAndRound {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedEpochAndRound, rhs: Injective_Ocr_V1beta1_FeedEpochAndRound) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs._epochAndRound != rhs._epochAndRound {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedLatestAggregatorRoundIDs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedLatestAggregatorRoundIDs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .standard(proto: "aggregator_round_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.aggregatorRoundID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if self.aggregatorRoundID != 0 {
      try visitor.visitSingularUInt64Field(value: self.aggregatorRoundID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedLatestAggregatorRoundIDs, rhs: Injective_Ocr_V1beta1_FeedLatestAggregatorRoundIDs) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.aggregatorRoundID != rhs.aggregatorRoundID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_RewardPool: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RewardPool"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_RewardPool, rhs: Injective_Ocr_V1beta1_RewardPool) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_FeedCounts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedCounts"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .same(proto: "counts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.counts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if !self.counts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.counts, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_FeedCounts, rhs: Injective_Ocr_V1beta1_FeedCounts) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.counts != rhs.counts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_Count: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Count"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_Count, rhs: Injective_Ocr_V1beta1_Count) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Injective_Ocr_V1beta1_PendingPayeeship: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PendingPayeeship"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_id"),
    2: .same(proto: "transmitter"),
    3: .standard(proto: "proposed_payee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.feedID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.transmitter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.proposedPayee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedID.isEmpty {
      try visitor.visitSingularStringField(value: self.feedID, fieldNumber: 1)
    }
    if !self.transmitter.isEmpty {
      try visitor.visitSingularStringField(value: self.transmitter, fieldNumber: 2)
    }
    if !self.proposedPayee.isEmpty {
      try visitor.visitSingularStringField(value: self.proposedPayee, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Injective_Ocr_V1beta1_PendingPayeeship, rhs: Injective_Ocr_V1beta1_PendingPayeeship) -> Bool {
    if lhs.feedID != rhs.feedID {return false}
    if lhs.transmitter != rhs.transmitter {return false}
    if lhs.proposedPayee != rhs.proposedPayee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
