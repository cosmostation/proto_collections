//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: regen/data/v1alpha2/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query is the regen.data.v1alpha2 Query service
///
/// Usage: instantiate `Regen_Data_V1alpha2_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Regen_Data_V1alpha2_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Regen_Data_V1alpha2_QueryClientInterceptorFactoryProtocol? { get }

  func byIRI(
    _ request: Regen_Data_V1alpha2_QueryByIRIRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Data_V1alpha2_QueryByIRIRequest, Regen_Data_V1alpha2_QueryByIRIResponse>

  func bySigner(
    _ request: Regen_Data_V1alpha2_QueryBySignerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Data_V1alpha2_QueryBySignerRequest, Regen_Data_V1alpha2_QueryBySignerResponse>

  func signers(
    _ request: Regen_Data_V1alpha2_QuerySignersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Regen_Data_V1alpha2_QuerySignersRequest, Regen_Data_V1alpha2_QuerySignersResponse>
}

extension Regen_Data_V1alpha2_QueryClientProtocol {
  internal var serviceName: String {
    return "regen.data.v1alpha2.Query"
  }

  /// ByHash queries data based on its ContentHash.
  ///
  /// - Parameters:
  ///   - request: Request to send to ByIRI.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func byIRI(
    _ request: Regen_Data_V1alpha2_QueryByIRIRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Data_V1alpha2_QueryByIRIRequest, Regen_Data_V1alpha2_QueryByIRIResponse> {
    return self.makeUnaryCall(
      path: "/regen.data.v1alpha2.Query/ByIRI",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeByIRIInterceptors() ?? []
    )
  }

  /// BySigner queries data based on signers.
  ///
  /// - Parameters:
  ///   - request: Request to send to BySigner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func bySigner(
    _ request: Regen_Data_V1alpha2_QueryBySignerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Data_V1alpha2_QueryBySignerRequest, Regen_Data_V1alpha2_QueryBySignerResponse> {
    return self.makeUnaryCall(
      path: "/regen.data.v1alpha2.Query/BySigner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBySignerInterceptors() ?? []
    )
  }

  /// Signers queries signers based on IRI.
  ///
  /// - Parameters:
  ///   - request: Request to send to Signers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func signers(
    _ request: Regen_Data_V1alpha2_QuerySignersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Regen_Data_V1alpha2_QuerySignersRequest, Regen_Data_V1alpha2_QuerySignersResponse> {
    return self.makeUnaryCall(
      path: "/regen.data.v1alpha2.Query/Signers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSignersInterceptors() ?? []
    )
  }
}

internal protocol Regen_Data_V1alpha2_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'byIRI'.
  func makeByIRIInterceptors() -> [ClientInterceptor<Regen_Data_V1alpha2_QueryByIRIRequest, Regen_Data_V1alpha2_QueryByIRIResponse>]

  /// - Returns: Interceptors to use when invoking 'bySigner'.
  func makeBySignerInterceptors() -> [ClientInterceptor<Regen_Data_V1alpha2_QueryBySignerRequest, Regen_Data_V1alpha2_QueryBySignerResponse>]

  /// - Returns: Interceptors to use when invoking 'signers'.
  func makeSignersInterceptors() -> [ClientInterceptor<Regen_Data_V1alpha2_QuerySignersRequest, Regen_Data_V1alpha2_QuerySignersResponse>]
}

internal final class Regen_Data_V1alpha2_QueryClient: Regen_Data_V1alpha2_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Regen_Data_V1alpha2_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the regen.data.v1alpha2.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Regen_Data_V1alpha2_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query is the regen.data.v1alpha2 Query service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Regen_Data_V1alpha2_QueryProvider: CallHandlerProvider {
  var interceptors: Regen_Data_V1alpha2_QueryServerInterceptorFactoryProtocol? { get }

  /// ByHash queries data based on its ContentHash.
  func byIRI(request: Regen_Data_V1alpha2_QueryByIRIRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Data_V1alpha2_QueryByIRIResponse>

  /// BySigner queries data based on signers.
  func bySigner(request: Regen_Data_V1alpha2_QueryBySignerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Data_V1alpha2_QueryBySignerResponse>

  /// Signers queries signers based on IRI.
  func signers(request: Regen_Data_V1alpha2_QuerySignersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Regen_Data_V1alpha2_QuerySignersResponse>
}

extension Regen_Data_V1alpha2_QueryProvider {
  internal var serviceName: Substring { return "regen.data.v1alpha2.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ByIRI":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Data_V1alpha2_QueryByIRIRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Data_V1alpha2_QueryByIRIResponse>(),
        interceptors: self.interceptors?.makeByIRIInterceptors() ?? [],
        userFunction: self.byIRI(request:context:)
      )

    case "BySigner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Data_V1alpha2_QueryBySignerRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Data_V1alpha2_QueryBySignerResponse>(),
        interceptors: self.interceptors?.makeBySignerInterceptors() ?? [],
        userFunction: self.bySigner(request:context:)
      )

    case "Signers":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Regen_Data_V1alpha2_QuerySignersRequest>(),
        responseSerializer: ProtobufSerializer<Regen_Data_V1alpha2_QuerySignersResponse>(),
        interceptors: self.interceptors?.makeSignersInterceptors() ?? [],
        userFunction: self.signers(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Regen_Data_V1alpha2_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'byIRI'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeByIRIInterceptors() -> [ServerInterceptor<Regen_Data_V1alpha2_QueryByIRIRequest, Regen_Data_V1alpha2_QueryByIRIResponse>]

  /// - Returns: Interceptors to use when handling 'bySigner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBySignerInterceptors() -> [ServerInterceptor<Regen_Data_V1alpha2_QueryBySignerRequest, Regen_Data_V1alpha2_QueryBySignerResponse>]

  /// - Returns: Interceptors to use when handling 'signers'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSignersInterceptors() -> [ServerInterceptor<Regen_Data_V1alpha2_QuerySignersRequest, Regen_Data_V1alpha2_QuerySignersResponse>]
}
