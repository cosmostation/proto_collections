// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/did/v2/did.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Strings defines a JSON-LD string array format which is marshalled to a single string if the array length is 1.
struct Panacea_Did_V2_Strings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DIDDocument defines a W3C DID Document
///
/// NOTE: All 'json_name' and 'gogoproto.customtype' tags are for panacea-core to unmarshal the v1.3 genesis which is in the W3C JSON-LD format.
///       On the other hand, the panacea-core and cosmos-sdk don't use those tags to marshal result to JSON (via grpc-gateway).
struct Panacea_Did_V2_DIDDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contexts: Panacea_Did_V2_Strings {
    get {return _contexts ?? Panacea_Did_V2_Strings()}
    set {_contexts = newValue}
  }
  /// Returns true if `contexts` has been explicitly set.
  var hasContexts: Bool {return self._contexts != nil}
  /// Clears the value of `contexts`. Subsequent reads from it will return its default value.
  mutating func clearContexts() {self._contexts = nil}

  var id: String = String()

  var controller: Panacea_Did_V2_Strings {
    get {return _controller ?? Panacea_Did_V2_Strings()}
    set {_controller = newValue}
  }
  /// Returns true if `controller` has been explicitly set.
  var hasController: Bool {return self._controller != nil}
  /// Clears the value of `controller`. Subsequent reads from it will return its default value.
  mutating func clearController() {self._controller = nil}

  var verificationMethods: [Panacea_Did_V2_VerificationMethod] = []

  /// TODO: the repeated gogoproto.customtype has an issue: https://github.com/gogo/protobuf/issues/478
  var authentications: [Panacea_Did_V2_VerificationRelationship] = []

  var assertionMethods: [Panacea_Did_V2_VerificationRelationship] = []

  var keyAgreements: [Panacea_Did_V2_VerificationRelationship] = []

  var capabilityInvocations: [Panacea_Did_V2_VerificationRelationship] = []

  var capabilityDelegations: [Panacea_Did_V2_VerificationRelationship] = []

  var services: [Panacea_Did_V2_Service] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contexts: Panacea_Did_V2_Strings? = nil
  fileprivate var _controller: Panacea_Did_V2_Strings? = nil
}

/// VerificationMethod defines a W3C verification method
struct Panacea_Did_V2_VerificationMethod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var type: String = String()

  var controller: String = String()

  var publicKeyBase58: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// VerificationRelationship defines a W3C verification relationship
struct Panacea_Did_V2_VerificationRelationship {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// VerificationRelationship can be one of a single ID or a VerificationMethod.
  var content: Panacea_Did_V2_VerificationRelationship.OneOf_Content? = nil

  var verificationMethodID: String {
    get {
      if case .verificationMethodID(let v)? = content {return v}
      return String()
    }
    set {content = .verificationMethodID(newValue)}
  }

  var verificationMethod: Panacea_Did_V2_VerificationMethod {
    get {
      if case .verificationMethod(let v)? = content {return v}
      return Panacea_Did_V2_VerificationMethod()
    }
    set {content = .verificationMethod(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// VerificationRelationship can be one of a single ID or a VerificationMethod.
  enum OneOf_Content: Equatable {
    case verificationMethodID(String)
    case verificationMethod(Panacea_Did_V2_VerificationMethod)

  #if !swift(>=4.1)
    static func ==(lhs: Panacea_Did_V2_VerificationRelationship.OneOf_Content, rhs: Panacea_Did_V2_VerificationRelationship.OneOf_Content) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.verificationMethodID, .verificationMethodID): return {
        guard case .verificationMethodID(let l) = lhs, case .verificationMethodID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.verificationMethod, .verificationMethod): return {
        guard case .verificationMethod(let l) = lhs, case .verificationMethod(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// Service defines a service in the W3C DID Document.
struct Panacea_Did_V2_Service {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var type: String = String()

  var serviceEndpoint: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DIDDocumentWithSeq defines a message for DID Document with a sequence number for preventing replay attacks.
struct Panacea_Did_V2_DIDDocumentWithSeq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var document: Panacea_Did_V2_DIDDocument {
    get {return _document ?? Panacea_Did_V2_DIDDocument()}
    set {_document = newValue}
  }
  /// Returns true if `document` has been explicitly set.
  var hasDocument: Bool {return self._document != nil}
  /// Clears the value of `document`. Subsequent reads from it will return its default value.
  mutating func clearDocument() {self._document = nil}

  var sequence: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _document: Panacea_Did_V2_DIDDocument? = nil
}

/// DataWithSeq defines a message for data with a sequence number for preventing replay attacks.
struct Panacea_Did_V2_DataWithSeq {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data = Data()

  var sequence: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.did.v2"

extension Panacea_Did_V2_Strings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Strings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.values) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedStringField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_Strings, rhs: Panacea_Did_V2_Strings) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_DIDDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DIDDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "contexts", json: "@context"),
    2: .same(proto: "id"),
    3: .same(proto: "controller"),
    4: .unique(proto: "verification_methods", json: "verificationMethod"),
    5: .unique(proto: "authentications", json: "authentication"),
    6: .unique(proto: "assertion_methods", json: "assertionMethod"),
    7: .unique(proto: "key_agreements", json: "keyAgreement"),
    8: .unique(proto: "capability_invocations", json: "capabilityInvocation"),
    9: .unique(proto: "capability_delegations", json: "capabilityDelegation"),
    10: .unique(proto: "services", json: "service"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contexts) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._controller) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.verificationMethods) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.authentications) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.assertionMethods) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.keyAgreements) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.capabilityInvocations) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.capabilityDelegations) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.services) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._contexts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 2)
    }
    if let v = self._controller {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.verificationMethods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.verificationMethods, fieldNumber: 4)
    }
    if !self.authentications.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.authentications, fieldNumber: 5)
    }
    if !self.assertionMethods.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.assertionMethods, fieldNumber: 6)
    }
    if !self.keyAgreements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keyAgreements, fieldNumber: 7)
    }
    if !self.capabilityInvocations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.capabilityInvocations, fieldNumber: 8)
    }
    if !self.capabilityDelegations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.capabilityDelegations, fieldNumber: 9)
    }
    if !self.services.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.services, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_DIDDocument, rhs: Panacea_Did_V2_DIDDocument) -> Bool {
    if lhs._contexts != rhs._contexts {return false}
    if lhs.id != rhs.id {return false}
    if lhs._controller != rhs._controller {return false}
    if lhs.verificationMethods != rhs.verificationMethods {return false}
    if lhs.authentications != rhs.authentications {return false}
    if lhs.assertionMethods != rhs.assertionMethods {return false}
    if lhs.keyAgreements != rhs.keyAgreements {return false}
    if lhs.capabilityInvocations != rhs.capabilityInvocations {return false}
    if lhs.capabilityDelegations != rhs.capabilityDelegations {return false}
    if lhs.services != rhs.services {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_VerificationMethod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerificationMethod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "controller"),
    4: .standard(proto: "public_key_base58"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.controller) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.publicKeyBase58) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.controller.isEmpty {
      try visitor.visitSingularStringField(value: self.controller, fieldNumber: 3)
    }
    if !self.publicKeyBase58.isEmpty {
      try visitor.visitSingularStringField(value: self.publicKeyBase58, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_VerificationMethod, rhs: Panacea_Did_V2_VerificationMethod) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.controller != rhs.controller {return false}
    if lhs.publicKeyBase58 != rhs.publicKeyBase58 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_VerificationRelationship: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerificationRelationship"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "verification_method_id"),
    2: .standard(proto: "verification_method"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.content != nil {try decoder.handleConflictingOneOf()}
          self.content = .verificationMethodID(v)
        }
      }()
      case 2: try {
        var v: Panacea_Did_V2_VerificationMethod?
        var hadOneofValue = false
        if let current = self.content {
          hadOneofValue = true
          if case .verificationMethod(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.content = .verificationMethod(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.content {
    case .verificationMethodID?: try {
      guard case .verificationMethodID(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }()
    case .verificationMethod?: try {
      guard case .verificationMethod(let v)? = self.content else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_VerificationRelationship, rhs: Panacea_Did_V2_VerificationRelationship) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_Service: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Service"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .standard(proto: "service_endpoint"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serviceEndpoint) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.serviceEndpoint.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceEndpoint, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_Service, rhs: Panacea_Did_V2_Service) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.type != rhs.type {return false}
    if lhs.serviceEndpoint != rhs.serviceEndpoint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_DIDDocumentWithSeq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DIDDocumentWithSeq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "document"),
    2: .same(proto: "sequence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._document) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._document {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_DIDDocumentWithSeq, rhs: Panacea_Did_V2_DIDDocumentWithSeq) -> Bool {
    if lhs._document != rhs._document {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Did_V2_DataWithSeq: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataWithSeq"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "sequence"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Did_V2_DataWithSeq, rhs: Panacea_Did_V2_DataWithSeq) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
