// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/hard/v1beta1/hard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the parameters for the hard module.
struct Kava_Hard_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var moneyMarkets: [Kava_Hard_V1beta1_MoneyMarket] = []

  var minimumBorrowUsdValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MoneyMarket is a money market for an individual asset.
struct Kava_Hard_V1beta1_MoneyMarket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var borrowLimit: Kava_Hard_V1beta1_BorrowLimit {
    get {return _borrowLimit ?? Kava_Hard_V1beta1_BorrowLimit()}
    set {_borrowLimit = newValue}
  }
  /// Returns true if `borrowLimit` has been explicitly set.
  var hasBorrowLimit: Bool {return self._borrowLimit != nil}
  /// Clears the value of `borrowLimit`. Subsequent reads from it will return its default value.
  mutating func clearBorrowLimit() {self._borrowLimit = nil}

  var spotMarketID: String = String()

  var conversionFactor: String = String()

  var interestRateModel: Kava_Hard_V1beta1_InterestRateModel {
    get {return _interestRateModel ?? Kava_Hard_V1beta1_InterestRateModel()}
    set {_interestRateModel = newValue}
  }
  /// Returns true if `interestRateModel` has been explicitly set.
  var hasInterestRateModel: Bool {return self._interestRateModel != nil}
  /// Clears the value of `interestRateModel`. Subsequent reads from it will return its default value.
  mutating func clearInterestRateModel() {self._interestRateModel = nil}

  var reserveFactor: String = String()

  var keeperRewardPercentage: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _borrowLimit: Kava_Hard_V1beta1_BorrowLimit? = nil
  fileprivate var _interestRateModel: Kava_Hard_V1beta1_InterestRateModel? = nil
}

/// BorrowLimit enforces restrictions on a money market.
struct Kava_Hard_V1beta1_BorrowLimit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hasMaxLimit_p: Bool = false

  var maximumLimit: String = String()

  var loanToValue: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// InterestRateModel contains information about an asset's interest rate.
struct Kava_Hard_V1beta1_InterestRateModel {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseRateApy: String = String()

  var baseMultiplier: String = String()

  var kink: String = String()

  var jumpMultiplier: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Deposit defines an amount of coins deposited into a hard module account.
struct Kava_Hard_V1beta1_Deposit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var depositor: String = String()

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var index: [Kava_Hard_V1beta1_SupplyInterestFactor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Borrow defines an amount of coins borrowed from a hard module account.
struct Kava_Hard_V1beta1_Borrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var borrower: String = String()

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var index: [Kava_Hard_V1beta1_BorrowInterestFactor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// SupplyInterestFactor defines an individual borrow interest factor.
struct Kava_Hard_V1beta1_SupplyInterestFactor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// BorrowInterestFactor defines an individual borrow interest factor.
struct Kava_Hard_V1beta1_BorrowInterestFactor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CoinsProto defines a Protobuf wrapper around a Coins slice
struct Kava_Hard_V1beta1_CoinsProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.hard.v1beta1"

extension Kava_Hard_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "money_markets"),
    2: .standard(proto: "minimum_borrow_usd_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.moneyMarkets) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.minimumBorrowUsdValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moneyMarkets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.moneyMarkets, fieldNumber: 1)
    }
    if !self.minimumBorrowUsdValue.isEmpty {
      try visitor.visitSingularStringField(value: self.minimumBorrowUsdValue, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_Params, rhs: Kava_Hard_V1beta1_Params) -> Bool {
    if lhs.moneyMarkets != rhs.moneyMarkets {return false}
    if lhs.minimumBorrowUsdValue != rhs.minimumBorrowUsdValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_MoneyMarket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MoneyMarket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "borrow_limit"),
    3: .standard(proto: "spot_market_id"),
    4: .standard(proto: "conversion_factor"),
    5: .standard(proto: "interest_rate_model"),
    6: .standard(proto: "reserve_factor"),
    7: .standard(proto: "keeper_reward_percentage"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._borrowLimit) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.spotMarketID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.conversionFactor) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._interestRateModel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.reserveFactor) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.keeperRewardPercentage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if let v = self._borrowLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.spotMarketID.isEmpty {
      try visitor.visitSingularStringField(value: self.spotMarketID, fieldNumber: 3)
    }
    if !self.conversionFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.conversionFactor, fieldNumber: 4)
    }
    if let v = self._interestRateModel {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if !self.reserveFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.reserveFactor, fieldNumber: 6)
    }
    if !self.keeperRewardPercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.keeperRewardPercentage, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_MoneyMarket, rhs: Kava_Hard_V1beta1_MoneyMarket) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs._borrowLimit != rhs._borrowLimit {return false}
    if lhs.spotMarketID != rhs.spotMarketID {return false}
    if lhs.conversionFactor != rhs.conversionFactor {return false}
    if lhs._interestRateModel != rhs._interestRateModel {return false}
    if lhs.reserveFactor != rhs.reserveFactor {return false}
    if lhs.keeperRewardPercentage != rhs.keeperRewardPercentage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_BorrowLimit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BorrowLimit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "has_max_limit"),
    2: .standard(proto: "maximum_limit"),
    3: .standard(proto: "loan_to_value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.hasMaxLimit_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.maximumLimit) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.loanToValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hasMaxLimit_p != false {
      try visitor.visitSingularBoolField(value: self.hasMaxLimit_p, fieldNumber: 1)
    }
    if !self.maximumLimit.isEmpty {
      try visitor.visitSingularStringField(value: self.maximumLimit, fieldNumber: 2)
    }
    if !self.loanToValue.isEmpty {
      try visitor.visitSingularStringField(value: self.loanToValue, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_BorrowLimit, rhs: Kava_Hard_V1beta1_BorrowLimit) -> Bool {
    if lhs.hasMaxLimit_p != rhs.hasMaxLimit_p {return false}
    if lhs.maximumLimit != rhs.maximumLimit {return false}
    if lhs.loanToValue != rhs.loanToValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_InterestRateModel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InterestRateModel"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_rate_apy"),
    2: .standard(proto: "base_multiplier"),
    3: .same(proto: "kink"),
    4: .standard(proto: "jump_multiplier"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.baseRateApy) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.baseMultiplier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.kink) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.jumpMultiplier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.baseRateApy.isEmpty {
      try visitor.visitSingularStringField(value: self.baseRateApy, fieldNumber: 1)
    }
    if !self.baseMultiplier.isEmpty {
      try visitor.visitSingularStringField(value: self.baseMultiplier, fieldNumber: 2)
    }
    if !self.kink.isEmpty {
      try visitor.visitSingularStringField(value: self.kink, fieldNumber: 3)
    }
    if !self.jumpMultiplier.isEmpty {
      try visitor.visitSingularStringField(value: self.jumpMultiplier, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_InterestRateModel, rhs: Kava_Hard_V1beta1_InterestRateModel) -> Bool {
    if lhs.baseRateApy != rhs.baseRateApy {return false}
    if lhs.baseMultiplier != rhs.baseMultiplier {return false}
    if lhs.kink != rhs.kink {return false}
    if lhs.jumpMultiplier != rhs.jumpMultiplier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_Deposit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deposit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "depositor"),
    2: .same(proto: "amount"),
    3: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.depositor) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.depositor.isEmpty {
      try visitor.visitSingularStringField(value: self.depositor, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 2)
    }
    if !self.index.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.index, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_Deposit, rhs: Kava_Hard_V1beta1_Deposit) -> Bool {
    if lhs.depositor != rhs.depositor {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_Borrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Borrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "borrower"),
    2: .same(proto: "amount"),
    3: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.borrower) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.amount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.borrower.isEmpty {
      try visitor.visitSingularStringField(value: self.borrower, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 2)
    }
    if !self.index.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.index, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_Borrow, rhs: Kava_Hard_V1beta1_Borrow) -> Bool {
    if lhs.borrower != rhs.borrower {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_SupplyInterestFactor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupplyInterestFactor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_SupplyInterestFactor, rhs: Kava_Hard_V1beta1_SupplyInterestFactor) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_BorrowInterestFactor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BorrowInterestFactor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_BorrowInterestFactor, rhs: Kava_Hard_V1beta1_BorrowInterestFactor) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Hard_V1beta1_CoinsProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoinsProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Hard_V1beta1_CoinsProto, rhs: Kava_Hard_V1beta1_CoinsProto) -> Bool {
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
