//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: payments/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Payments_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Payments_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Payments_QueryClientInterceptorFactoryProtocol? { get }

  func paymentTemplate(
    _ request: Payments_QueryPaymentTemplateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_QueryPaymentTemplateRequest, Payments_QueryPaymentTemplateResponse>

  func paymentContract(
    _ request: Payments_QueryPaymentContractRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_QueryPaymentContractRequest, Payments_QueryPaymentContractResponse>

  func paymentContractsByIdPrefix(
    _ request: Payments_QueryPaymentContractsByIdPrefixRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_QueryPaymentContractsByIdPrefixRequest, Payments_QueryPaymentContractsByIdPrefixResponse>

  func subscription(
    _ request: Payments_QuerySubscriptionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Payments_QuerySubscriptionRequest, Payments_QuerySubscriptionResponse>
}

extension Payments_QueryClientProtocol {
  internal var serviceName: String {
    return "payments.Query"
  }

  /// PaymentTemplate queries info of a specific payment template.
  ///
  /// - Parameters:
  ///   - request: Request to send to PaymentTemplate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paymentTemplate(
    _ request: Payments_QueryPaymentTemplateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_QueryPaymentTemplateRequest, Payments_QueryPaymentTemplateResponse> {
    return self.makeUnaryCall(
      path: "/payments.Query/PaymentTemplate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePaymentTemplateInterceptors() ?? []
    )
  }

  /// PaymentContract queries info of a specific payment contract.
  ///
  /// - Parameters:
  ///   - request: Request to send to PaymentContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paymentContract(
    _ request: Payments_QueryPaymentContractRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_QueryPaymentContractRequest, Payments_QueryPaymentContractResponse> {
    return self.makeUnaryCall(
      path: "/payments.Query/PaymentContract",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePaymentContractInterceptors() ?? []
    )
  }

  /// PaymentContractsByIdPrefix lists all payment contracts having an id with a specific prefix.
  ///
  /// - Parameters:
  ///   - request: Request to send to PaymentContractsByIdPrefix.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func paymentContractsByIdPrefix(
    _ request: Payments_QueryPaymentContractsByIdPrefixRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_QueryPaymentContractsByIdPrefixRequest, Payments_QueryPaymentContractsByIdPrefixResponse> {
    return self.makeUnaryCall(
      path: "/payments.Query/PaymentContractsByIdPrefix",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePaymentContractsByIdPrefixInterceptors() ?? []
    )
  }

  /// Subscription queries info of a specific Subscription.
  ///
  /// - Parameters:
  ///   - request: Request to send to Subscription.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func subscription(
    _ request: Payments_QuerySubscriptionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Payments_QuerySubscriptionRequest, Payments_QuerySubscriptionResponse> {
    return self.makeUnaryCall(
      path: "/payments.Query/Subscription",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubscriptionInterceptors() ?? []
    )
  }
}

internal protocol Payments_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'paymentTemplate'.
  func makePaymentTemplateInterceptors() -> [ClientInterceptor<Payments_QueryPaymentTemplateRequest, Payments_QueryPaymentTemplateResponse>]

  /// - Returns: Interceptors to use when invoking 'paymentContract'.
  func makePaymentContractInterceptors() -> [ClientInterceptor<Payments_QueryPaymentContractRequest, Payments_QueryPaymentContractResponse>]

  /// - Returns: Interceptors to use when invoking 'paymentContractsByIdPrefix'.
  func makePaymentContractsByIdPrefixInterceptors() -> [ClientInterceptor<Payments_QueryPaymentContractsByIdPrefixRequest, Payments_QueryPaymentContractsByIdPrefixResponse>]

  /// - Returns: Interceptors to use when invoking 'subscription'.
  func makeSubscriptionInterceptors() -> [ClientInterceptor<Payments_QuerySubscriptionRequest, Payments_QuerySubscriptionResponse>]
}

internal final class Payments_QueryClient: Payments_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Payments_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the payments.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Payments_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Payments_QueryProvider: CallHandlerProvider {
  var interceptors: Payments_QueryServerInterceptorFactoryProtocol? { get }

  /// PaymentTemplate queries info of a specific payment template.
  func paymentTemplate(request: Payments_QueryPaymentTemplateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Payments_QueryPaymentTemplateResponse>

  /// PaymentContract queries info of a specific payment contract.
  func paymentContract(request: Payments_QueryPaymentContractRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Payments_QueryPaymentContractResponse>

  /// PaymentContractsByIdPrefix lists all payment contracts having an id with a specific prefix.
  func paymentContractsByIdPrefix(request: Payments_QueryPaymentContractsByIdPrefixRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Payments_QueryPaymentContractsByIdPrefixResponse>

  /// Subscription queries info of a specific Subscription.
  func subscription(request: Payments_QuerySubscriptionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Payments_QuerySubscriptionResponse>
}

extension Payments_QueryProvider {
  internal var serviceName: Substring { return "payments.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "PaymentTemplate":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Payments_QueryPaymentTemplateRequest>(),
        responseSerializer: ProtobufSerializer<Payments_QueryPaymentTemplateResponse>(),
        interceptors: self.interceptors?.makePaymentTemplateInterceptors() ?? [],
        userFunction: self.paymentTemplate(request:context:)
      )

    case "PaymentContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Payments_QueryPaymentContractRequest>(),
        responseSerializer: ProtobufSerializer<Payments_QueryPaymentContractResponse>(),
        interceptors: self.interceptors?.makePaymentContractInterceptors() ?? [],
        userFunction: self.paymentContract(request:context:)
      )

    case "PaymentContractsByIdPrefix":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Payments_QueryPaymentContractsByIdPrefixRequest>(),
        responseSerializer: ProtobufSerializer<Payments_QueryPaymentContractsByIdPrefixResponse>(),
        interceptors: self.interceptors?.makePaymentContractsByIdPrefixInterceptors() ?? [],
        userFunction: self.paymentContractsByIdPrefix(request:context:)
      )

    case "Subscription":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Payments_QuerySubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Payments_QuerySubscriptionResponse>(),
        interceptors: self.interceptors?.makeSubscriptionInterceptors() ?? [],
        userFunction: self.subscription(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Payments_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'paymentTemplate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePaymentTemplateInterceptors() -> [ServerInterceptor<Payments_QueryPaymentTemplateRequest, Payments_QueryPaymentTemplateResponse>]

  /// - Returns: Interceptors to use when handling 'paymentContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePaymentContractInterceptors() -> [ServerInterceptor<Payments_QueryPaymentContractRequest, Payments_QueryPaymentContractResponse>]

  /// - Returns: Interceptors to use when handling 'paymentContractsByIdPrefix'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePaymentContractsByIdPrefixInterceptors() -> [ServerInterceptor<Payments_QueryPaymentContractsByIdPrefixRequest, Payments_QueryPaymentContractsByIdPrefixResponse>]

  /// - Returns: Interceptors to use when handling 'subscription'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubscriptionInterceptors() -> [ServerInterceptor<Payments_QuerySubscriptionRequest, Payments_QuerySubscriptionResponse>]
}
