//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: crescent/claim/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Crescent_Claim_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Crescent_Claim_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Crescent_Claim_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func airdrops(
    _ request: Crescent_Claim_V1beta1_QueryAirdropsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryAirdropsRequest, Crescent_Claim_V1beta1_QueryAirdropsResponse>

  func airdrop(
    _ request: Crescent_Claim_V1beta1_QueryAirdropRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryAirdropRequest, Crescent_Claim_V1beta1_QueryAirdropResponse>

  func claimRecord(
    _ request: Crescent_Claim_V1beta1_QueryClaimRecordRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryClaimRecordRequest, Crescent_Claim_V1beta1_QueryClaimRecordResponse>
}

extension Crescent_Claim_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "crescent.claim.v1beta1.Query"
  }

  /// Airdrops returns all airdrops.
  ///
  /// - Parameters:
  ///   - request: Request to send to Airdrops.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func airdrops(
    _ request: Crescent_Claim_V1beta1_QueryAirdropsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryAirdropsRequest, Crescent_Claim_V1beta1_QueryAirdropsResponse> {
    return self.makeUnaryCall(
      path: "/crescent.claim.v1beta1.Query/Airdrops",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAirdropsInterceptors() ?? []
    )
  }

  /// Airdrop returns the specific airdrop.
  ///
  /// - Parameters:
  ///   - request: Request to send to Airdrop.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func airdrop(
    _ request: Crescent_Claim_V1beta1_QueryAirdropRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryAirdropRequest, Crescent_Claim_V1beta1_QueryAirdropResponse> {
    return self.makeUnaryCall(
      path: "/crescent.claim.v1beta1.Query/Airdrop",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAirdropInterceptors() ?? []
    )
  }

  /// ClaimRecord returns the claim record for the recipient address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimRecord.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimRecord(
    _ request: Crescent_Claim_V1beta1_QueryClaimRecordRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Crescent_Claim_V1beta1_QueryClaimRecordRequest, Crescent_Claim_V1beta1_QueryClaimRecordResponse> {
    return self.makeUnaryCall(
      path: "/crescent.claim.v1beta1.Query/ClaimRecord",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? []
    )
  }
}

internal protocol Crescent_Claim_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'airdrops'.
  func makeAirdropsInterceptors() -> [ClientInterceptor<Crescent_Claim_V1beta1_QueryAirdropsRequest, Crescent_Claim_V1beta1_QueryAirdropsResponse>]

  /// - Returns: Interceptors to use when invoking 'airdrop'.
  func makeAirdropInterceptors() -> [ClientInterceptor<Crescent_Claim_V1beta1_QueryAirdropRequest, Crescent_Claim_V1beta1_QueryAirdropResponse>]

  /// - Returns: Interceptors to use when invoking 'claimRecord'.
  func makeClaimRecordInterceptors() -> [ClientInterceptor<Crescent_Claim_V1beta1_QueryClaimRecordRequest, Crescent_Claim_V1beta1_QueryClaimRecordResponse>]
}

internal final class Crescent_Claim_V1beta1_QueryClient: Crescent_Claim_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Crescent_Claim_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the crescent.claim.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Crescent_Claim_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Crescent_Claim_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Crescent_Claim_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Airdrops returns all airdrops.
  func airdrops(request: Crescent_Claim_V1beta1_QueryAirdropsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Claim_V1beta1_QueryAirdropsResponse>

  /// Airdrop returns the specific airdrop.
  func airdrop(request: Crescent_Claim_V1beta1_QueryAirdropRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Claim_V1beta1_QueryAirdropResponse>

  /// ClaimRecord returns the claim record for the recipient address.
  func claimRecord(request: Crescent_Claim_V1beta1_QueryClaimRecordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Crescent_Claim_V1beta1_QueryClaimRecordResponse>
}

extension Crescent_Claim_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "crescent.claim.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Airdrops":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Claim_V1beta1_QueryAirdropsRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Claim_V1beta1_QueryAirdropsResponse>(),
        interceptors: self.interceptors?.makeAirdropsInterceptors() ?? [],
        userFunction: self.airdrops(request:context:)
      )

    case "Airdrop":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Claim_V1beta1_QueryAirdropRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Claim_V1beta1_QueryAirdropResponse>(),
        interceptors: self.interceptors?.makeAirdropInterceptors() ?? [],
        userFunction: self.airdrop(request:context:)
      )

    case "ClaimRecord":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Crescent_Claim_V1beta1_QueryClaimRecordRequest>(),
        responseSerializer: ProtobufSerializer<Crescent_Claim_V1beta1_QueryClaimRecordResponse>(),
        interceptors: self.interceptors?.makeClaimRecordInterceptors() ?? [],
        userFunction: self.claimRecord(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Crescent_Claim_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'airdrops'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAirdropsInterceptors() -> [ServerInterceptor<Crescent_Claim_V1beta1_QueryAirdropsRequest, Crescent_Claim_V1beta1_QueryAirdropsResponse>]

  /// - Returns: Interceptors to use when handling 'airdrop'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAirdropInterceptors() -> [ServerInterceptor<Crescent_Claim_V1beta1_QueryAirdropRequest, Crescent_Claim_V1beta1_QueryAirdropResponse>]

  /// - Returns: Interceptors to use when handling 'claimRecord'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimRecordInterceptors() -> [ServerInterceptor<Crescent_Claim_V1beta1_QueryClaimRecordRequest, Crescent_Claim_V1beta1_QueryClaimRecordResponse>]
}
