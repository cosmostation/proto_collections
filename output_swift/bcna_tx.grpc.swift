//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bcna/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `BitCannaGlobal_Bcna_Bcna_MsgClient`, then call methods of this protocol to make API calls.
internal protocol BitCannaGlobal_Bcna_Bcna_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: BitCannaGlobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? { get }

  func createBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse>

  func updateBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>

  func deleteBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>

  func createSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse>

  func updateSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse>

  func deleteSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions?
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain, BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse>
}

extension BitCannaGlobal_Bcna_Bcna_MsgClientProtocol {
  internal var serviceName: String {
    return "BitCannaGlobal.bcna.bcna.Msg"
  }

  /// Unary call to CreateBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/CreateBitcannaid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/UpdateBitcannaid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to DeleteBitcannaid
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteBitcannaid.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteBitcannaid(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/DeleteBitcannaid",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? []
    )
  }

  /// Unary call to CreateSupplychain
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/CreateSupplychain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? []
    )
  }

  /// Unary call to UpdateSupplychain
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/UpdateSupplychain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? []
    )
  }

  /// this line is used by starport scaffolding # proto/tx/rpc
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteSupplychain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteSupplychain(
    _ request: BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain, BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse> {
    return self.makeUnaryCall(
      path: "/BitCannaGlobal.bcna.bcna.Msg/DeleteSupplychain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? []
    )
  }
}

internal protocol BitCannaGlobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createBitcannaid'.
  func makeCreateBitcannaidInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBitcannaid'.
  func makeUpdateBitcannaidInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteBitcannaid'.
  func makeDeleteBitcannaidInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>]

  /// - Returns: Interceptors to use when invoking 'createSupplychain'.
  func makeCreateSupplychainInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse>]

  /// - Returns: Interceptors to use when invoking 'updateSupplychain'.
  func makeUpdateSupplychainInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteSupplychain'.
  func makeDeleteSupplychainInterceptors() -> [ClientInterceptor<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain, BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse>]
}

internal final class BitCannaGlobal_Bcna_Bcna_MsgClient: BitCannaGlobal_Bcna_Bcna_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: BitCannaGlobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the BitCannaGlobal.bcna.bcna.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: BitCannaGlobal_Bcna_Bcna_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol BitCannaGlobal_Bcna_Bcna_MsgProvider: CallHandlerProvider {
  var interceptors: BitCannaGlobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol? { get }

  func createBitcannaid(request: BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse>

  func updateBitcannaid(request: BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>

  func deleteBitcannaid(request: BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>

  func createSupplychain(request: BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse>

  func updateSupplychain(request: BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse>

  /// this line is used by starport scaffolding # proto/tx/rpc
  func deleteSupplychain(request: BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain, context: StatusOnlyCallContext) -> EventLoopFuture<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse>
}

extension BitCannaGlobal_Bcna_Bcna_MsgProvider {
  internal var serviceName: Substring { return "BitCannaGlobal.bcna.bcna.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeCreateBitcannaidInterceptors() ?? [],
        userFunction: self.createBitcannaid(request:context:)
      )

    case "UpdateBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>(),
        interceptors: self.interceptors?.makeUpdateBitcannaidInterceptors() ?? [],
        userFunction: self.updateBitcannaid(request:context:)
      )

    case "DeleteBitcannaid":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>(),
        interceptors: self.interceptors?.makeDeleteBitcannaidInterceptors() ?? [],
        userFunction: self.deleteBitcannaid(request:context:)
      )

    case "CreateSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse>(),
        interceptors: self.interceptors?.makeCreateSupplychainInterceptors() ?? [],
        userFunction: self.createSupplychain(request:context:)
      )

    case "UpdateSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse>(),
        interceptors: self.interceptors?.makeUpdateSupplychainInterceptors() ?? [],
        userFunction: self.updateSupplychain(request:context:)
      )

    case "DeleteSupplychain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain>(),
        responseSerializer: ProtobufSerializer<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse>(),
        interceptors: self.interceptors?.makeDeleteSupplychainInterceptors() ?? [],
        userFunction: self.deleteSupplychain(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol BitCannaGlobal_Bcna_Bcna_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateBitcannaidInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgCreateBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'updateBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBitcannaidInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgUpdateBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'deleteBitcannaid'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteBitcannaidInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaid, BitCannaGlobal_Bcna_Bcna_MsgDeleteBitcannaidResponse>]

  /// - Returns: Interceptors to use when handling 'createSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateSupplychainInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgCreateSupplychainResponse>]

  /// - Returns: Interceptors to use when handling 'updateSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateSupplychainInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychain, BitCannaGlobal_Bcna_Bcna_MsgUpdateSupplychainResponse>]

  /// - Returns: Interceptors to use when handling 'deleteSupplychain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteSupplychainInterceptors() -> [ServerInterceptor<BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychain, BitCannaGlobal_Bcna_Bcna_MsgDeleteSupplychainResponse>]
}
