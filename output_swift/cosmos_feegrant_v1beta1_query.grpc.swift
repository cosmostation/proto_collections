//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/feegrant/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Feegrant_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Feegrant_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Feegrant_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func allowance(
    _ request: Cosmos_Feegrant_V1beta1_QueryAllowanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Feegrant_V1beta1_QueryAllowanceRequest, Cosmos_Feegrant_V1beta1_QueryAllowanceResponse>

  func allowances(
    _ request: Cosmos_Feegrant_V1beta1_QueryAllowancesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Feegrant_V1beta1_QueryAllowancesRequest, Cosmos_Feegrant_V1beta1_QueryAllowancesResponse>
}

extension Cosmos_Feegrant_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.feegrant.v1beta1.Query"
  }

  /// Allowance returns fee granted to the grantee by the granter.
  ///
  /// - Parameters:
  ///   - request: Request to send to Allowance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allowance(
    _ request: Cosmos_Feegrant_V1beta1_QueryAllowanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Feegrant_V1beta1_QueryAllowanceRequest, Cosmos_Feegrant_V1beta1_QueryAllowanceResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.feegrant.v1beta1.Query/Allowance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowanceInterceptors() ?? []
    )
  }

  /// Allowances returns all the grants for address.
  ///
  /// - Parameters:
  ///   - request: Request to send to Allowances.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func allowances(
    _ request: Cosmos_Feegrant_V1beta1_QueryAllowancesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Feegrant_V1beta1_QueryAllowancesRequest, Cosmos_Feegrant_V1beta1_QueryAllowancesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.feegrant.v1beta1.Query/Allowances",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAllowancesInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Feegrant_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'allowance'.
  func makeAllowanceInterceptors() -> [ClientInterceptor<Cosmos_Feegrant_V1beta1_QueryAllowanceRequest, Cosmos_Feegrant_V1beta1_QueryAllowanceResponse>]

  /// - Returns: Interceptors to use when invoking 'allowances'.
  func makeAllowancesInterceptors() -> [ClientInterceptor<Cosmos_Feegrant_V1beta1_QueryAllowancesRequest, Cosmos_Feegrant_V1beta1_QueryAllowancesResponse>]
}

internal final class Cosmos_Feegrant_V1beta1_QueryClient: Cosmos_Feegrant_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Feegrant_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.feegrant.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Feegrant_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Feegrant_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Cosmos_Feegrant_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Allowance returns fee granted to the grantee by the granter.
  func allowance(request: Cosmos_Feegrant_V1beta1_QueryAllowanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Feegrant_V1beta1_QueryAllowanceResponse>

  /// Allowances returns all the grants for address.
  func allowances(request: Cosmos_Feegrant_V1beta1_QueryAllowancesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Feegrant_V1beta1_QueryAllowancesResponse>
}

extension Cosmos_Feegrant_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "cosmos.feegrant.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Allowance":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Feegrant_V1beta1_QueryAllowanceRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Feegrant_V1beta1_QueryAllowanceResponse>(),
        interceptors: self.interceptors?.makeAllowanceInterceptors() ?? [],
        userFunction: self.allowance(request:context:)
      )

    case "Allowances":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cosmos_Feegrant_V1beta1_QueryAllowancesRequest>(),
        responseSerializer: ProtobufSerializer<Cosmos_Feegrant_V1beta1_QueryAllowancesResponse>(),
        interceptors: self.interceptors?.makeAllowancesInterceptors() ?? [],
        userFunction: self.allowances(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Cosmos_Feegrant_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'allowance'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllowanceInterceptors() -> [ServerInterceptor<Cosmos_Feegrant_V1beta1_QueryAllowanceRequest, Cosmos_Feegrant_V1beta1_QueryAllowanceResponse>]

  /// - Returns: Interceptors to use when handling 'allowances'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAllowancesInterceptors() -> [ServerInterceptor<Cosmos_Feegrant_V1beta1_QueryAllowancesRequest, Cosmos_Feegrant_V1beta1_QueryAllowancesResponse>]
}
