// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: starname/iov/escrow/v1beta1/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// EventCreatedEscrow is emitted when an escrow is created
struct Starnamed_X_Escrow_V1beta1_EventCreatedEscrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var seller: String = String()

  var feePayer: String = String()

  var brokerAddress: String = String()

  var brokerCommission: String = String()

  var price: [Cosmos_Base_V1beta1_Coin] = []

  var object: Google_Protobuf2_Any {
    get {return _object ?? Google_Protobuf2_Any()}
    set {_object = newValue}
  }
  /// Returns true if `object` has been explicitly set.
  var hasObject: Bool {return self._object != nil}
  /// Clears the value of `object`. Subsequent reads from it will return its default value.
  mutating func clearObject() {self._object = nil}

  var deadline: UInt64 = 0

  var fees: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _object: Google_Protobuf2_Any? = nil
}

/// EventUpdatedEscrow is emitted when an escrow is updated
struct Starnamed_X_Escrow_V1beta1_EventUpdatedEscrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var updater: String = String()

  var feePayer: String = String()

  var newSeller: String = String()

  var newPrice: [Cosmos_Base_V1beta1_Coin] = []

  var newDeadline: UInt64 = 0

  var fees: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventCompletedEscrow is emitted when an escrow is completed
struct Starnamed_X_Escrow_V1beta1_EventCompletedEscrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var feePayer: String = String()

  var buyer: String = String()

  var fees: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventRefundedEscrow is emitted when an escrow is refunded
struct Starnamed_X_Escrow_V1beta1_EventRefundedEscrow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var feePayer: String = String()

  var sender: String = String()

  var fees: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "starnamed.x.escrow.v1beta1"

extension Starnamed_X_Escrow_V1beta1_EventCreatedEscrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCreatedEscrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "seller"),
    3: .standard(proto: "fee_payer"),
    4: .standard(proto: "broker_address"),
    5: .standard(proto: "broker_commission"),
    6: .same(proto: "price"),
    7: .same(proto: "object"),
    8: .same(proto: "deadline"),
    9: .same(proto: "fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.seller) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.feePayer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.brokerAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.brokerCommission) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.price) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._object) }()
      case 8: try { try decoder.decodeSingularUInt64Field(value: &self.deadline) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.seller.isEmpty {
      try visitor.visitSingularStringField(value: self.seller, fieldNumber: 2)
    }
    if !self.feePayer.isEmpty {
      try visitor.visitSingularStringField(value: self.feePayer, fieldNumber: 3)
    }
    if !self.brokerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.brokerAddress, fieldNumber: 4)
    }
    if !self.brokerCommission.isEmpty {
      try visitor.visitSingularStringField(value: self.brokerCommission, fieldNumber: 5)
    }
    if !self.price.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.price, fieldNumber: 6)
    }
    if let v = self._object {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if self.deadline != 0 {
      try visitor.visitSingularUInt64Field(value: self.deadline, fieldNumber: 8)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Escrow_V1beta1_EventCreatedEscrow, rhs: Starnamed_X_Escrow_V1beta1_EventCreatedEscrow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.seller != rhs.seller {return false}
    if lhs.feePayer != rhs.feePayer {return false}
    if lhs.brokerAddress != rhs.brokerAddress {return false}
    if lhs.brokerCommission != rhs.brokerCommission {return false}
    if lhs.price != rhs.price {return false}
    if lhs._object != rhs._object {return false}
    if lhs.deadline != rhs.deadline {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Starnamed_X_Escrow_V1beta1_EventUpdatedEscrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventUpdatedEscrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "updater"),
    3: .standard(proto: "fee_payer"),
    4: .standard(proto: "new_seller"),
    5: .standard(proto: "new_price"),
    6: .standard(proto: "new_deadline"),
    7: .same(proto: "fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.updater) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.feePayer) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.newSeller) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.newPrice) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.newDeadline) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.updater.isEmpty {
      try visitor.visitSingularStringField(value: self.updater, fieldNumber: 2)
    }
    if !self.feePayer.isEmpty {
      try visitor.visitSingularStringField(value: self.feePayer, fieldNumber: 3)
    }
    if !self.newSeller.isEmpty {
      try visitor.visitSingularStringField(value: self.newSeller, fieldNumber: 4)
    }
    if !self.newPrice.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newPrice, fieldNumber: 5)
    }
    if self.newDeadline != 0 {
      try visitor.visitSingularUInt64Field(value: self.newDeadline, fieldNumber: 6)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Escrow_V1beta1_EventUpdatedEscrow, rhs: Starnamed_X_Escrow_V1beta1_EventUpdatedEscrow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.updater != rhs.updater {return false}
    if lhs.feePayer != rhs.feePayer {return false}
    if lhs.newSeller != rhs.newSeller {return false}
    if lhs.newPrice != rhs.newPrice {return false}
    if lhs.newDeadline != rhs.newDeadline {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Starnamed_X_Escrow_V1beta1_EventCompletedEscrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventCompletedEscrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "fee_payer"),
    3: .same(proto: "buyer"),
    4: .same(proto: "fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.feePayer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.buyer) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.feePayer.isEmpty {
      try visitor.visitSingularStringField(value: self.feePayer, fieldNumber: 2)
    }
    if !self.buyer.isEmpty {
      try visitor.visitSingularStringField(value: self.buyer, fieldNumber: 3)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Escrow_V1beta1_EventCompletedEscrow, rhs: Starnamed_X_Escrow_V1beta1_EventCompletedEscrow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.feePayer != rhs.feePayer {return false}
    if lhs.buyer != rhs.buyer {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Starnamed_X_Escrow_V1beta1_EventRefundedEscrow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventRefundedEscrow"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "fee_payer"),
    3: .same(proto: "sender"),
    4: .same(proto: "fees"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.feePayer) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.fees) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.feePayer.isEmpty {
      try visitor.visitSingularStringField(value: self.feePayer, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.fees.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fees, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Escrow_V1beta1_EventRefundedEscrow, rhs: Starnamed_X_Escrow_V1beta1_EventRefundedEscrow) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.feePayer != rhs.feePayer {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.fees != rhs.fees {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
