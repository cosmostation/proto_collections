// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/committee/v1beta1/committee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// TallyOption enumerates the valid types of a tally.
enum Kava_Committee_V1beta1_TallyOption: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// TALLY_OPTION_UNSPECIFIED defines a null tally option.
  case unspecified // = 0

  /// Votes are tallied each block and the proposal passes as soon as the vote threshold is reached
  case firstPastThePost // = 1

  /// Votes are tallied exactly once, when the deadline time is reached
  case deadline // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .firstPastThePost
    case 2: self = .deadline
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .firstPastThePost: return 1
    case .deadline: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Kava_Committee_V1beta1_TallyOption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Kava_Committee_V1beta1_TallyOption] = [
    .unspecified,
    .firstPastThePost,
    .deadline,
  ]
}

#endif  // swift(>=4.2)

/// BaseCommittee is a common type shared by all Committees
struct Kava_Committee_V1beta1_BaseCommittee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt64 = 0

  var description_p: String = String()

  var members: [Data] = []

  var permissions: [Google_Protobuf2_Any] = []

  /// Smallest percentage that must vote for a proposal to pass
  var voteThreshold: String = String()

  /// The length of time a proposal remains active for. Proposals will close earlier if they get enough votes.
  var proposalDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _proposalDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_proposalDuration = newValue}
  }
  /// Returns true if `proposalDuration` has been explicitly set.
  var hasProposalDuration: Bool {return self._proposalDuration != nil}
  /// Clears the value of `proposalDuration`. Subsequent reads from it will return its default value.
  mutating func clearProposalDuration() {self._proposalDuration = nil}

  var tallyOption: Kava_Committee_V1beta1_TallyOption = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _proposalDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

/// MemberCommittee is an alias of BaseCommittee
struct Kava_Committee_V1beta1_MemberCommittee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseCommittee: Kava_Committee_V1beta1_BaseCommittee {
    get {return _baseCommittee ?? Kava_Committee_V1beta1_BaseCommittee()}
    set {_baseCommittee = newValue}
  }
  /// Returns true if `baseCommittee` has been explicitly set.
  var hasBaseCommittee: Bool {return self._baseCommittee != nil}
  /// Clears the value of `baseCommittee`. Subsequent reads from it will return its default value.
  mutating func clearBaseCommittee() {self._baseCommittee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseCommittee: Kava_Committee_V1beta1_BaseCommittee? = nil
}

/// TokenCommittee supports voting on proposals by token holders
struct Kava_Committee_V1beta1_TokenCommittee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseCommittee: Kava_Committee_V1beta1_BaseCommittee {
    get {return _baseCommittee ?? Kava_Committee_V1beta1_BaseCommittee()}
    set {_baseCommittee = newValue}
  }
  /// Returns true if `baseCommittee` has been explicitly set.
  var hasBaseCommittee: Bool {return self._baseCommittee != nil}
  /// Clears the value of `baseCommittee`. Subsequent reads from it will return its default value.
  mutating func clearBaseCommittee() {self._baseCommittee = nil}

  var quorum: String = String()

  var tallyDenom: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _baseCommittee: Kava_Committee_V1beta1_BaseCommittee? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.committee.v1beta1"

extension Kava_Committee_V1beta1_TallyOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TALLY_OPTION_UNSPECIFIED"),
    1: .same(proto: "TALLY_OPTION_FIRST_PAST_THE_POST"),
    2: .same(proto: "TALLY_OPTION_DEADLINE"),
  ]
}

extension Kava_Committee_V1beta1_BaseCommittee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseCommittee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
    3: .same(proto: "members"),
    4: .same(proto: "permissions"),
    5: .standard(proto: "vote_threshold"),
    6: .standard(proto: "proposal_duration"),
    7: .standard(proto: "tally_option"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedBytesField(value: &self.members) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.permissions) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.voteThreshold) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._proposalDuration) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.tallyOption) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.members.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.members, fieldNumber: 3)
    }
    if !self.permissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.permissions, fieldNumber: 4)
    }
    if !self.voteThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.voteThreshold, fieldNumber: 5)
    }
    if let v = self._proposalDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if self.tallyOption != .unspecified {
      try visitor.visitSingularEnumField(value: self.tallyOption, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_BaseCommittee, rhs: Kava_Committee_V1beta1_BaseCommittee) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.members != rhs.members {return false}
    if lhs.permissions != rhs.permissions {return false}
    if lhs.voteThreshold != rhs.voteThreshold {return false}
    if lhs._proposalDuration != rhs._proposalDuration {return false}
    if lhs.tallyOption != rhs.tallyOption {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_MemberCommittee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MemberCommittee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_committee"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseCommittee) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseCommittee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_MemberCommittee, rhs: Kava_Committee_V1beta1_MemberCommittee) -> Bool {
    if lhs._baseCommittee != rhs._baseCommittee {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Committee_V1beta1_TokenCommittee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TokenCommittee"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_committee"),
    2: .same(proto: "quorum"),
    3: .standard(proto: "tally_denom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._baseCommittee) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.quorum) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tallyDenom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._baseCommittee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.quorum.isEmpty {
      try visitor.visitSingularStringField(value: self.quorum, fieldNumber: 2)
    }
    if !self.tallyDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.tallyDenom, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Committee_V1beta1_TokenCommittee, rhs: Kava_Committee_V1beta1_TokenCommittee) -> Bool {
    if lhs._baseCommittee != rhs._baseCommittee {return false}
    if lhs.quorum != rhs.quorum {return false}
    if lhs.tallyDenom != rhs.tallyDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
