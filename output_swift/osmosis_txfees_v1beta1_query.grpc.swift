//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: osmosis/txfees/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Osmosis_Txfees_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Osmosis_Txfees_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func feeTokens(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>

  func denomSpotPrice(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>

  func denomPoolId(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>

  func baseDenom(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>
}

extension Osmosis_Txfees_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "osmosis.txfees.v1beta1.Query"
  }

  /// FeeTokens returns a list of all the whitelisted fee tokens and their
  /// corresponding pools It does not include the BaseDenom, which has its own
  /// query endpoint
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeTokens.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeTokens(
    _ request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.txfees.v1beta1.Query/FeeTokens",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeTokensInterceptors() ?? []
    )
  }

  /// Unary call to DenomSpotPrice
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomSpotPrice.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomSpotPrice(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.txfees.v1beta1.Query/DenomSpotPrice",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomSpotPriceInterceptors() ?? []
    )
  }

  /// Unary call to DenomPoolId
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomPoolId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomPoolId(
    _ request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.txfees.v1beta1.Query/DenomPoolId",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomPoolIdInterceptors() ?? []
    )
  }

  /// Unary call to BaseDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to BaseDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func baseDenom(
    _ request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse> {
    return self.makeUnaryCall(
      path: "/osmosis.txfees.v1beta1.Query/BaseDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBaseDenomInterceptors() ?? []
    )
  }
}

internal protocol Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'feeTokens'.
  func makeFeeTokensInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>]

  /// - Returns: Interceptors to use when invoking 'denomSpotPrice'.
  func makeDenomSpotPriceInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>]

  /// - Returns: Interceptors to use when invoking 'denomPoolId'.
  func makeDenomPoolIdInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>]

  /// - Returns: Interceptors to use when invoking 'baseDenom'.
  func makeBaseDenomInterceptors() -> [ClientInterceptor<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>]
}

internal final class Osmosis_Txfees_V1beta1_QueryClient: Osmosis_Txfees_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the osmosis.txfees.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Osmosis_Txfees_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Osmosis_Txfees_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Osmosis_Txfees_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// FeeTokens returns a list of all the whitelisted fee tokens and their
  /// corresponding pools It does not include the BaseDenom, which has its own
  /// query endpoint
  func feeTokens(request: Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>

  func denomSpotPrice(request: Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>

  func denomPoolId(request: Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>

  func baseDenom(request: Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>
}

extension Osmosis_Txfees_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "osmosis.txfees.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FeeTokens":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>(),
        interceptors: self.interceptors?.makeFeeTokensInterceptors() ?? [],
        userFunction: self.feeTokens(request:context:)
      )

    case "DenomSpotPrice":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>(),
        interceptors: self.interceptors?.makeDenomSpotPriceInterceptors() ?? [],
        userFunction: self.denomSpotPrice(request:context:)
      )

    case "DenomPoolId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>(),
        interceptors: self.interceptors?.makeDenomPoolIdInterceptors() ?? [],
        userFunction: self.denomPoolId(request:context:)
      )

    case "BaseDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest>(),
        responseSerializer: ProtobufSerializer<Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>(),
        interceptors: self.interceptors?.makeBaseDenomInterceptors() ?? [],
        userFunction: self.baseDenom(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Osmosis_Txfees_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'feeTokens'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFeeTokensInterceptors() -> [ServerInterceptor<Osmosis_Txfees_V1beta1_QueryFeeTokensRequest, Osmosis_Txfees_V1beta1_QueryFeeTokensResponse>]

  /// - Returns: Interceptors to use when handling 'denomSpotPrice'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomSpotPriceInterceptors() -> [ServerInterceptor<Osmosis_Txfees_V1beta1_QueryDenomSpotPriceRequest, Osmosis_Txfees_V1beta1_QueryDenomSpotPriceResponse>]

  /// - Returns: Interceptors to use when handling 'denomPoolId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomPoolIdInterceptors() -> [ServerInterceptor<Osmosis_Txfees_V1beta1_QueryDenomPoolIdRequest, Osmosis_Txfees_V1beta1_QueryDenomPoolIdResponse>]

  /// - Returns: Interceptors to use when handling 'baseDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBaseDenomInterceptors() -> [ServerInterceptor<Osmosis_Txfees_V1beta1_QueryBaseDenomRequest, Osmosis_Txfees_V1beta1_QueryBaseDenomResponse>]
}
