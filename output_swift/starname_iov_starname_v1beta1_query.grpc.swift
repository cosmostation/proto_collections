//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: starname/iov/starname/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Starnamed_X_Starname_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Starnamed_X_Starname_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Starnamed_X_Starname_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func domain(
    _ request: Starnamed_X_Starname_V1beta1_QueryDomainRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryDomainRequest, Starnamed_X_Starname_V1beta1_QueryDomainResponse>

  func domainAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest, Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse>

  func starname(
    _ request: Starnamed_X_Starname_V1beta1_QueryStarnameRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryStarnameRequest, Starnamed_X_Starname_V1beta1_QueryStarnameResponse>

  func ownerAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse>

  func ownerDomains(
    _ request: Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse>

  func resourceAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest, Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse>

  func brokerAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse>

  func brokerDomains(
    _ request: Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse>

  func yield(
    _ request: Starnamed_X_Starname_V1beta1_QueryYieldRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryYieldRequest, Starnamed_X_Starname_V1beta1_QueryYieldResponse>
}

extension Starnamed_X_Starname_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "starnamed.x.starname.v1beta1.Query"
  }

  /// Domain gets a starname's domain info.
  ///
  /// - Parameters:
  ///   - request: Request to send to Domain.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func domain(
    _ request: Starnamed_X_Starname_V1beta1_QueryDomainRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryDomainRequest, Starnamed_X_Starname_V1beta1_QueryDomainResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/Domain",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDomainInterceptors() ?? []
    )
  }

  /// DomainAccounts gets accounts associated with a given domain.
  ///
  /// - Parameters:
  ///   - request: Request to send to DomainAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func domainAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest, Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/DomainAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDomainAccountsInterceptors() ?? []
    )
  }

  /// Starname gets all the information associated with a starname.
  ///
  /// - Parameters:
  ///   - request: Request to send to Starname.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func starname(
    _ request: Starnamed_X_Starname_V1beta1_QueryStarnameRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryStarnameRequest, Starnamed_X_Starname_V1beta1_QueryStarnameResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/Starname",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStarnameInterceptors() ?? []
    )
  }

  /// OwnerAccounts gets accounts associated with a given owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to OwnerAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ownerAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/OwnerAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerAccountsInterceptors() ?? []
    )
  }

  /// OwnerDomains gets domains associated with a given owner.
  ///
  /// - Parameters:
  ///   - request: Request to send to OwnerDomains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ownerDomains(
    _ request: Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/OwnerDomains",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerDomainsInterceptors() ?? []
    )
  }

  /// ResourceAccounts gets accounts associated with a given resource.
  ///
  /// - Parameters:
  ///   - request: Request to send to ResourceAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func resourceAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest, Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/ResourceAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeResourceAccountsInterceptors() ?? []
    )
  }

  /// BrokerAccounts gets accounts associated with a given broker.
  ///
  /// - Parameters:
  ///   - request: Request to send to BrokerAccounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func brokerAccounts(
    _ request: Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/BrokerAccounts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBrokerAccountsInterceptors() ?? []
    )
  }

  /// BrokerDomains gets domains associated with a given broker.
  ///
  /// - Parameters:
  ///   - request: Request to send to BrokerDomains.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func brokerDomains(
    _ request: Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/BrokerDomains",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBrokerDomainsInterceptors() ?? []
    )
  }

  /// Yield estimates and retrieves the annualized yield for delegators
  ///
  /// - Parameters:
  ///   - request: Request to send to Yield.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func yield(
    _ request: Starnamed_X_Starname_V1beta1_QueryYieldRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Starnamed_X_Starname_V1beta1_QueryYieldRequest, Starnamed_X_Starname_V1beta1_QueryYieldResponse> {
    return self.makeUnaryCall(
      path: "/starnamed.x.starname.v1beta1.Query/Yield",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeYieldInterceptors() ?? []
    )
  }
}

internal protocol Starnamed_X_Starname_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'domain'.
  func makeDomainInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryDomainRequest, Starnamed_X_Starname_V1beta1_QueryDomainResponse>]

  /// - Returns: Interceptors to use when invoking 'domainAccounts'.
  func makeDomainAccountsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest, Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'starname'.
  func makeStarnameInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryStarnameRequest, Starnamed_X_Starname_V1beta1_QueryStarnameResponse>]

  /// - Returns: Interceptors to use when invoking 'ownerAccounts'.
  func makeOwnerAccountsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'ownerDomains'.
  func makeOwnerDomainsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse>]

  /// - Returns: Interceptors to use when invoking 'resourceAccounts'.
  func makeResourceAccountsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest, Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'brokerAccounts'.
  func makeBrokerAccountsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'brokerDomains'.
  func makeBrokerDomainsInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse>]

  /// - Returns: Interceptors to use when invoking 'yield'.
  func makeYieldInterceptors() -> [ClientInterceptor<Starnamed_X_Starname_V1beta1_QueryYieldRequest, Starnamed_X_Starname_V1beta1_QueryYieldResponse>]
}

internal final class Starnamed_X_Starname_V1beta1_QueryClient: Starnamed_X_Starname_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Starnamed_X_Starname_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the starnamed.x.starname.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Starnamed_X_Starname_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Starnamed_X_Starname_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Starnamed_X_Starname_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Domain gets a starname's domain info.
  func domain(request: Starnamed_X_Starname_V1beta1_QueryDomainRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryDomainResponse>

  /// DomainAccounts gets accounts associated with a given domain.
  func domainAccounts(request: Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse>

  /// Starname gets all the information associated with a starname.
  func starname(request: Starnamed_X_Starname_V1beta1_QueryStarnameRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryStarnameResponse>

  /// OwnerAccounts gets accounts associated with a given owner.
  func ownerAccounts(request: Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse>

  /// OwnerDomains gets domains associated with a given owner.
  func ownerDomains(request: Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse>

  /// ResourceAccounts gets accounts associated with a given resource.
  func resourceAccounts(request: Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse>

  /// BrokerAccounts gets accounts associated with a given broker.
  func brokerAccounts(request: Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse>

  /// BrokerDomains gets domains associated with a given broker.
  func brokerDomains(request: Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse>

  /// Yield estimates and retrieves the annualized yield for delegators
  func yield(request: Starnamed_X_Starname_V1beta1_QueryYieldRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Starnamed_X_Starname_V1beta1_QueryYieldResponse>
}

extension Starnamed_X_Starname_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "starnamed.x.starname.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Domain":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryDomainRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryDomainResponse>(),
        interceptors: self.interceptors?.makeDomainInterceptors() ?? [],
        userFunction: self.domain(request:context:)
      )

    case "DomainAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse>(),
        interceptors: self.interceptors?.makeDomainAccountsInterceptors() ?? [],
        userFunction: self.domainAccounts(request:context:)
      )

    case "Starname":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryStarnameRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryStarnameResponse>(),
        interceptors: self.interceptors?.makeStarnameInterceptors() ?? [],
        userFunction: self.starname(request:context:)
      )

    case "OwnerAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse>(),
        interceptors: self.interceptors?.makeOwnerAccountsInterceptors() ?? [],
        userFunction: self.ownerAccounts(request:context:)
      )

    case "OwnerDomains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse>(),
        interceptors: self.interceptors?.makeOwnerDomainsInterceptors() ?? [],
        userFunction: self.ownerDomains(request:context:)
      )

    case "ResourceAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse>(),
        interceptors: self.interceptors?.makeResourceAccountsInterceptors() ?? [],
        userFunction: self.resourceAccounts(request:context:)
      )

    case "BrokerAccounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse>(),
        interceptors: self.interceptors?.makeBrokerAccountsInterceptors() ?? [],
        userFunction: self.brokerAccounts(request:context:)
      )

    case "BrokerDomains":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse>(),
        interceptors: self.interceptors?.makeBrokerDomainsInterceptors() ?? [],
        userFunction: self.brokerDomains(request:context:)
      )

    case "Yield":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Starnamed_X_Starname_V1beta1_QueryYieldRequest>(),
        responseSerializer: ProtobufSerializer<Starnamed_X_Starname_V1beta1_QueryYieldResponse>(),
        interceptors: self.interceptors?.makeYieldInterceptors() ?? [],
        userFunction: self.yield(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Starnamed_X_Starname_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'domain'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDomainInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryDomainRequest, Starnamed_X_Starname_V1beta1_QueryDomainResponse>]

  /// - Returns: Interceptors to use when handling 'domainAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDomainAccountsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryDomainAccountsRequest, Starnamed_X_Starname_V1beta1_QueryDomainAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'starname'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStarnameInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryStarnameRequest, Starnamed_X_Starname_V1beta1_QueryStarnameResponse>]

  /// - Returns: Interceptors to use when handling 'ownerAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerAccountsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryOwnerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'ownerDomains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOwnerDomainsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryOwnerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryOwnerDomainsResponse>]

  /// - Returns: Interceptors to use when handling 'resourceAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeResourceAccountsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryResourceAccountsRequest, Starnamed_X_Starname_V1beta1_QueryResourceAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'brokerAccounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBrokerAccountsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryBrokerAccountsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'brokerDomains'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBrokerDomainsInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryBrokerDomainsRequest, Starnamed_X_Starname_V1beta1_QueryBrokerDomainsResponse>]

  /// - Returns: Interceptors to use when handling 'yield'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeYieldInterceptors() -> [ServerInterceptor<Starnamed_X_Starname_V1beta1_QueryYieldRequest, Starnamed_X_Starname_V1beta1_QueryYieldResponse>]
}
