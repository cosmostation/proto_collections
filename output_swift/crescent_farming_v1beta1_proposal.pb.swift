// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crescent/farming/v1beta1/proposal.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// PublicPlanProposal defines a public farming plan governance proposal that receives one of the following requests:
/// A request that creates a public farming plan, a request that updates the plan, and a request that deletes the plan.
/// For public plan creation, depending on which field is passed, either epoch amount or epoch ratio, it creates a fixed
/// amount plan or ratio plan.
struct Crescent_Farming_V1beta1_PublicPlanProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// title specifies the title of the plan
  var title: String = String()

  /// description specifies the description of the plan
  var description_p: String = String()

  /// add_plan_requests specifies AddPlanRequest object
  var addPlanRequests: [Crescent_Farming_V1beta1_AddPlanRequest] = []

  /// modify_plan_requests specifies ModifyPlanRequest object
  var modifyPlanRequests: [Crescent_Farming_V1beta1_ModifyPlanRequest] = []

  /// delete_plan_requests specifies DeletePlanRequest object
  var deletePlanRequests: [Crescent_Farming_V1beta1_DeletePlanRequest] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// AddPlanRequest details a proposal for creating a public plan.
struct Crescent_Farming_V1beta1_AddPlanRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name specifies the plan name for display
  var name: String = String()

  /// farming_pool_address defines the bech32-encoded address of the farming pool
  var farmingPoolAddress: String = String()

  /// termination_address defines the bech32-encoded address that terminates plan
  /// when the plan ends after the end time, the balance of farming pool address
  /// is transferred to the termination address
  var terminationAddress: String = String()

  /// staking_coin_weights specifies coin weights for the plan
  var stakingCoinWeights: [Cosmos_Base_V1beta1_DecCoin] = []

  /// start_time specifies the start time of the plan
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// end_time specifies the end time of the plan
  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  /// epoch_amount specifies the distributing amount for each epoch
  var epochAmount: [Cosmos_Base_V1beta1_Coin] = []

  /// epoch_ratio specifies the distributing amount by ratio
  var epochRatio: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// ModifyPlanRequest details a proposal for modifying the existing public plan.
struct Crescent_Farming_V1beta1_ModifyPlanRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// plan_id specifies index of the farming plan
  var planID: UInt64 = 0

  /// name specifies the plan name for display
  var name: String = String()

  /// farming_pool_address defines the bech32-encoded address of the farming pool
  var farmingPoolAddress: String = String()

  /// termination_address defines the bech32-encoded address that terminates plan
  /// when the plan ends after the end time, the balance of farming pool address
  /// is transferred to the termination address
  var terminationAddress: String = String()

  /// staking_coin_weights specifies coin weights for the plan
  var stakingCoinWeights: [Cosmos_Base_V1beta1_DecCoin] = []

  /// start_time specifies the start time of the plan
  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  /// end_time specifies the end time of the plan
  var endTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _endTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_endTime = newValue}
  }
  /// Returns true if `endTime` has been explicitly set.
  var hasEndTime: Bool {return self._endTime != nil}
  /// Clears the value of `endTime`. Subsequent reads from it will return its default value.
  mutating func clearEndTime() {self._endTime = nil}

  /// epoch_amount specifies the distributing amount for each epoch
  var epochAmount: [Cosmos_Base_V1beta1_Coin] = []

  /// epoch_ratio specifies the distributing amount by ratio
  var epochRatio: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _endTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// DeletePlanRequest details a proposal for deleting an existing public plan.
struct Crescent_Farming_V1beta1_DeletePlanRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// plan_id specifies index of the farming plan
  var planID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crescent.farming.v1beta1"

extension Crescent_Farming_V1beta1_PublicPlanProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicPlanProposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "add_plan_requests"),
    4: .standard(proto: "modify_plan_requests"),
    5: .standard(proto: "delete_plan_requests"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.addPlanRequests) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.modifyPlanRequests) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.deletePlanRequests) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.addPlanRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addPlanRequests, fieldNumber: 3)
    }
    if !self.modifyPlanRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modifyPlanRequests, fieldNumber: 4)
    }
    if !self.deletePlanRequests.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deletePlanRequests, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Farming_V1beta1_PublicPlanProposal, rhs: Crescent_Farming_V1beta1_PublicPlanProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.addPlanRequests != rhs.addPlanRequests {return false}
    if lhs.modifyPlanRequests != rhs.modifyPlanRequests {return false}
    if lhs.deletePlanRequests != rhs.deletePlanRequests {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Farming_V1beta1_AddPlanRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddPlanRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "farming_pool_address"),
    3: .standard(proto: "termination_address"),
    4: .standard(proto: "staking_coin_weights"),
    5: .standard(proto: "start_time"),
    6: .standard(proto: "end_time"),
    7: .standard(proto: "epoch_amount"),
    8: .standard(proto: "epoch_ratio"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.farmingPoolAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.terminationAddress) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.stakingCoinWeights) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.epochAmount) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.epochRatio) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.farmingPoolAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.farmingPoolAddress, fieldNumber: 2)
    }
    if !self.terminationAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.terminationAddress, fieldNumber: 3)
    }
    if !self.stakingCoinWeights.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stakingCoinWeights, fieldNumber: 4)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if !self.epochAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.epochAmount, fieldNumber: 7)
    }
    if !self.epochRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.epochRatio, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Farming_V1beta1_AddPlanRequest, rhs: Crescent_Farming_V1beta1_AddPlanRequest) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.farmingPoolAddress != rhs.farmingPoolAddress {return false}
    if lhs.terminationAddress != rhs.terminationAddress {return false}
    if lhs.stakingCoinWeights != rhs.stakingCoinWeights {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.epochAmount != rhs.epochAmount {return false}
    if lhs.epochRatio != rhs.epochRatio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Farming_V1beta1_ModifyPlanRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModifyPlanRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plan_id"),
    2: .same(proto: "name"),
    3: .standard(proto: "farming_pool_address"),
    4: .standard(proto: "termination_address"),
    5: .standard(proto: "staking_coin_weights"),
    6: .standard(proto: "start_time"),
    7: .standard(proto: "end_time"),
    8: .standard(proto: "epoch_amount"),
    9: .standard(proto: "epoch_ratio"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.planID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.farmingPoolAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.terminationAddress) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.stakingCoinWeights) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._endTime) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.epochAmount) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.epochRatio) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.planID != 0 {
      try visitor.visitSingularUInt64Field(value: self.planID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.farmingPoolAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.farmingPoolAddress, fieldNumber: 3)
    }
    if !self.terminationAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.terminationAddress, fieldNumber: 4)
    }
    if !self.stakingCoinWeights.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stakingCoinWeights, fieldNumber: 5)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._endTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.epochAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.epochAmount, fieldNumber: 8)
    }
    if !self.epochRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.epochRatio, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Farming_V1beta1_ModifyPlanRequest, rhs: Crescent_Farming_V1beta1_ModifyPlanRequest) -> Bool {
    if lhs.planID != rhs.planID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.farmingPoolAddress != rhs.farmingPoolAddress {return false}
    if lhs.terminationAddress != rhs.terminationAddress {return false}
    if lhs.stakingCoinWeights != rhs.stakingCoinWeights {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._endTime != rhs._endTime {return false}
    if lhs.epochAmount != rhs.epochAmount {return false}
    if lhs.epochRatio != rhs.epochRatio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Crescent_Farming_V1beta1_DeletePlanRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeletePlanRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plan_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.planID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.planID != 0 {
      try visitor.visitSingularUInt64Field(value: self.planID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Crescent_Farming_V1beta1_DeletePlanRequest, rhs: Crescent_Farming_V1beta1_DeletePlanRequest) -> Bool {
    if lhs.planID != rhs.planID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
