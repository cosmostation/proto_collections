// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: axelar/snapshot/v1beta1/query.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Axelar_Snapshot_V1beta1_QueryValidatorsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validators: [Axelar_Snapshot_V1beta1_QueryValidatorsResponse.Validator] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TssIllegibilityInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tombstoned: Bool = false

    var jailed: Bool = false

    var missedTooManyBlocks: Bool = false

    var noProxyRegistered: Bool = false

    var tssSuspended: Bool = false

    var proxyInsuficientFunds: Bool = false

    var staleTssHeartbeat: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Validator {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var operatorAddress: String = String()

    var moniker: String = String()

    var tssIllegibilityInfo: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo {
      get {return _tssIllegibilityInfo ?? Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo()}
      set {_tssIllegibilityInfo = newValue}
    }
    /// Returns true if `tssIllegibilityInfo` has been explicitly set.
    var hasTssIllegibilityInfo: Bool {return self._tssIllegibilityInfo != nil}
    /// Clears the value of `tssIllegibilityInfo`. Subsequent reads from it will return its default value.
    mutating func clearTssIllegibilityInfo() {self._tssIllegibilityInfo = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _tssIllegibilityInfo: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo? = nil
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "axelar.snapshot.v1beta1"

extension Axelar_Snapshot_V1beta1_QueryValidatorsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryValidatorsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validators"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.validators) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.validators, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse, rhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse) -> Bool {
    if lhs.validators != rhs.validators {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Snapshot_V1beta1_QueryValidatorsResponse.protoMessageName + ".TssIllegibilityInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tombstoned"),
    2: .same(proto: "jailed"),
    3: .standard(proto: "missed_too_many_blocks"),
    4: .standard(proto: "no_proxy_registered"),
    5: .standard(proto: "tss_suspended"),
    6: .standard(proto: "proxy_insuficient_funds"),
    7: .standard(proto: "stale_tss_heartbeat"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.tombstoned) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.jailed) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.missedTooManyBlocks) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.noProxyRegistered) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.tssSuspended) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.proxyInsuficientFunds) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.staleTssHeartbeat) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tombstoned != false {
      try visitor.visitSingularBoolField(value: self.tombstoned, fieldNumber: 1)
    }
    if self.jailed != false {
      try visitor.visitSingularBoolField(value: self.jailed, fieldNumber: 2)
    }
    if self.missedTooManyBlocks != false {
      try visitor.visitSingularBoolField(value: self.missedTooManyBlocks, fieldNumber: 3)
    }
    if self.noProxyRegistered != false {
      try visitor.visitSingularBoolField(value: self.noProxyRegistered, fieldNumber: 4)
    }
    if self.tssSuspended != false {
      try visitor.visitSingularBoolField(value: self.tssSuspended, fieldNumber: 5)
    }
    if self.proxyInsuficientFunds != false {
      try visitor.visitSingularBoolField(value: self.proxyInsuficientFunds, fieldNumber: 6)
    }
    if self.staleTssHeartbeat != false {
      try visitor.visitSingularBoolField(value: self.staleTssHeartbeat, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo, rhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.TssIllegibilityInfo) -> Bool {
    if lhs.tombstoned != rhs.tombstoned {return false}
    if lhs.jailed != rhs.jailed {return false}
    if lhs.missedTooManyBlocks != rhs.missedTooManyBlocks {return false}
    if lhs.noProxyRegistered != rhs.noProxyRegistered {return false}
    if lhs.tssSuspended != rhs.tssSuspended {return false}
    if lhs.proxyInsuficientFunds != rhs.proxyInsuficientFunds {return false}
    if lhs.staleTssHeartbeat != rhs.staleTssHeartbeat {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Axelar_Snapshot_V1beta1_QueryValidatorsResponse.Validator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Axelar_Snapshot_V1beta1_QueryValidatorsResponse.protoMessageName + ".Validator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "operator_address"),
    2: .same(proto: "moniker"),
    3: .standard(proto: "tss_illegibility_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.operatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moniker) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._tssIllegibilityInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.operatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.operatorAddress, fieldNumber: 1)
    }
    if !self.moniker.isEmpty {
      try visitor.visitSingularStringField(value: self.moniker, fieldNumber: 2)
    }
    if let v = self._tssIllegibilityInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.Validator, rhs: Axelar_Snapshot_V1beta1_QueryValidatorsResponse.Validator) -> Bool {
    if lhs.operatorAddress != rhs.operatorAddress {return false}
    if lhs.moniker != rhs.moniker {return false}
    if lhs._tssIllegibilityInfo != rhs._tssIllegibilityInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
