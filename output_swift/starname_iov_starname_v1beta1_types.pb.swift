// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: starname/iov/starname/v1beta1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Resource defines a resource owned by an account
struct Starnamed_X_Starname_V1beta1_Resource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// URI defines the ID of the resource
  var uri: String = String()

  /// Resource is the resource
  var resource: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Domain defines a domain
struct Starnamed_X_Starname_V1beta1_Domain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name is the name of the domain
  var name: String = String()

  /// Admin is the owner of the domain
  var admin: Data = Data()

  var broker: Data = Data()

  /// ValidUntil is a unix timestamp defines the time when the domain will become invalid in seconds
  var validUntil: Int64 = 0

  /// Type defines the type of the domain
  var type: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Account defines an account that belongs to a domain
/// NOTE: It should not be confused with cosmos-sdk auth account
/// github.com/cosmos/cosmos-sdk/x/auth.Account
struct Starnamed_X_Starname_V1beta1_Account {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Domain references the domain this account belongs to
  var domain: String = String()

  /// Name is the name of the account
  var name: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// Owner is the address that owns the account
  var owner: Data = Data()

  /// Broker identifies an entity that facilitated the transaction of the account and can be empty
  var broker: Data = Data()

  /// ValidUntil defines a unix timestamp of the expiration of the account in seconds
  var validUntil: Int64 = 0

  /// Resources is the list of resources an account resolves to
  var resources: [Starnamed_X_Starname_V1beta1_Resource] = []

  /// Certificates contains the list of certificates to identify the account owner
  var certificates: [Data] = []

  /// MetadataURI contains a link to extra information regarding the account
  var metadataUri: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "starnamed.x.starname.v1beta1"

extension Starnamed_X_Starname_V1beta1_Resource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Resource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "resource"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uri.isEmpty {
      try visitor.visitSingularStringField(value: self.uri, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Starname_V1beta1_Resource, rhs: Starnamed_X_Starname_V1beta1_Resource) -> Bool {
    if lhs.uri != rhs.uri {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Starnamed_X_Starname_V1beta1_Domain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Domain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "admin"),
    3: .same(proto: "broker"),
    4: .standard(proto: "valid_until"),
    5: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.admin) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.broker) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.validUntil) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.admin.isEmpty {
      try visitor.visitSingularBytesField(value: self.admin, fieldNumber: 2)
    }
    if !self.broker.isEmpty {
      try visitor.visitSingularBytesField(value: self.broker, fieldNumber: 3)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularInt64Field(value: self.validUntil, fieldNumber: 4)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Starname_V1beta1_Domain, rhs: Starnamed_X_Starname_V1beta1_Domain) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.admin != rhs.admin {return false}
    if lhs.broker != rhs.broker {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Starnamed_X_Starname_V1beta1_Account: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Account"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "name"),
    3: .same(proto: "owner"),
    4: .same(proto: "broker"),
    5: .standard(proto: "valid_until"),
    6: .same(proto: "resources"),
    7: .same(proto: "certificates"),
    8: .standard(proto: "metadata_uri"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.domain) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.owner) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.broker) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.validUntil) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.resources) }()
      case 7: try { try decoder.decodeRepeatedBytesField(value: &self.certificates) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.metadataUri) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.domain.isEmpty {
      try visitor.visitSingularStringField(value: self.domain, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularBytesField(value: self.owner, fieldNumber: 3)
    }
    if !self.broker.isEmpty {
      try visitor.visitSingularBytesField(value: self.broker, fieldNumber: 4)
    }
    if self.validUntil != 0 {
      try visitor.visitSingularInt64Field(value: self.validUntil, fieldNumber: 5)
    }
    if !self.resources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resources, fieldNumber: 6)
    }
    if !self.certificates.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.certificates, fieldNumber: 7)
    }
    if !self.metadataUri.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataUri, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Starnamed_X_Starname_V1beta1_Account, rhs: Starnamed_X_Starname_V1beta1_Account) -> Bool {
    if lhs.domain != rhs.domain {return false}
    if lhs._name != rhs._name {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.broker != rhs.broker {return false}
    if lhs.validUntil != rhs.validUntil {return false}
    if lhs.resources != rhs.resources {return false}
    if lhs.certificates != rhs.certificates {return false}
    if lhs.metadataUri != rhs.metadataUri {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
