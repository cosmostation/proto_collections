// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: kava/cdp/v1beta1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the cdp module's genesis state.
struct Kava_Cdp_V1beta1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// params defines all the paramaters of the module.
  var params: Kava_Cdp_V1beta1_Params {
    get {return _storage._params ?? Kava_Cdp_V1beta1_Params()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  mutating func clearParams() {_uniqueStorage()._params = nil}

  var cdps: [Kava_Cdp_V1beta1_CDP] {
    get {return _storage._cdps}
    set {_uniqueStorage()._cdps = newValue}
  }

  var deposits: [Kava_Cdp_V1beta1_Deposit] {
    get {return _storage._deposits}
    set {_uniqueStorage()._deposits = newValue}
  }

  var startingCdpID: UInt64 {
    get {return _storage._startingCdpID}
    set {_uniqueStorage()._startingCdpID = newValue}
  }

  var debtDenom: String {
    get {return _storage._debtDenom}
    set {_uniqueStorage()._debtDenom = newValue}
  }

  var govDenom: String {
    get {return _storage._govDenom}
    set {_uniqueStorage()._govDenom = newValue}
  }

  var previousAccumulationTimes: [Kava_Cdp_V1beta1_GenesisAccumulationTime] {
    get {return _storage._previousAccumulationTimes}
    set {_uniqueStorage()._previousAccumulationTimes = newValue}
  }

  var totalPrincipals: [Kava_Cdp_V1beta1_GenesisTotalPrincipal] {
    get {return _storage._totalPrincipals}
    set {_uniqueStorage()._totalPrincipals = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Params defines the parameters for the cdp module.
struct Kava_Cdp_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralParams: [Kava_Cdp_V1beta1_CollateralParam] = []

  var debtParam: Kava_Cdp_V1beta1_DebtParam {
    get {return _debtParam ?? Kava_Cdp_V1beta1_DebtParam()}
    set {_debtParam = newValue}
  }
  /// Returns true if `debtParam` has been explicitly set.
  var hasDebtParam: Bool {return self._debtParam != nil}
  /// Clears the value of `debtParam`. Subsequent reads from it will return its default value.
  mutating func clearDebtParam() {self._debtParam = nil}

  var globalDebtLimit: Cosmos_Base_V1beta1_Coin {
    get {return _globalDebtLimit ?? Cosmos_Base_V1beta1_Coin()}
    set {_globalDebtLimit = newValue}
  }
  /// Returns true if `globalDebtLimit` has been explicitly set.
  var hasGlobalDebtLimit: Bool {return self._globalDebtLimit != nil}
  /// Clears the value of `globalDebtLimit`. Subsequent reads from it will return its default value.
  mutating func clearGlobalDebtLimit() {self._globalDebtLimit = nil}

  var surplusAuctionThreshold: String = String()

  var surplusAuctionLot: String = String()

  var debtAuctionThreshold: String = String()

  var debtAuctionLot: String = String()

  var circuitBreaker: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _debtParam: Kava_Cdp_V1beta1_DebtParam? = nil
  fileprivate var _globalDebtLimit: Cosmos_Base_V1beta1_Coin? = nil
}

/// DebtParam defines governance params for debt assets
struct Kava_Cdp_V1beta1_DebtParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var referenceAsset: String = String()

  var conversionFactor: String = String()

  var debtFloor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// CollateralParam defines governance parameters for each collateral type within the cdp module
struct Kava_Cdp_V1beta1_CollateralParam {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var denom: String = String()

  var type: String = String()

  var liquidationRatio: String = String()

  var debtLimit: Cosmos_Base_V1beta1_Coin {
    get {return _debtLimit ?? Cosmos_Base_V1beta1_Coin()}
    set {_debtLimit = newValue}
  }
  /// Returns true if `debtLimit` has been explicitly set.
  var hasDebtLimit: Bool {return self._debtLimit != nil}
  /// Clears the value of `debtLimit`. Subsequent reads from it will return its default value.
  mutating func clearDebtLimit() {self._debtLimit = nil}

  var stabilityFee: String = String()

  var auctionSize: String = String()

  var liquidationPenalty: String = String()

  var spotMarketID: String = String()

  var liquidationMarketID: String = String()

  var keeperRewardPercentage: String = String()

  var checkCollateralizationIndexCount: String = String()

  var conversionFactor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _debtLimit: Cosmos_Base_V1beta1_Coin? = nil
}

/// GenesisAccumulationTime defines the previous distribution time and its corresponding denom
struct Kava_Cdp_V1beta1_GenesisAccumulationTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralType: String = String()

  var previousAccumulationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _previousAccumulationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_previousAccumulationTime = newValue}
  }
  /// Returns true if `previousAccumulationTime` has been explicitly set.
  var hasPreviousAccumulationTime: Bool {return self._previousAccumulationTime != nil}
  /// Clears the value of `previousAccumulationTime`. Subsequent reads from it will return its default value.
  mutating func clearPreviousAccumulationTime() {self._previousAccumulationTime = nil}

  var interestFactor: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _previousAccumulationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// GenesisTotalPrincipal defines the total principal and its corresponding collateral type
struct Kava_Cdp_V1beta1_GenesisTotalPrincipal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var collateralType: String = String()

  var totalPrincipal: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "kava.cdp.v1beta1"

extension Kava_Cdp_V1beta1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "params"),
    2: .same(proto: "cdps"),
    3: .same(proto: "deposits"),
    4: .standard(proto: "starting_cdp_id"),
    5: .standard(proto: "debt_denom"),
    6: .standard(proto: "gov_denom"),
    7: .standard(proto: "previous_accumulation_times"),
    8: .standard(proto: "total_principals"),
  ]

  fileprivate class _StorageClass {
    var _params: Kava_Cdp_V1beta1_Params? = nil
    var _cdps: [Kava_Cdp_V1beta1_CDP] = []
    var _deposits: [Kava_Cdp_V1beta1_Deposit] = []
    var _startingCdpID: UInt64 = 0
    var _debtDenom: String = String()
    var _govDenom: String = String()
    var _previousAccumulationTimes: [Kava_Cdp_V1beta1_GenesisAccumulationTime] = []
    var _totalPrincipals: [Kava_Cdp_V1beta1_GenesisTotalPrincipal] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _params = source._params
      _cdps = source._cdps
      _deposits = source._deposits
      _startingCdpID = source._startingCdpID
      _debtDenom = source._debtDenom
      _govDenom = source._govDenom
      _previousAccumulationTimes = source._previousAccumulationTimes
      _totalPrincipals = source._totalPrincipals
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._params) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._cdps) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._deposits) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._startingCdpID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._debtDenom) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._govDenom) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._previousAccumulationTimes) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._totalPrincipals) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._cdps.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._cdps, fieldNumber: 2)
      }
      if !_storage._deposits.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._deposits, fieldNumber: 3)
      }
      if _storage._startingCdpID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._startingCdpID, fieldNumber: 4)
      }
      if !_storage._debtDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._debtDenom, fieldNumber: 5)
      }
      if !_storage._govDenom.isEmpty {
        try visitor.visitSingularStringField(value: _storage._govDenom, fieldNumber: 6)
      }
      if !_storage._previousAccumulationTimes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._previousAccumulationTimes, fieldNumber: 7)
      }
      if !_storage._totalPrincipals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._totalPrincipals, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_GenesisState, rhs: Kava_Cdp_V1beta1_GenesisState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._params != rhs_storage._params {return false}
        if _storage._cdps != rhs_storage._cdps {return false}
        if _storage._deposits != rhs_storage._deposits {return false}
        if _storage._startingCdpID != rhs_storage._startingCdpID {return false}
        if _storage._debtDenom != rhs_storage._debtDenom {return false}
        if _storage._govDenom != rhs_storage._govDenom {return false}
        if _storage._previousAccumulationTimes != rhs_storage._previousAccumulationTimes {return false}
        if _storage._totalPrincipals != rhs_storage._totalPrincipals {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_params"),
    2: .standard(proto: "debt_param"),
    3: .standard(proto: "global_debt_limit"),
    4: .standard(proto: "surplus_auction_threshold"),
    5: .standard(proto: "surplus_auction_lot"),
    6: .standard(proto: "debt_auction_threshold"),
    7: .standard(proto: "debt_auction_lot"),
    8: .standard(proto: "circuit_breaker"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.collateralParams) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._debtParam) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._globalDebtLimit) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.surplusAuctionThreshold) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.surplusAuctionLot) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.debtAuctionThreshold) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.debtAuctionLot) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.circuitBreaker) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collateralParams, fieldNumber: 1)
    }
    if let v = self._debtParam {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._globalDebtLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.surplusAuctionThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.surplusAuctionThreshold, fieldNumber: 4)
    }
    if !self.surplusAuctionLot.isEmpty {
      try visitor.visitSingularStringField(value: self.surplusAuctionLot, fieldNumber: 5)
    }
    if !self.debtAuctionThreshold.isEmpty {
      try visitor.visitSingularStringField(value: self.debtAuctionThreshold, fieldNumber: 6)
    }
    if !self.debtAuctionLot.isEmpty {
      try visitor.visitSingularStringField(value: self.debtAuctionLot, fieldNumber: 7)
    }
    if self.circuitBreaker != false {
      try visitor.visitSingularBoolField(value: self.circuitBreaker, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_Params, rhs: Kava_Cdp_V1beta1_Params) -> Bool {
    if lhs.collateralParams != rhs.collateralParams {return false}
    if lhs._debtParam != rhs._debtParam {return false}
    if lhs._globalDebtLimit != rhs._globalDebtLimit {return false}
    if lhs.surplusAuctionThreshold != rhs.surplusAuctionThreshold {return false}
    if lhs.surplusAuctionLot != rhs.surplusAuctionLot {return false}
    if lhs.debtAuctionThreshold != rhs.debtAuctionThreshold {return false}
    if lhs.debtAuctionLot != rhs.debtAuctionLot {return false}
    if lhs.circuitBreaker != rhs.circuitBreaker {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_DebtParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DebtParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .standard(proto: "reference_asset"),
    3: .standard(proto: "conversion_factor"),
    4: .standard(proto: "debt_floor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.referenceAsset) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.conversionFactor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.debtFloor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.referenceAsset.isEmpty {
      try visitor.visitSingularStringField(value: self.referenceAsset, fieldNumber: 2)
    }
    if !self.conversionFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.conversionFactor, fieldNumber: 3)
    }
    if !self.debtFloor.isEmpty {
      try visitor.visitSingularStringField(value: self.debtFloor, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_DebtParam, rhs: Kava_Cdp_V1beta1_DebtParam) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.referenceAsset != rhs.referenceAsset {return false}
    if lhs.conversionFactor != rhs.conversionFactor {return false}
    if lhs.debtFloor != rhs.debtFloor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_CollateralParam: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollateralParam"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "type"),
    3: .standard(proto: "liquidation_ratio"),
    4: .standard(proto: "debt_limit"),
    5: .standard(proto: "stability_fee"),
    6: .standard(proto: "auction_size"),
    7: .standard(proto: "liquidation_penalty"),
    8: .standard(proto: "spot_market_id"),
    9: .standard(proto: "liquidation_market_id"),
    10: .standard(proto: "keeper_reward_percentage"),
    11: .standard(proto: "check_collateralization_index_count"),
    12: .standard(proto: "conversion_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.liquidationRatio) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._debtLimit) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.stabilityFee) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.auctionSize) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.liquidationPenalty) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.spotMarketID) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.liquidationMarketID) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.keeperRewardPercentage) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.checkCollateralizationIndexCount) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.conversionFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.liquidationRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidationRatio, fieldNumber: 3)
    }
    if let v = self._debtLimit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.stabilityFee.isEmpty {
      try visitor.visitSingularStringField(value: self.stabilityFee, fieldNumber: 5)
    }
    if !self.auctionSize.isEmpty {
      try visitor.visitSingularStringField(value: self.auctionSize, fieldNumber: 6)
    }
    if !self.liquidationPenalty.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidationPenalty, fieldNumber: 7)
    }
    if !self.spotMarketID.isEmpty {
      try visitor.visitSingularStringField(value: self.spotMarketID, fieldNumber: 8)
    }
    if !self.liquidationMarketID.isEmpty {
      try visitor.visitSingularStringField(value: self.liquidationMarketID, fieldNumber: 9)
    }
    if !self.keeperRewardPercentage.isEmpty {
      try visitor.visitSingularStringField(value: self.keeperRewardPercentage, fieldNumber: 10)
    }
    if !self.checkCollateralizationIndexCount.isEmpty {
      try visitor.visitSingularStringField(value: self.checkCollateralizationIndexCount, fieldNumber: 11)
    }
    if !self.conversionFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.conversionFactor, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_CollateralParam, rhs: Kava_Cdp_V1beta1_CollateralParam) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.type != rhs.type {return false}
    if lhs.liquidationRatio != rhs.liquidationRatio {return false}
    if lhs._debtLimit != rhs._debtLimit {return false}
    if lhs.stabilityFee != rhs.stabilityFee {return false}
    if lhs.auctionSize != rhs.auctionSize {return false}
    if lhs.liquidationPenalty != rhs.liquidationPenalty {return false}
    if lhs.spotMarketID != rhs.spotMarketID {return false}
    if lhs.liquidationMarketID != rhs.liquidationMarketID {return false}
    if lhs.keeperRewardPercentage != rhs.keeperRewardPercentage {return false}
    if lhs.checkCollateralizationIndexCount != rhs.checkCollateralizationIndexCount {return false}
    if lhs.conversionFactor != rhs.conversionFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_GenesisAccumulationTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisAccumulationTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_type"),
    2: .standard(proto: "previous_accumulation_time"),
    3: .standard(proto: "interest_factor"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._previousAccumulationTime) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.interestFactor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 1)
    }
    if let v = self._previousAccumulationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.interestFactor.isEmpty {
      try visitor.visitSingularStringField(value: self.interestFactor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_GenesisAccumulationTime, rhs: Kava_Cdp_V1beta1_GenesisAccumulationTime) -> Bool {
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs._previousAccumulationTime != rhs._previousAccumulationTime {return false}
    if lhs.interestFactor != rhs.interestFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Kava_Cdp_V1beta1_GenesisTotalPrincipal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenesisTotalPrincipal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collateral_type"),
    2: .standard(proto: "total_principal"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collateralType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.totalPrincipal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collateralType.isEmpty {
      try visitor.visitSingularStringField(value: self.collateralType, fieldNumber: 1)
    }
    if !self.totalPrincipal.isEmpty {
      try visitor.visitSingularStringField(value: self.totalPrincipal, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Kava_Cdp_V1beta1_GenesisTotalPrincipal, rhs: Kava_Cdp_V1beta1_GenesisTotalPrincipal) -> Bool {
    if lhs.collateralType != rhs.collateralType {return false}
    if lhs.totalPrincipal != rhs.totalPrincipal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
